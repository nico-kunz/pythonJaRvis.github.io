{
    "sqlparse.utils": [
        "contextlib.contextmanager",
        "re",
        "collections",
        "contextlib",
        "re.compile"
    ],
    "re": [
        "<builtin>.chr",
        "<builtin>.type",
        "functools.lru_cache.decorating_function",
        "sre_compile.compile",
        "sre_compile",
        "functools._lru_cache_wrapper.wrapper",
        "re.Scanner",
        "functools",
        "enum",
        "functools.lru_cache",
        "copyreg",
        "<builtin>.globals",
        "re.RegexFlag",
        "sre_parse",
        "copyreg.pickle"
    ],
    "enum": [
        "enum.IntFlag",
        "enum.Flag",
        "enum.Enum",
        "enum._EnumDict",
        "types",
        "<builtin>.object",
        "enum.auto",
        "enum.EnumMeta",
        "enum.IntEnum"
    ],
    "types": [
        "types._cell_factory",
        "types._c",
        "types._ag",
        "<builtin>.type",
        "types.DynamicClassAttribute",
        "<builtin>.object",
        "types._g",
        "types._GeneratorWrapper",
        "<builtin>.globals",
        "types._C"
    ],
    "<builtin>.type": [],
    "types._cell_factory": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "types._C": [],
    "<builtin>.object": [],
    "types.DynamicClassAttribute": [],
    "types._GeneratorWrapper": [
        "<builtin>.property"
    ],
    "<builtin>.property": [],
    "<builtin>.globals": [],
    "enum.auto": [],
    "enum._EnumDict": [],
    "enum.EnumMeta": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "<builtin>.classmethod": [],
    "<builtin>.staticmethod": [],
    "enum.Enum": [
        "types.DynamicClassAttribute.__init__",
        "<builtin>.classmethod"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.bool",
        "<builtin>.getattr"
    ],
    "<builtin>.getattr": [],
    "<builtin>.bool": [],
    "enum.IntEnum": [],
    "enum.Flag": [
        "<builtin>.classmethod"
    ],
    "enum.IntFlag": [
        "<builtin>.classmethod"
    ],
    "sre_compile": [
        "<builtin>.tuple",
        "sre_constants",
        "sre_parse"
    ],
    "sre_parse": [
        "sre_parse.Tokenizer",
        "sre_parse.SubPattern",
        "sre_parse.State",
        "sre_constants",
        "sre_parse.Verbose",
        "<builtin>.frozenset"
    ],
    "sre_constants": [
        "sre_constants.error",
        "sre_constants._NamedIntConstant",
        "sre_constants._makecodes"
    ],
    "sre_constants.error": [],
    "sre_constants._NamedIntConstant": [],
    "sre_constants._makecodes": [
        "<builtin>.globals",
        "<str>.split",
        "<builtin>.enumerate",
        "<str>.strip"
    ],
    "<str>.strip": [],
    "<str>.split": [],
    "<builtin>.enumerate": [],
    "<builtin>.frozenset": [],
    "sre_parse.Verbose": [],
    "sre_parse.State": [
        "<builtin>.property"
    ],
    "sre_parse.SubPattern": [],
    "sre_parse.Tokenizer": [
        "<builtin>.property"
    ],
    "<builtin>.tuple": [],
    "functools": [
        "functools.partialmethod",
        "functools._HashedSeq",
        "<builtin>.object",
        "collections",
        "functools.partial",
        "functools.singledispatchmethod",
        "functools.cached_property",
        "collections.namedtuple",
        "abc",
        "reprlib"
    ],
    "abc": [
        "_py_abc",
        "abc.abstractstaticmethod",
        "abc.ABC",
        "abc.abstractproperty",
        "abc.abstractclassmethod"
    ],
    "abc.abstractclassmethod": [],
    "abc.abstractstaticmethod": [],
    "abc.abstractproperty": [],
    "_py_abc": [
        "_py_abc.ABCMeta",
        "_weakrefset"
    ],
    "_weakrefset": [
        "_weakrefset._IterationGuard",
        "_weakrefset.WeakSet"
    ],
    "_weakrefset._IterationGuard": [],
    "_weakrefset.WeakSet": [],
    "_py_abc.ABCMeta": [],
    "abc.ABC": [],
    "collections": [
        "collections.OrderedDict",
        "collections.UserList",
        "operator",
        "collections._OrderedDictValuesView",
        "collections._Link",
        "collections.UserDict",
        "collections._OrderedDictKeysView",
        "heapq",
        "keyword",
        "collections._OrderedDictItemsView",
        "collections.UserString",
        "collections.ChainMap",
        "collections.Counter",
        "reprlib"
    ],
    "operator": [
        "operator.attrgetter",
        "operator.itemgetter",
        "operator.methodcaller"
    ],
    "operator.attrgetter": [],
    "operator.itemgetter": [],
    "operator.methodcaller": [],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "heapq": [
        "_heapq"
    ],
    "_heapq": [],
    "reprlib": [
        "reprlib.Repr",
        "reprlib.Repr.__init__"
    ],
    "reprlib.Repr": [],
    "reprlib.Repr.__init__": [],
    "collections._OrderedDictKeysView": [],
    "collections._OrderedDictItemsView": [],
    "collections._OrderedDictValuesView": [],
    "collections._Link": [],
    "collections.OrderedDict": [
        "<builtin>.object",
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.classmethod",
        "reprlib.recursive_repr"
    ],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "<builtin>.set": [],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "collections.ChainMap": [
        "<builtin>.property",
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.classmethod"
    ],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "collections.UserList": [],
    "collections.UserString": [],
    "functools.partial": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "functools.partialmethod": [
        "<builtin>.property"
    ],
    "collections.namedtuple": [
        "<builtin>.TypeError",
        "<builtin>.list",
        "<builtin>.type",
        "_collections._tuplegetter",
        "<builtin>.classmethod",
        "<builtin>.map",
        "<builtin>.repr",
        "<builtin>.reversed",
        "<builtin>.isinstance",
        "<builtin>.len",
        "<str>.join",
        "<str>.split",
        "<builtin>.enumerate",
        "<builtin>.tuple",
        "<builtin>.set",
        "<builtin>.exec",
        "<builtin>.zip",
        "collections.<lambda1>",
        "<builtin>.ValueError",
        "<builtin>.str",
        "<builtin>.dict",
        "<str>.replace"
    ],
    "<builtin>.isinstance": [],
    "<builtin>.map": [],
    "<builtin>.list": [],
    "<builtin>.str": [],
    "<builtin>.TypeError": [],
    "<builtin>.ValueError": [],
    "<builtin>.len": [],
    "<builtin>.reversed": [],
    "<builtin>.zip": [],
    "<builtin>.dict": [],
    "<builtin>.repr": [],
    "<str>.join": [],
    "<builtin>.exec": [],
    "collections.<lambda1>": [
        "operator.itemgetter.__init__",
        "<builtin>.property"
    ],
    "operator.itemgetter.__init__": [],
    "_collections._tuplegetter": [],
    "functools._HashedSeq": [],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.cached_property": [],
    "re.RegexFlag": [],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "sre_compile._code",
        "<builtin>.print",
        "sre_compile.dis",
        "<map>.items",
        "sre_parse.parse",
        "<builtin>.tuple",
        "sre_compile.isstring"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "sre_parse.parse": [
        "sre_parse.Tokenizer.error",
        "sre_parse.fix_flags",
        "sre_parse._parse_sub",
        "sre_parse.State.__init__",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.SubPattern.dump",
        "sre_parse.Tokenizer.seek"
    ],
    "sre_parse.Tokenizer.__init__": [
        "<builtin>.isinstance",
        "sre_parse.Tokenizer.__next",
        "<builtin>.str"
    ],
    "sre_parse.Tokenizer.__next": [
        "<builtin>.len",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.State.__init__": [],
    "sre_parse._parse_sub": [
        "sre_parse.Tokenizer.match",
        "<builtin>.len",
        "sre_parse.Tokenizer.tell",
        "sre_parse.SubPattern.append",
        "sre_parse.SubPattern.__init__",
        "sre_parse._parse"
    ],
    "sre_parse._parse": [
        "sre_parse._parse_flags",
        "<str>.isidentifier",
        "<builtin>.int",
        "sre_parse._escape",
        "sre_parse.State.opengroup",
        "sre_parse._parse",
        "sre_parse.Tokenizer.seek",
        "sre_parse.Tokenizer.match",
        "sre_parse.State.closegroup",
        "sre_parse.Tokenizer.error",
        "sre_parse.State.checklookbehindgroup",
        "sre_parse.SubPattern.__init__",
        "<builtin>.OverflowError",
        "sre_parse._uniq",
        "<builtin>.len",
        "sre_parse._class_escape",
        "sre_parse._parse_sub",
        "<builtin>.range",
        "<map>.get",
        "warnings.warn",
        "sre_parse.State.checkgroup",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.Tokenizer.tell",
        "sre_parse.SubPattern.append",
        "sre_parse.Tokenizer.get",
        "warnings",
        "<builtin>.AssertionError"
    ],
    "sre_parse.SubPattern.__init__": [],
    "sre_parse.Tokenizer.get": [
        "sre_parse.Tokenizer.__next"
    ],
    "<builtin>.AssertionError": [],
    "sre_parse.SubPattern.append": [],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse._parse_flags": [
        "sre_parse.Tokenizer.get",
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "warnings": [
        "warnings.catch_warnings",
        "warnings.WarningMessage",
        "warnings.simplefilter",
        "warnings.filterwarnings",
        "<builtin>.hasattr",
        "warnings._OptionError",
        "warnings._processoptions"
    ],
    "warnings._OptionError": [],
    "warnings.WarningMessage": [],
    "warnings.catch_warnings": [],
    "warnings._processoptions": [
        "<builtin>.print",
        "warnings._setoption"
    ],
    "warnings._setoption": [
        "re",
        "warnings._getaction",
        "<builtin>.len",
        "<builtin>.int",
        "warnings.filterwarnings",
        "re.escape",
        "warnings._getcategory"
    ],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.getattr",
        "<builtin>.__import__",
        "<builtin>.issubclass"
    ],
    "<builtin>.__import__": [],
    "<builtin>.issubclass": [],
    "re.escape": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "<builtin>.int": [],
    "warnings.filterwarnings": [
        "<builtin>.isinstance",
        "warnings._add_filter",
        "re",
        "<builtin>.issubclass",
        "re.compile"
    ],
    "re.compile": [
        "re._compile"
    ],
    "re._compile": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type",
        "sre_compile.compile",
        "<builtin>.len",
        "<builtin>.iter",
        "<builtin>.ValueError",
        "<builtin>.next",
        "sre_compile.isstring"
    ],
    "warnings._add_filter": [
        "warnings._filters_mutated"
    ],
    "warnings._filters_mutated": [],
    "<builtin>.print": [],
    "<builtin>.hasattr": [],
    "warnings.simplefilter": [
        "<builtin>.isinstance",
        "warnings._add_filter"
    ],
    "warnings.warn": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.range",
        "<builtin>.type",
        "warnings.warn_explicit",
        "<str>.format",
        "<builtin>.issubclass",
        "warnings._next_external_frame",
        "warnings._is_internal_frame"
    ],
    "<str>.format": [],
    "warnings._is_internal_frame": [],
    "<builtin>.range": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings.warn_explicit": [
        "<builtin>.isinstance",
        "<builtin>.RuntimeError",
        "<map>.get",
        "warnings.WarningMessage.__init__",
        "warnings._showwarnmsg",
        "linecache.getlines",
        "<builtin>.int",
        "<builtin>.issubclass",
        "linecache",
        "<map>.clear",
        "<builtin>.str"
    ],
    "<map>.get": [],
    "<map>.clear": [],
    "linecache": [
        "tokenize",
        "functools",
        "os"
    ],
    "os": [
        "os._add",
        "os._AddedDllDirectory",
        "stat",
        "os._fscodec",
        "os.PathLike",
        "os._get_exports_list",
        "os._exists",
        "os._Environ",
        "os._createenviron",
        "ntpath",
        "os._wrap_close",
        "posixpath",
        "<builtin>.ImportError",
        "<builtin>.globals",
        "<builtin>.set",
        "abc",
        "os._Environ.__init__"
    ],
    "stat": [],
    "<builtin>.ImportError": [],
    "ntpath": [
        "genericpath",
        "<builtin>.hasattr",
        "stat",
        "os"
    ],
    "genericpath": [
        "stat",
        "os"
    ],
    "os._get_exports_list": [
        "<builtin>.list",
        "<builtin>.dir"
    ],
    "<builtin>.dir": [],
    "posixpath": [
        "genericpath",
        "stat",
        "os"
    ],
    "os._exists": [
        "<builtin>.globals"
    ],
    "os._add": [],
    "os._Environ": [],
    "os._createenviron": [
        "os._createenviron.encodekey",
        "os._Environ.__init__"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.encode"
    ],
    "os._createenviron.encode": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "os._Environ.__init__": [],
    "os._fscodec": [],
    "os._wrap_close": [],
    "os.PathLike": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "abc.abstractmethod": [],
    "os._AddedDllDirectory": [],
    "tokenize": [
        "re",
        "token",
        "codecs",
        "collections",
        "tokenize.TokenInfo",
        "tokenize.group",
        "<builtin>.map",
        "<builtin>.any",
        "tokenize._all_string_prefixes",
        "tokenize.StopTokenizing",
        "tokenize.maybe",
        "collections.namedtuple",
        "tokenize.Untokenizer",
        "io",
        "<builtin>.sorted",
        "tokenize.TokenError",
        "<builtin>.set",
        "re.compile"
    ],
    "codecs": [
        "codecs.StreamReaderWriter",
        "codecs.StreamWriter",
        "<builtin>.SystemError",
        "codecs.StreamRecoder",
        "codecs.BufferedIncrementalEncoder",
        "codecs.IncrementalEncoder",
        "codecs.Codec",
        "codecs.CodecInfo",
        "codecs.StreamReader",
        "encodings",
        "codecs.IncrementalDecoder",
        "codecs.BufferedIncrementalDecoder"
    ],
    "<builtin>.SystemError": [],
    "codecs.CodecInfo": [],
    "codecs.Codec": [],
    "codecs.IncrementalEncoder": [],
    "codecs.BufferedIncrementalEncoder": [],
    "codecs.IncrementalDecoder": [],
    "codecs.BufferedIncrementalDecoder": [],
    "codecs.StreamWriter": [],
    "codecs.StreamReader": [],
    "codecs.StreamReaderWriter": [],
    "codecs.StreamRecoder": [],
    "encodings": [
        "encodings.CodecRegistryError",
        "codecs"
    ],
    "encodings.CodecRegistryError": [],
    "io": [
        "io.IOBase",
        "io.BufferedIOBase",
        "io.RawIOBase",
        "io.TextIOBase",
        "abc"
    ],
    "io.IOBase": [],
    "io.RawIOBase": [],
    "io.BufferedIOBase": [],
    "io.TextIOBase": [],
    "token": [
        "<builtin>.globals",
        "<builtin>.isinstance"
    ],
    "<str>.replace": [],
    "tokenize.TokenInfo": [
        "<builtin>.property"
    ],
    "<builtin>.any": [],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.group": [],
    "tokenize._all_string_prefixes": [],
    "<builtin>.sorted": [],
    "tokenize.TokenError": [],
    "tokenize.StopTokenizing": [],
    "tokenize.Untokenizer": [],
    "linecache.getlines": [
        "<builtin>.len",
        "linecache.updatecache",
        "linecache.clearcache"
    ],
    "linecache.updatecache": [
        "posixpath.join",
        "tokenize.open",
        "<builtin>.len",
        "ntpath.isabs",
        "linecache.lazycache",
        "ntpath.join",
        "posixpath.isabs",
        "<str>.startswith",
        "<str>.endswith",
        "<map>.pop"
    ],
    "<map>.pop": [],
    "<str>.startswith": [],
    "<str>.endswith": [],
    "linecache.lazycache": [
        "<str>.startswith",
        "<builtin>.len",
        "<builtin>.getattr",
        "<str>.endswith"
    ],
    "ntpath.isabs": [
        "<builtin>.isinstance",
        "ntpath._get_bothseps",
        "<builtin>.len",
        "<str>.startswith",
        "os._fspath",
        "ntpath.splitdrive",
        "<str>.replace"
    ],
    "os._fspath": [
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "ntpath.splitdrive": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "<str>.replace",
        "os._fspath",
        "<str>.find"
    ],
    "<str>.find": [],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "posixpath.isabs": [
        "os._fspath",
        "posixpath._get_sep",
        "<str>.startswith"
    ],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "ntpath.join": [
        "<builtin>.isinstance",
        "<builtin>.map",
        "genericpath._check_arg_types",
        "os._fspath",
        "ntpath.splitdrive"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "posixpath.join": [
        "<builtin>.map",
        "<str>.endswith",
        "genericpath._check_arg_types",
        "os._fspath",
        "posixpath._get_sep"
    ],
    "tokenize.open": [
        "builtins.open",
        "_io.TextIOWrapper",
        "tokenize.detect_encoding"
    ],
    "builtins.open": [],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.read_or_stop",
        "tokenize.detect_encoding.find_cookie"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "<builtin>.SyntaxError",
        "tokenize._get_normal_name"
    ],
    "<builtin>.SyntaxError": [],
    "tokenize._get_normal_name": [],
    "_io.TextIOWrapper": [],
    "linecache.clearcache": [],
    "<builtin>.RuntimeError": [],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "<str>.strip",
        "tracemalloc",
        "linecache.getline",
        "linecache"
    ],
    "linecache.getline": [
        "linecache.getlines",
        "<builtin>.len"
    ],
    "tracemalloc": [
        "tracemalloc.Statistic",
        "tracemalloc.Traceback",
        "collections.abc",
        "fnmatch",
        "functools",
        "tracemalloc.DomainFilter",
        "tracemalloc.StatisticDiff",
        "tracemalloc.Trace",
        "posixpath",
        "linecache",
        "tracemalloc.Filter",
        "pickle",
        "tracemalloc._Traces",
        "tracemalloc.BaseFilter",
        "tracemalloc.Snapshot",
        "tracemalloc.Frame"
    ],
    "collections.abc": [
        "collections.abc"
    ],
    "fnmatch": [
        "re",
        "functools.lru_cache.decorating_function",
        "functools._lru_cache_wrapper.wrapper",
        "functools",
        "os",
        "functools.lru_cache",
        "posixpath"
    ],
    "functools.lru_cache": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "functools._lru_cache_wrapper",
        "<builtin>.callable",
        "functools.update_wrapper"
    ],
    "<builtin>.callable": [],
    "functools._lru_cache_wrapper": [
        "<builtin>.object",
        "_thread.RLock"
    ],
    "_thread.RLock": [],
    "functools.update_wrapper": [
        "<builtin>.getattr"
    ],
    "functools.lru_cache.decorating_function": [
        "functools._lru_cache_wrapper",
        "functools.update_wrapper"
    ],
    "functools._lru_cache_wrapper.wrapper": [
        "functools._make_key",
        "fnmatch._compile_pattern"
    ],
    "functools._make_key": [
        "<builtin>.tuple",
        "<builtin>.len",
        "functools._HashedSeq.__init__",
        "<builtin>.type"
    ],
    "functools._HashedSeq.__init__": [
        "<builtin>.hash"
    ],
    "<builtin>.hash": [],
    "fnmatch._compile_pattern": [
        "<builtin>.isinstance",
        "fnmatch.translate",
        "<builtin>.bytes",
        "<builtin>.str",
        "re.compile"
    ],
    "fnmatch.translate": [],
    "<builtin>.bytes": [],
    "pickle": [
        "pickle._Stop",
        "codecs",
        "pickle._Unframer",
        "io",
        "re",
        "re.match",
        "pickle.PickleError",
        "pickle._Pickler",
        "_pickle",
        "pickle.PicklingError",
        "types",
        "functools",
        "_compat_pickle",
        "<builtin>.dir",
        "pickle.UnpicklingError",
        "struct",
        "pickle._Unpickler",
        "copyreg",
        "pickle._Framer"
    ],
    "copyreg": [],
    "struct": [
        "_struct"
    ],
    "_struct": [],
    "_compat_pickle": [
        "<builtin>.len",
        "<map>.update",
        "<builtin>.dict",
        "<map>.items"
    ],
    "<map>.items": [],
    "<map>.update": [],
    "_pickle": [],
    "pickle.PickleError": [],
    "pickle.PicklingError": [],
    "pickle.UnpicklingError": [],
    "pickle._Stop": [],
    "re.match": [
        "re._compile"
    ],
    "pickle._Framer": [],
    "pickle._Unframer": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "pickle._Unpickler": [],
    "tracemalloc.Statistic": [],
    "tracemalloc.StatisticDiff": [],
    "tracemalloc.Frame": [
        "<builtin>.property"
    ],
    "tracemalloc.Traceback": [],
    "tracemalloc.Trace": [
        "<builtin>.property"
    ],
    "tracemalloc._Traces": [],
    "tracemalloc.BaseFilter": [],
    "tracemalloc.Filter": [
        "<builtin>.property"
    ],
    "tracemalloc.DomainFilter": [
        "<builtin>.property"
    ],
    "tracemalloc.Snapshot": [
        "<builtin>.staticmethod"
    ],
    "sre_parse.Tokenizer.getuntil": [
        "<builtin>.len",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.__next"
    ],
    "<str>.isidentifier": [],
    "sre_parse.State.checklookbehindgroup": [
        "sre_parse.State.checkgroup",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.State.checkgroup": [],
    "sre_parse.State.opengroup": [
        "<map>.get",
        "sre_constants.error.__init__"
    ],
    "sre_constants.error.__init__": [
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "<builtin>.super": [],
    "sre_parse.State.closegroup": [],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "<builtin>.OverflowError": [],
    "sre_parse._class_escape": [
        "<builtin>.chr",
        "<map>.get",
        "sre_parse.Tokenizer.match",
        "<builtin>.len",
        "<builtin>.int",
        "unicodedata",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.Tokenizer.getwhile",
        "<builtin>.ord"
    ],
    "sre_parse.Tokenizer.getwhile": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.range"
    ],
    "unicodedata": [],
    "<builtin>.ord": [],
    "sre_parse._uniq": [
        "<builtin>.list"
    ],
    "sre_parse._escape": [
        "<builtin>.chr",
        "<map>.get",
        "sre_parse.Tokenizer.match",
        "<builtin>.len",
        "<builtin>.int",
        "unicodedata",
        "sre_parse.State.checkgroup",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.Tokenizer.getwhile",
        "sre_parse.State.checklookbehindgroup",
        "<builtin>.ord",
        "sre_parse.Tokenizer.get"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "sre_parse.SubPattern.dump": [
        "<builtin>.isinstance",
        "<builtin>.print",
        "<builtin>.enumerate",
        "<builtin>.str"
    ],
    "sre_compile._code": [
        "sre_compile._compile",
        "sre_compile._compile_info"
    ],
    "sre_compile._compile_info": [
        "sre_parse.SubPattern.getwidth",
        "sre_compile._generate_overlap_table",
        "<builtin>.min",
        "sre_compile._get_charset_prefix",
        "<builtin>.len",
        "sre_compile._compile_charset",
        "sre_compile._get_literal_prefix",
        "sre_compile._optimize_charset"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.min",
        "<builtin>.max"
    ],
    "<builtin>.min": [],
    "<builtin>.max": [],
    "sre_compile._get_literal_prefix": [
        "<builtin>.len",
        "sre_compile._get_literal_prefix",
        "sre_compile._combine_flags",
        "sre_compile._get_iscased"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._combine_flags": [],
    "sre_compile._get_charset_prefix": [
        "sre_compile._combine_flags",
        "sre_compile._get_iscased",
        "<builtin>.map",
        "<builtin>.any",
        "<builtin>.range"
    ],
    "sre_compile._optimize_charset": [
        "sre_compile._bytes_to_codes",
        "<builtin>.len",
        "sre_compile._mk_bitmap",
        "<builtin>.map",
        "<builtin>.any",
        "<builtin>.bytes",
        "<builtin>.range",
        "<builtin>.bytearray"
    ],
    "<builtin>.bytearray": [],
    "sre_compile._mk_bitmap": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "sre_compile._bytes_to_codes": [
        "<builtin>.len",
        "<builtin>.memoryview"
    ],
    "<builtin>.memoryview": [],
    "sre_compile._compile_charset": [
        "sre_constants.error.__init__"
    ],
    "sre_compile._generate_overlap_table": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "sre_compile._compile": [
        "sre_compile._simple",
        "sre_compile._combine_flags",
        "sre_constants.error.__init__",
        "sre_compile._compile",
        "sre_compile._compile_charset",
        "sre_compile._optimize_charset"
    ],
    "sre_compile._simple": [
        "sre_compile._simple",
        "<builtin>.len"
    ],
    "sre_compile.dis": [
        "<builtin>.len",
        "sre_compile.dis.dis_",
        "<builtin>.set",
        "<builtin>.str"
    ],
    "sre_compile.dis.dis_": [
        "sre_compile.dis.dis_.print_2",
        "<builtin>.list",
        "<builtin>.chr",
        "sre_compile.dis.dis_.print_",
        "sre_compile.dis.dis_",
        "<builtin>.ValueError",
        "<builtin>.map",
        "sre_compile._hex_code",
        "<builtin>.str",
        "<builtin>.bin",
        "<builtin>.range"
    ],
    "<builtin>.bin": [],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "sre_compile._hex_code": [],
    "copyreg.pickle": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "copyreg.constructor"
    ],
    "copyreg.constructor": [
        "<builtin>.TypeError",
        "<builtin>.callable"
    ],
    "re.Scanner": [],
    "contextlib": [
        "contextlib.redirect_stderr",
        "contextlib.ContextDecorator",
        "collections.abc",
        "contextlib.redirect_stdout",
        "contextlib.AbstractAsyncContextManager",
        "contextlib.AsyncExitStack",
        "types",
        "contextlib.suppress",
        "functools",
        "contextlib._GeneratorContextManager",
        "contextlib.closing",
        "contextlib.ExitStack",
        "contextlib._BaseExitStack",
        "contextlib._GeneratorContextManagerBase",
        "abc",
        "contextlib.AbstractContextManager",
        "collections",
        "contextlib._AsyncGeneratorContextManager",
        "contextlib.nullcontext",
        "contextlib._RedirectStream"
    ],
    "contextlib.AbstractContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib.AbstractAsyncContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib.ContextDecorator": [],
    "contextlib._GeneratorContextManagerBase": [],
    "contextlib._GeneratorContextManager": [],
    "contextlib._AsyncGeneratorContextManager": [],
    "contextlib.closing": [],
    "contextlib._RedirectStream": [],
    "contextlib.redirect_stdout": [],
    "contextlib.redirect_stderr": [],
    "contextlib.suppress": [],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.ExitStack": [],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.nullcontext": [],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "functools.wraps": [],
    "sqlparse.tokens": [
        "sqlparse.tokens._TokenType"
    ],
    "sqlparse.tokens._TokenType": [],
    "sqlparse.sql": [
        "sqlparse.sql.Having",
        "sqlparse.sql.Operation",
        "sqlparse.sql.Identifier",
        "sqlparse.utils",
        "re",
        "sqlparse.sql.Token",
        "sqlparse.sql.Values",
        "sqlparse.sql.TokenList",
        "sqlparse.sql.Begin",
        "sqlparse.sql.IdentifierList",
        "sqlparse.sql.Case",
        "sqlparse.sql.Comparison",
        "sqlparse.sql.Command",
        "sqlparse.sql.For",
        "sqlparse.tokens",
        "sqlparse.sql.Parenthesis",
        "sqlparse.sql.NameAliasMixin",
        "sqlparse.sql.Comment",
        "sqlparse.sql.TypedLiteral",
        "sqlparse.sql.Where",
        "sqlparse.sql.SquareBrackets",
        "sqlparse.sql.Function",
        "sqlparse.sql.Statement",
        "sqlparse.sql.If",
        "sqlparse.sql.Assignment"
    ],
    "sqlparse.sql.NameAliasMixin": [],
    "sqlparse.sql.Token": [],
    "sqlparse.sql.TokenList": [
        "<builtin>.property"
    ],
    "sqlparse.sql.Statement": [],
    "sqlparse.sql.Identifier": [],
    "sqlparse.sql.IdentifierList": [],
    "sqlparse.sql.TypedLiteral": [],
    "sqlparse.sql.Parenthesis": [
        "<builtin>.property"
    ],
    "sqlparse.sql.SquareBrackets": [
        "<builtin>.property"
    ],
    "sqlparse.sql.Assignment": [],
    "sqlparse.sql.If": [],
    "sqlparse.sql.For": [],
    "sqlparse.sql.Comparison": [
        "<builtin>.property"
    ],
    "sqlparse.sql.Comment": [],
    "sqlparse.sql.Where": [],
    "sqlparse.sql.Having": [],
    "sqlparse.sql.Case": [],
    "sqlparse.sql.Function": [],
    "sqlparse.sql.Begin": [],
    "sqlparse.sql.Operation": [],
    "sqlparse.sql.Values": [],
    "sqlparse.sql.Command": [],
    "sqlparse.keywords": [
        "sqlparse.tokens",
        "re",
        "re.compile"
    ],
    "sqlparse.lexer": [
        "sqlparse.tokens",
        "sqlparse.utils",
        "sqlparse.keywords",
        "io",
        "sqlparse.lexer.Lexer"
    ],
    "sqlparse.lexer.Lexer": [
        "<builtin>.staticmethod"
    ],
    "sqlparse.formatter": [
        "sqlparse.filters",
        "sqlparse.exceptions"
    ],
    "sqlparse.filters": [
        "sqlparse.filters.right_margin",
        "sqlparse.filters.output",
        "sqlparse.filters.others",
        "sqlparse.filters.reindent",
        "sqlparse.filters.tokens",
        "sqlparse.filters.aligned_indent"
    ],
    "sqlparse.filters.others": [
        "sqlparse.tokens",
        "sqlparse.utils",
        "sqlparse.sql",
        "re",
        "sqlparse.filters.others.SerializerUnicode",
        "sqlparse.filters.others.StripWhitespaceFilter",
        "sqlparse.filters.others.StripCommentsFilter",
        "sqlparse.filters.others.SpacesAroundOperatorsFilter"
    ],
    "sqlparse.filters.others.StripCommentsFilter": [
        "<builtin>.staticmethod"
    ],
    "sqlparse.filters.others.StripWhitespaceFilter": [
        "<builtin>.staticmethod"
    ],
    "sqlparse.filters.others.SpacesAroundOperatorsFilter": [
        "<builtin>.staticmethod"
    ],
    "sqlparse.filters.others.SerializerUnicode": [
        "<builtin>.staticmethod"
    ],
    "sqlparse.filters.output": [
        "sqlparse.tokens",
        "sqlparse.sql",
        "sqlparse.filters.output.OutputFilter",
        "sqlparse.filters.output.OutputPythonFilter",
        "sqlparse.filters.output.OutputPHPFilter"
    ],
    "sqlparse.filters.output.OutputFilter": [],
    "sqlparse.filters.output.OutputPythonFilter": [],
    "sqlparse.filters.output.OutputPHPFilter": [],
    "sqlparse.filters.tokens": [
        "sqlparse.tokens",
        "sqlparse.filters.tokens._CaseFilter",
        "sqlparse.filters.tokens.IdentifierCaseFilter",
        "sqlparse.filters.tokens.KeywordCaseFilter",
        "sqlparse.filters.tokens.TruncateStringFilter"
    ],
    "sqlparse.filters.tokens._CaseFilter": [],
    "sqlparse.filters.tokens.KeywordCaseFilter": [],
    "sqlparse.filters.tokens.IdentifierCaseFilter": [],
    "sqlparse.filters.tokens.TruncateStringFilter": [],
    "sqlparse.filters.reindent": [
        "sqlparse.tokens",
        "sqlparse.utils",
        "sqlparse.sql",
        "sqlparse.filters.reindent.ReindentFilter"
    ],
    "sqlparse.filters.reindent.ReindentFilter": [
        "<builtin>.property"
    ],
    "sqlparse.filters.right_margin": [
        "sqlparse.tokens",
        "sqlparse.filters.right_margin.RightMarginFilter",
        "sqlparse.sql",
        "re"
    ],
    "sqlparse.filters.right_margin.RightMarginFilter": [],
    "sqlparse.filters.aligned_indent": [
        "sqlparse.tokens",
        "sqlparse.utils",
        "sqlparse.sql",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter": [],
    "sqlparse.exceptions": [
        "sqlparse.exceptions.SQLParseError"
    ],
    "sqlparse.exceptions.SQLParseError": [],
    "sqlparse.cli": [
        "io",
        "sqlparse",
        "argparse",
        "sqlparse.exceptions"
    ],
    "argparse": [
        "argparse.ArgumentTypeError",
        "argparse.FileType",
        "argparse.RawTextHelpFormatter",
        "os",
        "argparse._ExtendAction",
        "argparse._StoreAction",
        "re",
        "argparse.ArgumentDefaultsHelpFormatter",
        "argparse._StoreConstAction",
        "shutil",
        "argparse._AttributeHolder",
        "argparse._HelpAction",
        "argparse._AppendAction",
        "argparse._MutuallyExclusiveGroup",
        "gettext",
        "argparse.ArgumentError",
        "argparse.ArgumentParser",
        "argparse._ArgumentGroup",
        "argparse.MetavarTypeHelpFormatter",
        "argparse._ActionsContainer",
        "argparse.RawDescriptionHelpFormatter",
        "argparse._VersionAction",
        "argparse.Action",
        "argparse._AppendConstAction",
        "argparse.Namespace",
        "argparse.HelpFormatter",
        "argparse._StoreFalseAction",
        "argparse._SubParsersAction",
        "argparse._CountAction",
        "argparse._StoreTrueAction"
    ],
    "shutil": [
        "stat",
        "shutil.SpecialFileError",
        "shutil.ExecError",
        "shutil._GiveupOnFastCopy",
        "bz2",
        "collections",
        "grp",
        "shutil.RegistryError",
        "fnmatch",
        "<builtin>.hasattr",
        "os",
        "lzma",
        "shutil.SameFileError",
        "collections.namedtuple",
        "shutil.ReadError",
        "shutil.Error",
        "zlib"
    ],
    "zlib": [],
    "bz2": [
        "threading",
        "bz2.BZ2File",
        "<builtin>.object",
        "_bz2",
        "os",
        "io",
        "warnings",
        "_compression"
    ],
    "_compression": [
        "io",
        "_compression.DecompressReader",
        "_compression.BaseStream"
    ],
    "_compression.BaseStream": [],
    "_compression.DecompressReader": [],
    "threading": [
        "threading._RLock",
        "_weakrefset",
        "threading.Semaphore",
        "threading.Thread",
        "os",
        "collections.namedtuple",
        "_threading_local",
        "traceback",
        "threading._MainThread.__init__",
        "threading._MainThread",
        "itertools.count",
        "threading.Event",
        "threading.BrokenBarrierError",
        "threading.Timer",
        "<builtin>.hasattr",
        "threading.Condition",
        "<builtin>.set",
        "threading.Barrier",
        "collections",
        "threading.BoundedSemaphore",
        "_weakrefset.WeakSet.__init__",
        "threading._DummyThread"
    ],
    "threading._RLock": [],
    "threading.Condition": [],
    "threading.Semaphore": [],
    "threading.BoundedSemaphore": [],
    "threading.Event": [],
    "threading.Barrier": [
        "<builtin>.property"
    ],
    "threading.BrokenBarrierError": [],
    "itertools.count": [],
    "_weakrefset.WeakSet.__init__": [
        "_weakrefset.WeakSet.update",
        "<builtin>.set",
        "_weakref.ref"
    ],
    "_weakref.ref": [],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakrefset.WeakSet.add"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakref.ref"
    ],
    "threading.Thread": [
        "<builtin>.property"
    ],
    "traceback": [
        "traceback.StackSummary",
        "collections",
        "traceback.TracebackException",
        "traceback.FrameSummary",
        "linecache"
    ],
    "traceback.FrameSummary": [
        "<builtin>.property"
    ],
    "traceback.StackSummary": [
        "<builtin>.classmethod"
    ],
    "traceback.TracebackException": [
        "<builtin>.classmethod"
    ],
    "threading.Timer": [],
    "threading._MainThread": [],
    "threading._DummyThread": [],
    "threading._MainThread.__init__": [
        "threading.Thread.__init__",
        "threading.Thread._set_native_id",
        "threading.Event.set",
        "threading.Thread._set_ident",
        "threading.Thread._set_tstate_lock"
    ],
    "threading.Thread.__init__": [
        "threading.current_thread",
        "threading.Event.__init__",
        "_weakrefset.WeakSet.add",
        "threading._make_invoke_excepthook",
        "threading._newname",
        "<builtin>.str"
    ],
    "threading._newname": [],
    "threading.current_thread": [
        "_thread.get_ident",
        "threading._DummyThread.__init__"
    ],
    "_thread.get_ident": [],
    "threading._DummyThread.__init__": [
        "threading.Thread._set_ident",
        "threading.Thread._set_native_id",
        "threading._newname",
        "threading.Thread.__init__"
    ],
    "threading.Thread._set_ident": [
        "_thread.get_ident"
    ],
    "threading.Thread._set_native_id": [],
    "threading.Event.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Condition.__init__": [
        "threading.RLock",
        "_collections.deque"
    ],
    "threading.RLock": [
        "threading._RLock.__init__",
        "_thread.RLock"
    ],
    "threading._RLock.__init__": [],
    "_collections.deque": [],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "threading.Thread._set_tstate_lock": [],
    "threading.Event.set": [],
    "_threading_local": [
        "threading",
        "contextlib.contextmanager",
        "contextlib",
        "_threading_local._localimpl",
        "weakref",
        "_threading_local.local"
    ],
    "weakref": [
        "_weakrefset",
        "weakref.WeakMethod",
        "weakref.WeakKeyDictionary",
        "collections.abc",
        "weakref.KeyedRef",
        "weakref.finalize",
        "weakref.WeakValueDictionary"
    ],
    "weakref.WeakMethod": [],
    "weakref.WeakValueDictionary": [],
    "weakref.KeyedRef": [],
    "weakref.WeakKeyDictionary": [],
    "weakref.finalize": [
        "<builtin>.property",
        "weakref.finalize._Info",
        "<builtin>.classmethod"
    ],
    "weakref.finalize._Info": [],
    "_threading_local._localimpl": [],
    "_threading_local.local": [],
    "_bz2": [],
    "bz2.BZ2File": [
        "<builtin>.property"
    ],
    "lzma": [
        "lzma.LZMAFile",
        "os",
        "io",
        "_compression",
        "_lzma"
    ],
    "_lzma": [],
    "lzma.LZMAFile": [
        "<builtin>.property"
    ],
    "grp": [],
    "shutil.Error": [],
    "shutil.SameFileError": [],
    "shutil.SpecialFileError": [],
    "shutil.ExecError": [],
    "shutil.ReadError": [],
    "shutil.RegistryError": [],
    "shutil._GiveupOnFastCopy": [],
    "gettext": [
        "posixpath.join",
        "locale",
        "re",
        "ntpath.join",
        "gettext.GNUTranslations",
        "os",
        "<builtin>.enumerate",
        "gettext.NullTranslations",
        "re.compile"
    ],
    "locale": [
        "encodings.aliases",
        "re",
        "<map>.items",
        "functools.wraps",
        "collections.abc",
        "<map>.setdefault",
        "<builtin>.hasattr",
        "functools",
        "<builtin>.globals",
        "<builtin>.sorted",
        "encodings",
        "re.compile"
    ],
    "encodings.aliases": [],
    "<map>.setdefault": [],
    "gettext.NullTranslations": [],
    "gettext.GNUTranslations": [],
    "argparse._AttributeHolder": [],
    "argparse.HelpFormatter": [
        "argparse.HelpFormatter._Section"
    ],
    "argparse.HelpFormatter._Section": [],
    "argparse.RawDescriptionHelpFormatter": [],
    "argparse.RawTextHelpFormatter": [],
    "argparse.ArgumentDefaultsHelpFormatter": [],
    "argparse.MetavarTypeHelpFormatter": [],
    "argparse.ArgumentError": [],
    "argparse.ArgumentTypeError": [],
    "argparse.Action": [],
    "argparse._StoreAction": [],
    "argparse._StoreConstAction": [],
    "argparse._StoreTrueAction": [],
    "argparse._StoreFalseAction": [],
    "argparse._AppendAction": [],
    "argparse._AppendConstAction": [],
    "argparse._CountAction": [],
    "argparse._HelpAction": [],
    "argparse._VersionAction": [],
    "argparse._SubParsersAction": [
        "argparse._SubParsersAction._ChoicesPseudoAction"
    ],
    "argparse._SubParsersAction._ChoicesPseudoAction": [],
    "argparse._ExtendAction": [],
    "argparse.FileType": [],
    "argparse.Namespace": [],
    "argparse._ActionsContainer": [],
    "argparse._ArgumentGroup": [],
    "argparse._MutuallyExclusiveGroup": [],
    "argparse.ArgumentParser": [],
    "sqlparse": [
        "sqlparse.tokens",
        "sqlparse.cli",
        "sqlparse.sql",
        "sqlparse.formatter",
        "sqlparse.filters",
        "sqlparse.engine"
    ],
    "sqlparse.engine": [
        "sqlparse.engine.filter_stack",
        "sqlparse.engine.grouping",
        "sqlparse.engine.statement_splitter"
    ],
    "sqlparse.engine.grouping": [
        "sqlparse.tokens",
        "sqlparse.utils",
        "sqlparse.sql",
        "sqlparse.utils.recurse.wrap",
        "sqlparse.utils.recurse"
    ],
    "sqlparse.utils.recurse": [],
    "sqlparse.utils.recurse.wrap": [],
    "sqlparse.engine.filter_stack": [
        "sqlparse.engine.grouping",
        "sqlparse.lexer",
        "sqlparse.engine.statement_splitter",
        "sqlparse.engine.filter_stack.FilterStack"
    ],
    "sqlparse.engine.statement_splitter": [
        "sqlparse.tokens",
        "sqlparse.sql",
        "sqlparse.engine.statement_splitter.StatementSplitter"
    ],
    "sqlparse.engine.statement_splitter.StatementSplitter": [],
    "sqlparse.engine.filter_stack.FilterStack": [],
    "sqlparse.__main__": [
        "sqlparse.cli",
        "sqlparse.cli.main"
    ],
    "sqlparse.cli.main": [
        "argparse.ArgumentParser.parse_args",
        "<builtin>.open",
        "sqlparse.formatter.validate_options",
        "sqlparse.format",
        "<builtin>.vars",
        "_io.TextIOWrapper",
        "sqlparse.cli.create_parser",
        "sqlparse.cli._error"
    ],
    "sqlparse.cli.create_parser": [
        "argparse._ActionsContainer.add_argument",
        "argparse._ActionsContainer.add_argument_group",
        "argparse.ArgumentParser.__init__"
    ],
    "argparse.ArgumentParser.__init__": [
        "argparse._ActionsContainer.add_argument",
        "posixpath.basename",
        "argparse._ActionsContainer.register",
        "argparse._ActionsContainer.add_argument_group",
        "<builtin>.super",
        "argparse._ActionsContainer._add_container_actions",
        "ntpath.basename",
        "gettext.gettext"
    ],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "ntpath.split": [
        "os._fspath",
        "<builtin>.len",
        "ntpath.splitdrive",
        "ntpath._get_bothseps"
    ],
    "posixpath.basename": [
        "os._fspath",
        "<str>.rfind",
        "posixpath._get_sep"
    ],
    "<str>.rfind": [],
    "gettext.gettext": [
        "gettext.dgettext"
    ],
    "gettext.dgettext": [
        "gettext.NullTranslations.gettext",
        "gettext.translation",
        "<map>.get"
    ],
    "gettext.translation": [
        "warnings.catch_warnings.__init__",
        "<map>.get",
        "warnings.warn",
        "<builtin>.open",
        "copy.copy",
        "<builtin>.FileNotFoundError",
        "gettext.NullTranslations.__init__",
        "copy",
        "<map>.setdefault",
        "posixpath.abspath",
        "ntpath.abspath",
        "warnings",
        "gettext.find"
    ],
    "gettext.find": [
        "posixpath.join",
        "ntpath.join",
        "genericpath.exists",
        "gettext._expand_lang"
    ],
    "gettext._expand_lang": [
        "locale.normalize",
        "<builtin>.range"
    ],
    "locale.normalize": [
        "<map>.get",
        "locale._append_modifier",
        "locale._replace_encoding",
        "<str>.replace"
    ],
    "locale._append_modifier": [
        "locale._replace_encoding"
    ],
    "locale._replace_encoding": [
        "<str>.replace",
        "<str>.lower",
        "<map>.get",
        "encodings.normalize_encoding"
    ],
    "encodings.normalize_encoding": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "<str>.lower": [],
    "genericpath.exists": [],
    "gettext.NullTranslations.__init__": [
        "gettext.NullTranslations._parse"
    ],
    "gettext.NullTranslations._parse": [],
    "<builtin>.FileNotFoundError": [],
    "ntpath.abspath": [],
    "posixpath.abspath": [
        "<builtin>.isinstance",
        "posixpath.join",
        "posixpath.normpath",
        "posixpath.isabs",
        "os._fspath"
    ],
    "posixpath.normpath": [
        "os._fspath",
        "<builtin>.isinstance",
        "<str>.startswith",
        "<str>.split"
    ],
    "<builtin>.open": [],
    "copy": [
        "<builtin>.type",
        "types",
        "<builtin>.getattr",
        "copy.Error",
        "copyreg",
        "weakref"
    ],
    "copy.Error": [],
    "copy.copy": [
        "<builtin>.isinstance",
        "<map>.get",
        "<builtin>.type",
        "<map>",
        "copy._reconstruct",
        "<builtin>.issubclass",
        "<builtin>.getattr",
        "copy._copy_immutable"
    ],
    "<map>": [],
    "copy._copy_immutable": [],
    "copy._reconstruct": [
        "<builtin>.isinstance",
        "<builtin>.id",
        "<builtin>.len",
        "<builtin>.setattr",
        "copy.deepcopy",
        "<builtin>.hasattr"
    ],
    "copy.deepcopy": [
        "<builtin>.isinstance",
        "<map>.get",
        "<builtin>.type",
        "<map>",
        "<builtin>.id",
        "copy._reconstruct",
        "<builtin>.getattr",
        "<builtin>.issubclass",
        "copy._deepcopy_atomic",
        "copy._keep_alive"
    ],
    "<builtin>.id": [],
    "copy._deepcopy_atomic": [],
    "copy._keep_alive": [
        "<builtin>.id"
    ],
    "<builtin>.setattr": [],
    "warnings.catch_warnings.__init__": [],
    "gettext.NullTranslations.gettext": [],
    "argparse._ActionsContainer.add_argument_group": [
        "argparse._ArgumentGroup.__init__"
    ],
    "argparse._ArgumentGroup.__init__": [
        "<builtin>.super"
    ],
    "argparse._ActionsContainer.register": [],
    "argparse._ActionsContainer.add_argument": [
        "argparse._ActionsContainer._get_optional_kwargs",
        "argparse._ActionsContainer._get_positional_kwargs",
        "argparse._ActionsContainer._pop_action_class",
        "argparse._ActionsContainer._registry_get",
        "argparse._ActionsContainer._add_action",
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.hasattr",
        "argparse.ArgumentParser._get_formatter",
        "argparse.ArgumentParser._add_action",
        "<builtin>.callable"
    ],
    "argparse._ActionsContainer._get_optional_kwargs": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.dict",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._get_positional_kwargs": [
        "<builtin>.TypeError",
        "<builtin>.dict",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._pop_action_class": [
        "argparse._ActionsContainer._registry_get"
    ],
    "argparse._ActionsContainer._registry_get": [],
    "argparse.ArgumentParser._get_formatter": [],
    "argparse.ArgumentParser._add_action": [],
    "argparse._ActionsContainer._add_action": [
        "argparse._ActionsContainer._check_conflict"
    ],
    "argparse._ActionsContainer._check_conflict": [
        "argparse._ActionsContainer._get_handler"
    ],
    "argparse._ActionsContainer._get_handler": [
        "<builtin>.ValueError",
        "<builtin>.getattr",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._add_container_actions": [
        "<map>.get",
        "argparse._ActionsContainer.add_argument_group",
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "<builtin>.ValueError",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer.add_mutually_exclusive_group": [
        "argparse._MutuallyExclusiveGroup.__init__"
    ],
    "argparse._MutuallyExclusiveGroup.__init__": [
        "<builtin>.super"
    ],
    "argparse.ArgumentParser.parse_args": [
        "argparse.ArgumentParser.parse_known_args",
        "gettext.gettext",
        "argparse.ArgumentParser.error"
    ],
    "argparse.ArgumentParser.parse_known_args": [
        "<builtin>.list",
        "<builtin>.delattr",
        "<builtin>.setattr",
        "argparse.Namespace.__init__",
        "<builtin>.getattr",
        "argparse.ArgumentParser._parse_known_args",
        "argparse.ArgumentParser.error",
        "<builtin>.hasattr",
        "<builtin>.str"
    ],
    "argparse.Namespace.__init__": [
        "<builtin>.setattr"
    ],
    "argparse.ArgumentParser._parse_known_args": [
        "argparse.ArgumentParser._parse_known_args.consume_positionals",
        "<builtin>.max",
        "<builtin>.getattr",
        "argparse.ArgumentParser._parse_known_args.consume_optional",
        "gettext.gettext",
        "<map>.setdefault",
        "argparse.ArgumentParser._read_args_from_files",
        "<builtin>.isinstance",
        "<builtin>.min",
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "<builtin>.enumerate",
        "argparse.ArgumentParser._get_positional_actions",
        "<builtin>.set",
        "argparse.ArgumentParser._get_value",
        "<builtin>.iter",
        "argparse.ArgumentParser.error",
        "argparse._get_action_name",
        "argparse.ArgumentParser._parse_optional"
    ],
    "argparse.ArgumentParser._read_args_from_files": [
        "argparse.ArgumentParser.convert_arg_line_to_args",
        "<builtin>.open",
        "argparse.ArgumentParser.error",
        "<builtin>.str",
        "argparse.ArgumentParser._read_args_from_files"
    ],
    "argparse.ArgumentParser.convert_arg_line_to_args": [],
    "argparse.ArgumentParser.error": [
        "argparse.ArgumentParser.exit",
        "gettext.gettext",
        "argparse.ArgumentParser.print_usage"
    ],
    "argparse.ArgumentParser.print_usage": [
        "argparse.ArgumentParser.format_usage",
        "argparse.ArgumentParser._print_message"
    ],
    "argparse.ArgumentParser.format_usage": [
        "argparse.ArgumentParser._get_formatter"
    ],
    "argparse.ArgumentParser._print_message": [],
    "argparse.ArgumentParser.exit": [
        "argparse.ArgumentParser._print_message"
    ],
    "<builtin>.iter": [],
    "argparse.ArgumentParser._parse_optional": [
        "<builtin>.len",
        "argparse.ArgumentParser._get_option_tuples",
        "gettext.gettext",
        "argparse.ArgumentParser.error"
    ],
    "argparse.ArgumentParser._get_option_tuples": [
        "gettext.gettext",
        "argparse.ArgumentParser.error"
    ],
    "argparse.ArgumentParser._get_positional_actions": [],
    "argparse.ArgumentParser._parse_known_args.consume_positionals": [
        "<builtin>.zip",
        "<builtin>.len",
        "argparse.ArgumentParser._parse_known_args.take_action",
        "argparse.ArgumentParser._match_arguments_partial"
    ],
    "argparse.ArgumentParser._match_arguments_partial": [
        "<builtin>.len",
        "re.match",
        "<builtin>.range",
        "argparse.ArgumentParser._get_nargs_pattern"
    ],
    "argparse.ArgumentParser._get_nargs_pattern": [
        "<str>.replace"
    ],
    "argparse.ArgumentParser._parse_known_args.take_action": [
        "argparse.ArgumentError.__init__",
        "<map>.get",
        "argparse.ArgumentParser._get_values",
        "argparse._get_action_name",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._get_values": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "argparse.ArgumentParser._check_value",
        "argparse.ArgumentParser._get_value"
    ],
    "argparse.ArgumentParser._get_value": [
        "argparse.ArgumentError.__init__",
        "argparse._ActionsContainer._registry_get",
        "<builtin>.getattr",
        "<builtin>.repr",
        "<builtin>.str",
        "<builtin>.callable",
        "gettext.gettext"
    ],
    "argparse.ArgumentError.__init__": [
        "argparse._get_action_name"
    ],
    "argparse._get_action_name": [],
    "argparse.ArgumentParser._check_value": [
        "argparse.ArgumentError.__init__",
        "gettext.gettext",
        "<builtin>.map"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_optional": [
        "argparse.ArgumentParser._parse_known_args.take_action",
        "argparse.ArgumentError.__init__",
        "argparse.ArgumentParser._match_argument",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._match_argument": [
        "<map>.get",
        "re.match",
        "argparse.ArgumentError.__init__",
        "gettext.ngettext",
        "argparse.ArgumentParser._get_nargs_pattern",
        "<builtin>.len",
        "gettext.gettext"
    ],
    "gettext.ngettext": [
        "gettext.dngettext"
    ],
    "gettext.dngettext": [
        "gettext.translation",
        "<map>.get",
        "gettext.NullTranslations.ngettext"
    ],
    "gettext.NullTranslations.ngettext": [],
    "<builtin>.next": [],
    "<builtin>.delattr": [],
    "sqlparse.cli._error": [],
    "<builtin>.vars": [],
    "sqlparse.formatter.validate_options": [
        "<builtin>.int"
    ],
    "sqlparse.format": [
        "sqlparse.engine.filter_stack.FilterStack.__init__",
        "sqlparse.formatter.build_filter_stack",
        "sqlparse.engine.filter_stack.FilterStack.run",
        "sqlparse.formatter.validate_options"
    ],
    "sqlparse.engine.filter_stack.FilterStack.__init__": [],
    "sqlparse.formatter.build_filter_stack": [
        "sqlparse.filters.reindent.ReindentFilter.__init__",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter.__init__",
        "sqlparse.engine.filter_stack.FilterStack.enable_grouping",
        "sqlparse.filters.tokens.TruncateStringFilter.__init__",
        "sqlparse.filters.right_margin.RightMarginFilter.__init__"
    ],
    "sqlparse.filters.tokens.TruncateStringFilter.__init__": [],
    "sqlparse.engine.filter_stack.FilterStack.enable_grouping": [],
    "sqlparse.filters.reindent.ReindentFilter.__init__": [],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter.__init__": [
        "<builtin>.len"
    ],
    "sqlparse.filters.right_margin.RightMarginFilter.__init__": [],
    "sqlparse.engine.filter_stack.FilterStack.run": [
        "sqlparse.engine.statement_splitter.StatementSplitter.process",
        "sqlparse.engine.grouping.group",
        "sqlparse.lexer.tokenize",
        "sqlparse.engine.statement_splitter.StatementSplitter.__init__"
    ],
    "sqlparse.lexer.tokenize": [
        "sqlparse.lexer.Lexer.get_tokens"
    ],
    "sqlparse.lexer.Lexer.get_tokens": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.enumerate",
        "sqlparse.utils.consume",
        "<builtin>.callable"
    ],
    "sqlparse.utils.consume": [
        "_collections.deque"
    ],
    "sqlparse.engine.statement_splitter.StatementSplitter.__init__": [
        "sqlparse.engine.statement_splitter.StatementSplitter._reset"
    ],
    "sqlparse.engine.statement_splitter.StatementSplitter._reset": [],
    "sqlparse.engine.statement_splitter.StatementSplitter.process": [
        "<builtin>.all",
        "sqlparse.sql.Token.__init__",
        "sqlparse.engine.statement_splitter.StatementSplitter._reset",
        "sqlparse.engine.statement_splitter.StatementSplitter._change_splitlevel"
    ],
    "sqlparse.engine.statement_splitter.StatementSplitter._change_splitlevel": [
        "<builtin>.max"
    ],
    "sqlparse.sql.Token.__init__": [
        "<str>.upper",
        "<builtin>.str"
    ],
    "<builtin>.all": [],
    "sqlparse.engine.grouping.group": [],
    "sqlparse.filters.output.OutputFilter.process": [
        "<builtin>.len",
        "sqlparse.filters.output.OutputFilter._process",
        "<builtin>.str"
    ],
    "sqlparse.filters.output.OutputFilter._process": [],
    "sqlparse.filters.output.OutputPythonFilter._process": [
        "<builtin>.len",
        "sqlparse.sql.Token.__init__"
    ],
    "<str>.upper": [],
    "sqlparse.filters.output.OutputPHPFilter._process": [
        "sqlparse.sql.Token.__init__"
    ],
    "sqlparse.filters.right_margin.RightMarginFilter._process": [
        "<builtin>.type",
        "<builtin>.len",
        "sqlparse.filters.right_margin.RightMarginFilter._process",
        "<builtin>.str",
        "sqlparse.sql.Token.__init__",
        "re.search"
    ],
    "re.search": [
        "re._compile"
    ],
    "sqlparse.utils.split_unquoted_newlines": [
        "<builtin>.str"
    ],
    "sqlparse.utils.imt": [
        "<builtin>.isinstance",
        "<builtin>.any"
    ],
    "sqlparse.utils.recurse.wrap.wrapped_f": [
        "<builtin>.isinstance",
        "sqlparse.utils.recurse.wrap.wrapped_f",
        "sqlparse.engine.grouping.group_aliased",
        "sqlparse.engine.grouping.group_comments",
        "sqlparse.engine.grouping.group_functions",
        "sqlparse.engine.grouping.align_comments",
        "sqlparse.engine.grouping.group_identifier",
        "sqlparse.engine.grouping.group_where"
    ],
    "sqlparse.engine.grouping.group_comments": [],
    "sqlparse.engine.grouping.group_aliased": [
        "<builtin>.isinstance"
    ],
    "sqlparse.engine.grouping.group_functions": [
        "<builtin>.isinstance"
    ],
    "sqlparse.engine.grouping.align_comments": [
        "<builtin>.isinstance"
    ],
    "sqlparse.engine.grouping.group_identifier": [],
    "sqlparse.engine.grouping.group_where": [],
    "sqlparse.filters.others.StripCommentsFilter._process": [
        "sqlparse.filters.others.StripCommentsFilter._process.get_next_comment",
        "sqlparse.filters.others.StripCommentsFilter._process._get_insert_token"
    ],
    "sqlparse.filters.others.StripCommentsFilter._process.get_next_comment": [],
    "sqlparse.filters.others.StripCommentsFilter._process._get_insert_token": [
        "sqlparse.sql.Token.__init__",
        "re.search"
    ],
    "sqlparse.filters.others.StripCommentsFilter.process": [
        "sqlparse.filters.others.StripCommentsFilter.process",
        "sqlparse.filters.others.StripCommentsFilter._process"
    ],
    "sqlparse.filters.others.StripWhitespaceFilter._stripws": [
        "<str>.lower",
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "sqlparse.filters.others.StripWhitespaceFilter._stripws_identifierlist": [
        "<builtin>.list",
        "sqlparse.filters.others.StripWhitespaceFilter._stripws_default"
    ],
    "sqlparse.filters.others.StripWhitespaceFilter._stripws_default": [],
    "sqlparse.filters.others.StripWhitespaceFilter._stripws_parenthesis": [
        "sqlparse.filters.others.StripWhitespaceFilter._stripws_default"
    ],
    "sqlparse.filters.others.StripWhitespaceFilter.process": [
        "sqlparse.filters.others.StripWhitespaceFilter._stripws",
        "sqlparse.filters.others.StripWhitespaceFilter.process"
    ],
    "sqlparse.filters.others.SpacesAroundOperatorsFilter._process": [
        "sqlparse.sql.Token.__init__"
    ],
    "sqlparse.filters.others.SpacesAroundOperatorsFilter.process": [
        "sqlparse.filters.others.SpacesAroundOperatorsFilter._process",
        "sqlparse.filters.others.SpacesAroundOperatorsFilter.process"
    ],
    "sqlparse.filters.others.SerializerUnicode.process": [
        "sqlparse.utils.split_unquoted_newlines"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter.nl": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "sqlparse.sql.Token.__init__"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_statement": [
        "<builtin>.len",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process",
        "sqlparse.sql.TokenList.__init__"
    ],
    "sqlparse.sql.TokenList.__init__": [
        "<builtin>.setattr",
        "<builtin>.super",
        "<builtin>.str"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process": [
        "<str>.lower",
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_parenthesis": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter.nl"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_identifierlist": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter.nl",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_default",
        "<builtin>.list"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_default": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._split_kwds"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._split_kwds": [
        "<builtin>.str",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter.nl",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._next_token"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._next_token": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._next_token"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_case": [
        "<builtin>.max",
        "<builtin>.len",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter.nl",
        "<builtin>.map",
        "<builtin>.enumerate",
        "<builtin>.str",
        "sqlparse.sql.Token.__init__"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter.process": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process"
    ],
    "sqlparse.sql.NameAliasMixin.get_alias": [
        "<builtin>.len"
    ],
    "sqlparse.sql.Token.__repr__": [
        "sqlparse.sql.Token._get_repr_value",
        "sqlparse.sql.Token._get_repr_name",
        "<builtin>.id",
        "<str>.startswith",
        "<str>.endswith",
        "<builtin>.locals"
    ],
    "sqlparse.sql.Token._get_repr_name": [
        "<builtin>.str"
    ],
    "sqlparse.sql.Token._get_repr_value": [
        "<builtin>.len",
        "re.sub",
        "<builtin>.str"
    ],
    "re.sub": [
        "re._compile"
    ],
    "<builtin>.locals": [],
    "sqlparse.sql.Token.match": [
        "<builtin>.isinstance",
        "re.compile"
    ],
    "sqlparse.sql.Token.within": [
        "<builtin>.isinstance"
    ],
    "sqlparse.sql.TokenList.__str__": [
        "sqlparse.sql.TokenList.flatten"
    ],
    "sqlparse.sql.TokenList.flatten": [],
    "sqlparse.sql.TokenList.__iter__": [
        "<builtin>.iter"
    ],
    "sqlparse.sql.TokenList._get_repr_name": [
        "<builtin>.type"
    ],
    "sqlparse.sql.TokenList._pprint_tree": [
        "<builtin>.len",
        "<builtin>.print",
        "<builtin>.enumerate",
        "<builtin>.locals"
    ],
    "sqlparse.sql.TokenList.get_token_at_offset": [
        "<builtin>.len",
        "sqlparse.sql.TokenList.flatten"
    ],
    "sqlparse.sql.TokenList._token_matching": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "sqlparse.sql.TokenList.token_first": [
        "sqlparse.sql.TokenList._token_matching"
    ],
    "sqlparse.sql.TokenList.token_next_by": [
        "sqlparse.sql.TokenList._token_matching"
    ],
    "sqlparse.sql.TokenList.token_not_matching": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList._token_matching"
    ],
    "sqlparse.sql.TokenList.token_matching": [
        "sqlparse.sql.TokenList._token_matching"
    ],
    "sqlparse.sql.TokenList.token_prev": [
        "sqlparse.sql.TokenList.token_next"
    ],
    "sqlparse.sql.TokenList.token_next": [
        "sqlparse.sql.TokenList._token_matching"
    ],
    "sqlparse.sql.TokenList.token_index": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_index"
    ],
    "sqlparse.sql.TokenList.group_tokens": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "sqlparse.sql.TokenList.insert_before": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_index"
    ],
    "sqlparse.sql.TokenList.insert_after": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_index",
        "sqlparse.sql.TokenList.token_next"
    ],
    "sqlparse.sql.TokenList.has_alias": [
        "sqlparse.sql.TokenList.get_alias"
    ],
    "sqlparse.sql.TokenList.get_alias": [],
    "sqlparse.sql.TokenList.get_name": [
        "sqlparse.sql.TokenList.get_real_name",
        "sqlparse.sql.TokenList.get_alias"
    ],
    "sqlparse.sql.TokenList.get_real_name": [],
    "sqlparse.sql.TokenList.get_parent_name": [
        "sqlparse.sql.TokenList.token_next_by",
        "sqlparse.sql.TokenList.token_prev",
        "sqlparse.utils.remove_quotes"
    ],
    "sqlparse.utils.remove_quotes": [],
    "sqlparse.sql.TokenList._get_first_name": [
        "<builtin>.isinstance",
        "<builtin>.reversed",
        "sqlparse.utils.remove_quotes"
    ],
    "sqlparse.sql.Statement.get_type": [
        "sqlparse.sql.TokenList.token_index",
        "sqlparse.sql.TokenList.token_first",
        "sqlparse.sql.TokenList.token_next",
        "<builtin>.isinstance"
    ],
    "sqlparse.sql.Identifier.is_wildcard": [
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.sql.Identifier.get_typecast": [
        "sqlparse.sql.TokenList.token_next_by",
        "sqlparse.sql.TokenList.token_next"
    ],
    "sqlparse.sql.Identifier.get_ordering": [
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.sql.Identifier.get_array_indices": [
        "<builtin>.isinstance"
    ],
    "sqlparse.sql.Function.get_parameters": [
        "<builtin>.isinstance",
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping._group_matching": [
        "<builtin>.isinstance",
        "sqlparse.engine.grouping._group_matching",
        "<builtin>.enumerate",
        "<builtin>.list"
    ],
    "sqlparse.engine.grouping.group_brackets": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_parenthesis": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_case": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_if": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_for": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_begin": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_typecasts": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping._group": [
        "sqlparse.engine.grouping.group_typecasts.post",
        "<builtin>.list",
        "sqlparse.engine.grouping.group_typed_literal.valid_final",
        "sqlparse.engine.grouping.group_operator.valid",
        "sqlparse.engine.grouping.group_as.post",
        "sqlparse.engine.grouping.group_tzcasts.valid_prev",
        "sqlparse.engine.grouping.group_period.match",
        "sqlparse.engine.grouping.group_typecasts.valid",
        "sqlparse.engine.grouping.group_typed_literal.match_to_extend",
        "sqlparse.engine.grouping.group_assignment.valid",
        "sqlparse.engine.grouping.group_typed_literal.valid_next",
        "sqlparse.engine.grouping.group_arrays.post",
        "sqlparse.engine.grouping.group_identifier_list.match",
        "sqlparse.engine.grouping.group_period.valid_next",
        "sqlparse.engine.grouping.group_identifier_list.valid",
        "sqlparse.engine.grouping.group_typecasts.match",
        "sqlparse.engine.grouping.group_identifier_list.post",
        "sqlparse.engine.grouping.group_arrays.valid_next",
        "sqlparse.engine.grouping.group_arrays.valid_prev",
        "sqlparse.engine.grouping.group_assignment.match",
        "sqlparse.engine.grouping._group",
        "sqlparse.engine.grouping.group_comparison.match",
        "sqlparse.engine.grouping.<lambda2>",
        "<builtin>.isinstance",
        "sqlparse.engine.grouping.group_as.match",
        "sqlparse.engine.grouping.group_typed_literal.post",
        "sqlparse.engine.grouping.group_tzcasts.match",
        "sqlparse.engine.grouping.<lambda1>",
        "sqlparse.engine.grouping.group_as.valid_next",
        "<builtin>.enumerate",
        "sqlparse.engine.grouping.group_period.valid_prev",
        "sqlparse.engine.grouping.group_typed_literal.match",
        "sqlparse.engine.grouping.group_tzcasts.post",
        "sqlparse.engine.grouping.group_comparison.valid",
        "sqlparse.engine.grouping.group_operator.match",
        "sqlparse.engine.grouping.group_comparison.post",
        "sqlparse.engine.grouping.group_operator.post",
        "sqlparse.engine.grouping.group_as.valid_prev",
        "sqlparse.engine.grouping.group_period.post",
        "sqlparse.engine.grouping.group_arrays.match",
        "sqlparse.engine.grouping.group_tzcasts.valid_next",
        "sqlparse.engine.grouping.group_typed_literal.valid_prev",
        "sqlparse.engine.grouping.group_assignment.post"
    ],
    "sqlparse.engine.grouping.group_typecasts.match": [],
    "sqlparse.engine.grouping.group_typecasts.valid": [],
    "sqlparse.engine.grouping.<lambda1>": [],
    "sqlparse.engine.grouping.<lambda2>": [],
    "sqlparse.engine.grouping.group_typecasts.post": [],
    "sqlparse.engine.grouping.group_tzcasts": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_tzcasts.match": [],
    "sqlparse.engine.grouping.group_tzcasts.valid_prev": [],
    "sqlparse.engine.grouping.group_tzcasts.valid_next": [],
    "sqlparse.engine.grouping.group_tzcasts.post": [],
    "sqlparse.engine.grouping.group_typed_literal": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_typed_literal.match": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_typed_literal.valid_prev": [],
    "sqlparse.engine.grouping.group_typed_literal.valid_next": [],
    "sqlparse.engine.grouping.group_typed_literal.post": [],
    "sqlparse.engine.grouping.group_typed_literal.match_to_extend": [
        "<builtin>.isinstance"
    ],
    "sqlparse.engine.grouping.group_typed_literal.valid_final": [],
    "sqlparse.engine.grouping.group_period": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_period.match": [],
    "sqlparse.engine.grouping.group_period.valid_prev": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_period.valid_next": [],
    "sqlparse.engine.grouping.group_period.post": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_as": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_as.match": [],
    "sqlparse.engine.grouping.group_as.valid_prev": [],
    "sqlparse.engine.grouping.group_as.valid_next": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_as.post": [],
    "sqlparse.engine.grouping.group_assignment": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_assignment.match": [],
    "sqlparse.engine.grouping.group_assignment.valid": [],
    "sqlparse.engine.grouping.group_assignment.post": [],
    "sqlparse.engine.grouping.group_comparison": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_comparison.match": [],
    "sqlparse.engine.grouping.group_comparison.valid": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_comparison.post": [],
    "sqlparse.engine.grouping.group_arrays": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_arrays.match": [
        "<builtin>.isinstance"
    ],
    "sqlparse.engine.grouping.group_arrays.valid_prev": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_arrays.valid_next": [],
    "sqlparse.engine.grouping.group_arrays.post": [],
    "sqlparse.engine.grouping.group_operator": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_operator.match": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_operator.valid": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_operator.post": [],
    "sqlparse.engine.grouping.group_identifier_list": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_identifier_list.match": [],
    "sqlparse.engine.grouping.group_identifier_list.valid": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_identifier_list.post": [],
    "sqlparse.engine.grouping.group_order": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_values": [
        "<builtin>.isinstance"
    ],
    "sqlparse.filters.reindent.ReindentFilter._flatten_up_to_token": [
        "<builtin>.next"
    ],
    "sqlparse.filters.reindent.ReindentFilter._get_offset": [
        "<builtin>.len",
        "sqlparse.filters.reindent.ReindentFilter._flatten_up_to_token",
        "<builtin>.map"
    ],
    "sqlparse.filters.reindent.ReindentFilter.nl": [
        "sqlparse.sql.Token.__init__",
        "<builtin>.max"
    ],
    "sqlparse.filters.reindent.ReindentFilter._next_token": [
        "sqlparse.filters.reindent.ReindentFilter._next_token"
    ],
    "sqlparse.filters.reindent.ReindentFilter._split_kwds": [
        "sqlparse.filters.reindent.ReindentFilter.nl",
        "<builtin>.str",
        "sqlparse.filters.reindent.ReindentFilter._next_token"
    ],
    "sqlparse.filters.reindent.ReindentFilter._split_statements": [
        "sqlparse.filters.reindent.ReindentFilter.nl"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process": [
        "<str>.lower",
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_where": [
        "sqlparse.filters.reindent.ReindentFilter.nl"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_function": [
        "sqlparse.filters.reindent.ReindentFilter._process_default"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_default": [
        "sqlparse.filters.reindent.ReindentFilter._split_kwds",
        "sqlparse.filters.reindent.ReindentFilter._process",
        "sqlparse.filters.reindent.ReindentFilter._split_statements"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_identifierlist": [
        "<builtin>.list",
        "<builtin>.len",
        "<builtin>.sum",
        "sqlparse.filters.reindent.ReindentFilter._process_default",
        "<builtin>.next",
        "sqlparse.sql.Token.__init__",
        "sqlparse.filters.reindent.ReindentFilter._get_offset"
    ],
    "<builtin>.sum": [],
    "sqlparse.filters.reindent.ReindentFilter._process_case": [
        "<builtin>.next",
        "<builtin>.iter",
        "sqlparse.filters.reindent.ReindentFilter._get_offset"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_values": [
        "sqlparse.filters.reindent.ReindentFilter.nl",
        "sqlparse.filters.reindent.ReindentFilter._get_offset"
    ],
    "sqlparse.filters.reindent.ReindentFilter.process": [
        "sqlparse.sql.Token.__init__",
        "<builtin>.str",
        "sqlparse.filters.reindent.ReindentFilter._process"
    ],
    "sqlparse.tokens._TokenType.__contains__": [
        "<builtin>.len"
    ],
    "sqlparse.tokens._TokenType.__getattr__": [
        "<builtin>.setattr"
    ],
    "sqlparse.parse": [
        "<builtin>.tuple",
        "sqlparse.parsestream"
    ],
    "sqlparse.parsestream": [
        "sqlparse.engine.filter_stack.FilterStack.enable_grouping",
        "sqlparse.engine.filter_stack.FilterStack.__init__",
        "sqlparse.engine.filter_stack.FilterStack.run"
    ],
    "sqlparse.split": [
        "sqlparse.engine.filter_stack.FilterStack.__init__",
        "sqlparse.engine.filter_stack.FilterStack.run",
        "<builtin>.str"
    ],
    "sqlparse.keywords.is_keyword": [
        "<map>.get"
    ],
    "sqlparse.filters.tokens._CaseFilter.__init__": [
        "<builtin>.getattr"
    ],
    "sqlparse.filters.tokens.TruncateStringFilter.process": [
        "<builtin>.len"
    ]
}