{
    "sshtunnel": [
        "warnings",
        "threading",
        "sshtunnel._ThreadingStreamForwardServer",
        "sshtunnel.HandlerSSHTunnelForwarderError",
        "socketserver",
        "paramiko",
        "logging.addLevelName",
        "queue",
        "sshtunnel.SSHTunnelForwarder",
        "socket",
        "logging",
        "sshtunnel._ForwardHandler",
        "sshtunnel._ForwardServer",
        "ntpath.join",
        "typing",
        "sshtunnel._StreamForwardServer",
        "sshtunnel._cli_main",
        "binascii",
        "sshtunnel._ThreadingForwardServer",
        "getpass",
        "argparse",
        "os",
        "select",
        "posixpath.join",
        "sshtunnel.BaseSSHTunnelForwarderError"
    ],
    "typing": [
        "typing.NamedTuple",
        "typing.SupportsAbs",
        "typing.BinaryIO",
        "contextlib",
        "types",
        "typing._TypedDictMeta",
        "typing.io",
        "typing.Protocol",
        "typing._TypingEllipsis",
        "typing._ProtocolMeta",
        "typing._alias",
        "typing.SupportsComplex",
        "typing.ForwardRef",
        "abc",
        "typing.TypeVar",
        "collections.abc",
        "collections",
        "typing._VariadicGenericAlias",
        "typing._TypingEmpty",
        "typing.NamedTupleMeta",
        "typing._Immutable",
        "typing.SupportsBytes",
        "typing._GenericAlias",
        "typing.re",
        "typing.Generic",
        "typing._Final",
        "functools",
        "typing._SpecialForm",
        "typing.IO",
        "re",
        "typing.TextIO",
        "typing._SpecialForm.__init__",
        "typing.SupportsInt",
        "typing.SupportsRound",
        "typing.TypedDict",
        "operator",
        "typing.SupportsIndex",
        "typing.TypeVar.__init__",
        "typing.SupportsFloat"
    ],
    "abc": [
        "abc.ABC",
        "abc.abstractclassmethod",
        "abc.abstractproperty",
        "abc.abstractstaticmethod",
        "_py_abc"
    ],
    "abc.abstractclassmethod": [],
    "abc.abstractstaticmethod": [],
    "abc.abstractproperty": [],
    "_py_abc": [
        "_py_abc.ABCMeta",
        "_weakrefset"
    ],
    "_weakrefset": [
        "_weakrefset._IterationGuard",
        "_weakrefset.WeakSet"
    ],
    "_weakrefset._IterationGuard": [],
    "_weakrefset.WeakSet": [],
    "_py_abc.ABCMeta": [],
    "abc.ABC": [],
    "collections": [
        "heapq",
        "reprlib",
        "collections.UserList",
        "collections.ChainMap",
        "collections._OrderedDictItemsView",
        "collections.Counter",
        "collections.UserDict",
        "operator",
        "collections._OrderedDictValuesView",
        "collections.OrderedDict",
        "keyword",
        "collections._OrderedDictKeysView",
        "collections._Link",
        "collections.UserString"
    ],
    "operator": [
        "operator.attrgetter",
        "operator.methodcaller",
        "operator.itemgetter"
    ],
    "operator.attrgetter": [],
    "operator.itemgetter": [],
    "operator.methodcaller": [],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "<builtin>.frozenset": [],
    "heapq": [
        "_heapq"
    ],
    "_heapq": [],
    "reprlib": [
        "reprlib.Repr.__init__",
        "reprlib.Repr"
    ],
    "reprlib.Repr": [],
    "reprlib.Repr.__init__": [],
    "collections._OrderedDictKeysView": [],
    "collections._OrderedDictItemsView": [],
    "collections._OrderedDictValuesView": [],
    "collections._Link": [],
    "collections.OrderedDict": [
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.classmethod",
        "<builtin>.object",
        "reprlib.recursive_repr"
    ],
    "<builtin>.object": [],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "<builtin>.set": [],
    "<builtin>.getattr": [],
    "<builtin>.classmethod": [],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "collections.ChainMap": [
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.property",
        "<builtin>.classmethod",
        "reprlib.recursive_repr"
    ],
    "<builtin>.property": [],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "collections.UserList": [],
    "collections.UserString": [],
    "collections.abc": [
        "collections.abc"
    ],
    "contextlib": [
        "contextlib.redirect_stdout",
        "types",
        "contextlib.suppress",
        "collections.abc",
        "abc",
        "collections",
        "contextlib.ContextDecorator",
        "contextlib.AbstractContextManager",
        "contextlib.AbstractAsyncContextManager",
        "contextlib.AsyncExitStack",
        "contextlib._AsyncGeneratorContextManager",
        "contextlib._BaseExitStack",
        "contextlib._RedirectStream",
        "contextlib.redirect_stderr",
        "functools",
        "contextlib.ExitStack",
        "contextlib._GeneratorContextManager",
        "contextlib.closing",
        "contextlib._GeneratorContextManagerBase",
        "contextlib.nullcontext"
    ],
    "functools": [
        "reprlib",
        "functools.cached_property",
        "functools.singledispatchmethod",
        "functools.partial",
        "abc",
        "<builtin>.object",
        "collections.namedtuple",
        "functools.partialmethod",
        "functools._HashedSeq",
        "collections"
    ],
    "functools.partial": [
        "reprlib.recursive_repr.decorating_function",
        "reprlib.recursive_repr"
    ],
    "functools.partialmethod": [
        "<builtin>.property"
    ],
    "collections.namedtuple": [
        "<builtin>.list",
        "<builtin>.tuple",
        "<str>.join",
        "<builtin>.TypeError",
        "<str>.replace",
        "<builtin>.dict",
        "<builtin>.reversed",
        "<builtin>.exec",
        "collections.<lambda1>",
        "_collections._tuplegetter",
        "<builtin>.map",
        "<builtin>.isinstance",
        "<builtin>.enumerate",
        "<builtin>.type",
        "<builtin>.ValueError",
        "<builtin>.repr",
        "<builtin>.set",
        "<builtin>.zip",
        "<builtin>.len",
        "<builtin>.str",
        "<str>.split",
        "<builtin>.classmethod"
    ],
    "<builtin>.isinstance": [],
    "<builtin>.map": [],
    "<builtin>.list": [],
    "<builtin>.str": [],
    "<builtin>.enumerate": [],
    "<builtin>.type": [],
    "<builtin>.TypeError": [],
    "<builtin>.ValueError": [],
    "<builtin>.tuple": [],
    "<builtin>.len": [],
    "<builtin>.reversed": [],
    "<builtin>.zip": [],
    "<builtin>.dict": [],
    "<builtin>.repr": [],
    "<str>.join": [],
    "<builtin>.exec": [],
    "collections.<lambda1>": [
        "operator.itemgetter.__init__",
        "<builtin>.property"
    ],
    "operator.itemgetter.__init__": [],
    "_collections._tuplegetter": [],
    "functools._HashedSeq": [],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.cached_property": [],
    "types": [
        "types._c",
        "types.DynamicClassAttribute",
        "<builtin>.type",
        "<builtin>.globals",
        "<builtin>.object",
        "types._cell_factory",
        "types._ag",
        "types._GeneratorWrapper",
        "types._g",
        "types._C"
    ],
    "types._cell_factory": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "types._C": [],
    "types.DynamicClassAttribute": [],
    "types._GeneratorWrapper": [
        "<builtin>.property"
    ],
    "<builtin>.globals": [],
    "contextlib.AbstractContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "abc.abstractmethod": [],
    "contextlib.AbstractAsyncContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib.ContextDecorator": [],
    "contextlib._GeneratorContextManagerBase": [],
    "contextlib._GeneratorContextManager": [],
    "contextlib._AsyncGeneratorContextManager": [],
    "contextlib.closing": [],
    "contextlib._RedirectStream": [],
    "contextlib.redirect_stdout": [],
    "contextlib.redirect_stderr": [],
    "contextlib.suppress": [],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "<builtin>.staticmethod": [],
    "contextlib.ExitStack": [],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.nullcontext": [],
    "re": [
        "functools.lru_cache.decorating_function",
        "<builtin>.type",
        "<builtin>.globals",
        "sre_parse",
        "sre_compile.compile",
        "<builtin>.chr",
        "re.RegexFlag",
        "functools",
        "copyreg.pickle",
        "enum",
        "functools._lru_cache_wrapper.wrapper",
        "copyreg",
        "sre_compile",
        "re.Scanner",
        "functools.lru_cache"
    ],
    "enum": [
        "enum.Enum",
        "enum.EnumMeta",
        "types",
        "enum.IntFlag",
        "enum.auto",
        "<builtin>.object",
        "enum.IntEnum",
        "enum._EnumDict",
        "enum.Flag"
    ],
    "enum.auto": [],
    "enum._EnumDict": [],
    "enum.EnumMeta": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "enum.Enum": [
        "<builtin>.classmethod",
        "types.DynamicClassAttribute.__init__"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.getattr",
        "<builtin>.bool"
    ],
    "<builtin>.bool": [],
    "enum.IntEnum": [],
    "enum.Flag": [
        "<builtin>.classmethod"
    ],
    "enum.IntFlag": [
        "<builtin>.classmethod"
    ],
    "sre_compile": [
        "sre_constants",
        "<builtin>.tuple",
        "sre_parse"
    ],
    "sre_parse": [
        "sre_parse.State",
        "<builtin>.frozenset",
        "sre_constants",
        "sre_parse.SubPattern",
        "sre_parse.Verbose",
        "sre_parse.Tokenizer"
    ],
    "sre_constants": [
        "sre_constants.error",
        "sre_constants._makecodes",
        "sre_constants._NamedIntConstant"
    ],
    "sre_constants.error": [],
    "sre_constants._NamedIntConstant": [],
    "sre_constants._makecodes": [
        "<builtin>.enumerate",
        "<str>.strip",
        "<str>.split",
        "<builtin>.globals"
    ],
    "<str>.strip": [],
    "<str>.split": [],
    "sre_parse.Verbose": [],
    "sre_parse.State": [
        "<builtin>.property"
    ],
    "sre_parse.SubPattern": [],
    "sre_parse.Tokenizer": [
        "<builtin>.property"
    ],
    "re.RegexFlag": [],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "sre_compile._code",
        "<builtin>.print",
        "sre_compile.dis",
        "<map>.items",
        "<builtin>.tuple",
        "sre_parse.parse",
        "sre_compile.isstring"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "sre_parse.parse": [
        "sre_parse.SubPattern.dump",
        "sre_parse.Tokenizer.seek",
        "sre_parse._parse_sub",
        "sre_parse.fix_flags",
        "sre_parse.State.__init__",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.__init__"
    ],
    "sre_parse.Tokenizer.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.__next": [
        "<builtin>.len",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.tell",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.State.__init__": [],
    "sre_parse._parse_sub": [
        "",
        "sre_parse.Tokenizer.match",
        "<builtin>.len",
        "sre_parse.SubPattern.append",
        "sre_parse.SubPattern.__init__",
        "sre_parse.Tokenizer.tell",
        "extend",
        "append"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.SubPattern.__init__": [],
    "extend": [],
    "append": [],
    "sre_parse.SubPattern.append": [
        "append"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "sre_parse.SubPattern.dump": [
        "<builtin>.print",
        "<builtin>.str",
        "<builtin>.enumerate",
        "<builtin>.isinstance"
    ],
    "<builtin>.print": [],
    "sre_compile._code": [
        "sre_compile._compile",
        "sre_compile._compile_info",
        "append"
    ],
    "sre_compile._compile_info": [
        "",
        "sre_compile._compile_charset",
        "sre_parse.SubPattern.getwidth",
        "sre_compile._get_charset_prefix",
        "<builtin>.len",
        "extend",
        "sre_compile._optimize_charset",
        "sre_compile._get_literal_prefix"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.max",
        "<builtin>.min"
    ],
    "<builtin>.min": [],
    "<builtin>.max": [],
    "sre_compile._get_literal_prefix": [
        "",
        "sre_compile._get_iscased",
        "<builtin>.len",
        "sre_compile._combine_flags",
        "extend",
        "sre_compile._get_literal_prefix"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._combine_flags": [],
    "sre_compile._get_charset_prefix": [
        "",
        "sre_compile._get_iscased",
        "<builtin>.any",
        "<builtin>.range",
        "<builtin>.map",
        "sre_compile._combine_flags"
    ],
    "<builtin>.range": [],
    "<builtin>.any": [],
    "sre_compile._optimize_charset": [
        "sre_compile._mk_bitmap",
        "<builtin>.any",
        "<builtin>.len",
        "<builtin>.range",
        "sre_compile._bytes_to_codes",
        "<builtin>.map",
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "append"
    ],
    "<builtin>.bytearray": [],
    "sre_compile._mk_bitmap": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "<builtin>.bytes": [],
    "sre_compile._bytes_to_codes": [
        "<builtin>.memoryview",
        "<builtin>.len"
    ],
    "<builtin>.memoryview": [],
    "sre_compile._compile_charset": [
        "",
        "extend",
        "sre_constants.error.__init__"
    ],
    "sre_constants.error.__init__": [
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "<builtin>.super": [],
    "sre_compile._compile": [
        "",
        "sre_compile._compile_charset",
        "sre_constants.error.__init__",
        "sre_compile._compile",
        "sre_compile._simple",
        "sre_compile._combine_flags",
        "sre_compile._optimize_charset"
    ],
    "sre_compile._simple": [
        "sre_compile._simple",
        "<builtin>.len"
    ],
    "sre_compile.dis": [
        "<builtin>.str",
        "sre_compile.dis.dis_",
        "<builtin>.len",
        "<builtin>.set"
    ],
    "sre_compile.dis.dis_": [
        "<builtin>.ValueError",
        "sre_compile.dis.dis_",
        "<builtin>.chr",
        "sre_compile.dis.dis_.print_",
        "sre_compile._hex_code",
        "<builtin>.range",
        "<builtin>.bin",
        "<builtin>.map",
        "<builtin>.list",
        "<builtin>.str",
        "sre_compile.dis.dis_.print_2"
    ],
    "<builtin>.bin": [],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "sre_compile._hex_code": [],
    "<map>.items": [],
    "functools.lru_cache": [
        "<builtin>.callable",
        "<builtin>.isinstance",
        "functools.update_wrapper",
        "<builtin>.TypeError",
        "functools._lru_cache_wrapper"
    ],
    "<builtin>.callable": [],
    "functools._lru_cache_wrapper": [
        "_thread.RLock",
        "<builtin>.object"
    ],
    "_thread.RLock": [],
    "functools.update_wrapper": [
        "<builtin>.getattr"
    ],
    "functools.lru_cache.decorating_function": [
        "functools.update_wrapper",
        "functools._lru_cache_wrapper"
    ],
    "functools._lru_cache_wrapper.wrapper": [
        "functools._make_key",
        "re._compile_repl"
    ],
    "functools._make_key": [
        "<builtin>.tuple",
        "<builtin>.type",
        "functools._HashedSeq.__init__",
        "<builtin>.len"
    ],
    "functools._HashedSeq.__init__": [
        "<builtin>.hash"
    ],
    "<builtin>.hash": [],
    "re._compile_repl": [
        "sre_parse.parse_template"
    ],
    "sre_parse.parse_template": [
        "",
        "<builtin>.isinstance",
        "<builtin>.int",
        "sre_parse.Tokenizer.match",
        "<builtin>.IndexError",
        "sre_parse.Tokenizer.get",
        "<builtin>.chr",
        "<builtin>.len",
        "append",
        "sre_parse.parse_template.addgroup",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.Tokenizer.getuntil",
        "<str>.isidentifier"
    ],
    "sre_parse.Tokenizer.get": [
        "sre_parse.Tokenizer.__next"
    ],
    "<builtin>.int": [],
    "sre_parse.parse_template.addgroup": [
        "append",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.getuntil": [
        "<builtin>.len",
        "sre_parse.Tokenizer.__next",
        "sre_parse.Tokenizer.error"
    ],
    "<str>.isidentifier": [],
    "<builtin>.IndexError": [],
    "copyreg": [],
    "copyreg.pickle": [
        "<builtin>.callable",
        "copyreg.constructor",
        "<builtin>.TypeError"
    ],
    "copyreg.constructor": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "re.Scanner": [],
    "typing._Final": [],
    "typing._Immutable": [],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._tp_cache": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache",
        "functools._lru_cache_wrapper.wrapper",
        "functools.wraps",
        "append"
    ],
    "functools.wraps": [],
    "typing._SpecialForm.__init__": [],
    "typing.ForwardRef": [],
    "typing.TypeVar": [],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._VariadicGenericAlias": [
        "typing._tp_cache"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing._TypingEmpty": [],
    "typing._TypingEllipsis": [],
    "typing._ProtocolMeta": [],
    "typing.Protocol": [],
    "typing.TypeVar.__init__": [
        "<builtin>.ValueError",
        "typing._type_check",
        "<builtin>.len",
        "<builtin>.tuple",
        "<builtin>.bool",
        "<builtin>.TypeError"
    ],
    "typing._type_check": [
        "<builtin>.callable",
        "<builtin>.isinstance",
        "<builtin>.type",
        "typing.ForwardRef.__init__",
        "<builtin>.TypeError"
    ],
    "typing.ForwardRef.__init__": [
        "<builtin>.isinstance",
        "<builtin>.SyntaxError",
        "<builtin>.TypeError",
        "<builtin>.compile"
    ],
    "<builtin>.compile": [],
    "<builtin>.SyntaxError": [],
    "typing._alias": [
        "typing._GenericAlias.__init__"
    ],
    "typing._GenericAlias.__init__": [
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "typing._collect_type_vars",
        "<map>.get"
    ],
    "<map>.get": [],
    "typing._collect_type_vars": [
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "extend",
        "append"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.NamedTupleMeta": [],
    "typing.NamedTuple": [],
    "typing._TypedDictMeta": [],
    "typing.TypedDict": [],
    "typing.IO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.BinaryIO": [
        "abc.abstractmethod"
    ],
    "typing.TextIO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.io": [],
    "typing.re": [],
    "os": [
        "<builtin>.globals",
        "os._Environ",
        "os._AddedDllDirectory",
        "ntpath",
        "collections.abc",
        "abc",
        "<builtin>.ImportError",
        "os._wrap_close",
        "stat",
        "os._Environ.__init__",
        "extend",
        "append",
        "os._add",
        "os._exists",
        "os._fscodec",
        "os._createenviron",
        "posixpath",
        "<builtin>.set",
        "os.PathLike"
    ],
    "stat": [],
    "<builtin>.ImportError": [],
    "ntpath": [
        "genericpath",
        "<builtin>.hasattr",
        "stat",
        "os"
    ],
    "genericpath": [
        "stat",
        "os"
    ],
    "<builtin>.hasattr": [],
    "posixpath": [
        "genericpath",
        "stat",
        "os"
    ],
    "os._exists": [
        "<builtin>.globals"
    ],
    "os._add": [],
    "os._Environ": [],
    "os._createenviron": [
        "os._createenviron.encodekey",
        "os._Environ.__init__"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.encode"
    ],
    "os._createenviron.encode": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "os._Environ.__init__": [],
    "os._fscodec": [],
    "os._wrap_close": [],
    "os.PathLike": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "os._AddedDllDirectory": [],
    "socket": [
        "socket.SocketIO",
        "selectors",
        "os",
        "_socket",
        "<builtin>.object",
        "enum",
        "socket.socket",
        "socket._GiveupOnSendfile",
        "io",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "extend",
        "append"
    ],
    "_socket": [],
    "io": [
        "io.TextIOBase",
        "io.BufferedIOBase",
        "io.RawIOBase",
        "abc",
        "io.IOBase"
    ],
    "io.IOBase": [],
    "io.RawIOBase": [],
    "io.BufferedIOBase": [],
    "io.TextIOBase": [],
    "selectors": [
        "math",
        "selectors._SelectorMapping",
        "selectors._PollLikeSelector",
        "<builtin>.globals",
        "selectors.SelectSelector",
        "selectors.KqueueSelector",
        "selectors.DevpollSelector",
        "selectors.EpollSelector",
        "abc",
        "select",
        "selectors.PollSelector",
        "collections.namedtuple",
        "selectors.BaseSelector",
        "<builtin>.hasattr",
        "selectors._BaseSelectorImpl",
        "collections.abc",
        "collections"
    ],
    "math": [],
    "select": [],
    "selectors._SelectorMapping": [],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors._BaseSelectorImpl": [],
    "selectors.SelectSelector": [],
    "selectors._PollLikeSelector": [],
    "selectors.PollSelector": [],
    "selectors.EpollSelector": [],
    "selectors.DevpollSelector": [],
    "selectors.KqueueSelector": [],
    "socket._GiveupOnSendfile": [],
    "socket.socket": [
        "<builtin>.hasattr",
        "<builtin>.property"
    ],
    "socket.SocketIO": [
        "<builtin>.property"
    ],
    "getpass": [
        "contextlib",
        "warnings",
        "os",
        "io",
        "getpass.GetPassWarning",
        "termios"
    ],
    "warnings": [
        "warnings.catch_warnings",
        "warnings.simplefilter",
        "warnings._OptionError",
        "warnings.WarningMessage",
        "warnings.filterwarnings",
        "<builtin>.hasattr",
        "warnings._processoptions"
    ],
    "warnings._OptionError": [],
    "warnings.WarningMessage": [],
    "warnings.catch_warnings": [],
    "warnings._processoptions": [
        "<builtin>.print",
        "warnings._setoption"
    ],
    "warnings._setoption": [
        "warnings._getaction",
        "<builtin>.int",
        "warnings._getcategory",
        "<builtin>.len",
        "re.escape",
        "warnings.filterwarnings",
        "re"
    ],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.getattr",
        "<builtin>.issubclass",
        "<builtin>.__import__"
    ],
    "<builtin>.__import__": [],
    "<builtin>.issubclass": [],
    "re.escape": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "<str>.encode",
        "<str>.translate"
    ],
    "warnings.filterwarnings": [
        "re.compile",
        "<builtin>.isinstance",
        "<builtin>.issubclass",
        "re",
        "warnings._add_filter"
    ],
    "re.compile": [
        "re._compile"
    ],
    "re._compile": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.ValueError",
        "sre_compile.compile",
        "<builtin>.len",
        "<builtin>.iter",
        "<builtin>.next",
        "<builtin>.TypeError",
        "sre_compile.isstring"
    ],
    "<builtin>.iter": [],
    "<builtin>.next": [],
    "warnings._add_filter": [
        "insert",
        "remove",
        "warnings._filters_mutated",
        "append"
    ],
    "remove": [],
    "insert": [],
    "warnings._filters_mutated": [],
    "warnings.simplefilter": [
        "<builtin>.isinstance",
        "warnings._add_filter"
    ],
    "getpass.GetPassWarning": [],
    "termios": [],
    "logging": [
        "_weakrefset.WeakSet.__init__",
        "logging.Manager.__init__",
        "warnings",
        "threading",
        "logging.StreamHandler",
        "logging.FileHandler",
        "logging.LogRecord",
        "logging._StderrHandler",
        "logging.RootLogger",
        "threading.RLock",
        "collections.abc",
        "logging.StringTemplateStyle",
        "ntpath.normcase",
        "traceback",
        "logging.RootLogger.__init__",
        "logging.PercentStyle",
        "logging._StderrHandler.__init__",
        "logging.Manager",
        "logging.Filter",
        "weakref.WeakValueDictionary.__init__",
        "logging.StrFormatStyle",
        "logging.Handler",
        "string",
        "logging.NullHandler",
        "logging.Logger",
        "posixpath.normcase",
        "logging.Formatter",
        "logging.Filterer",
        "re",
        "<builtin>.hasattr",
        "logging.BufferingFormatter",
        "os",
        "weakref",
        "logging.Formatter.__init__",
        "logging.LoggerAdapter",
        "io",
        "logging.PlaceHolder"
    ],
    "traceback": [
        "traceback.TracebackException",
        "traceback.FrameSummary",
        "traceback.StackSummary",
        "linecache",
        "collections"
    ],
    "linecache": [
        "os",
        "functools",
        "tokenize"
    ],
    "tokenize": [
        "re.compile",
        "tokenize.TokenInfo",
        "<builtin>.set",
        "<builtin>.any",
        "tokenize.group",
        "tokenize.TokenError",
        "tokenize.Untokenizer",
        "tokenize._all_string_prefixes",
        "token",
        "tokenize.maybe",
        "<builtin>.map",
        "collections.namedtuple",
        "re",
        "io",
        "<builtin>.sorted",
        "tokenize.StopTokenizing",
        "codecs",
        "collections"
    ],
    "codecs": [
        "codecs.CodecInfo",
        "codecs.Codec",
        "codecs.IncrementalDecoder",
        "codecs.StreamReaderWriter",
        "codecs.StreamReader",
        "codecs.StreamRecoder",
        "codecs.StreamWriter",
        "codecs.BufferedIncrementalDecoder",
        "codecs.IncrementalEncoder",
        "encodings",
        "codecs.BufferedIncrementalEncoder",
        "<builtin>.SystemError"
    ],
    "<builtin>.SystemError": [],
    "codecs.CodecInfo": [],
    "codecs.Codec": [],
    "codecs.IncrementalEncoder": [],
    "codecs.BufferedIncrementalEncoder": [],
    "codecs.IncrementalDecoder": [],
    "codecs.BufferedIncrementalDecoder": [],
    "codecs.StreamWriter": [],
    "codecs.StreamReader": [],
    "codecs.StreamReaderWriter": [],
    "codecs.StreamRecoder": [],
    "encodings": [
        "codecs",
        "encodings.CodecRegistryError"
    ],
    "encodings.CodecRegistryError": [],
    "token": [
        "<builtin>.isinstance",
        "extend",
        "<builtin>.globals"
    ],
    "<str>.replace": [],
    "tokenize.TokenInfo": [
        "<builtin>.property"
    ],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.group": [],
    "tokenize._all_string_prefixes": [],
    "<builtin>.sorted": [],
    "tokenize.TokenError": [],
    "tokenize.StopTokenizing": [],
    "tokenize.Untokenizer": [],
    "traceback.FrameSummary": [
        "<builtin>.property"
    ],
    "traceback.StackSummary": [
        "<builtin>.classmethod"
    ],
    "traceback.TracebackException": [
        "<builtin>.classmethod"
    ],
    "weakref": [
        "weakref.WeakMethod",
        "weakref.finalize",
        "_weakrefset",
        "weakref.WeakKeyDictionary",
        "collections.abc",
        "weakref.KeyedRef",
        "weakref.WeakValueDictionary"
    ],
    "weakref.WeakMethod": [],
    "weakref.WeakValueDictionary": [],
    "weakref.KeyedRef": [],
    "weakref.WeakKeyDictionary": [],
    "weakref.finalize": [
        "weakref.finalize._Info",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "weakref.finalize._Info": [],
    "string": [
        "re",
        "string.Template",
        "string._TemplateMetaclass",
        "collections",
        "string.Formatter"
    ],
    "string._TemplateMetaclass": [],
    "string.Template": [],
    "string.Formatter": [],
    "threading": [
        "_weakrefset.WeakSet.__init__",
        "threading._DummyThread",
        "threading._RLock",
        "threading.Event",
        "threading.Semaphore",
        "threading.Condition",
        "collections",
        "threading._MainThread.__init__",
        "threading._MainThread",
        "traceback",
        "_threading_local",
        "threading.BrokenBarrierError",
        "collections.namedtuple",
        "append",
        "threading.BoundedSemaphore",
        "_weakrefset",
        "<builtin>.hasattr",
        "threading.Thread",
        "threading.Barrier",
        "<builtin>.set",
        "os",
        "threading.Timer",
        "itertools.count"
    ],
    "threading._RLock": [],
    "threading.Condition": [],
    "threading.Semaphore": [],
    "threading.BoundedSemaphore": [],
    "threading.Event": [],
    "threading.Barrier": [
        "<builtin>.property"
    ],
    "threading.BrokenBarrierError": [],
    "itertools.count": [],
    "_weakrefset.WeakSet.__init__": [
        "_weakrefset.WeakSet.update",
        "_weakref.ref",
        "<builtin>.set"
    ],
    "_weakref.ref": [],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet.add",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.add": [
        "_weakref.ref",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "threading.Thread": [
        "<builtin>.property"
    ],
    "threading.Timer": [],
    "threading._MainThread": [],
    "threading._DummyThread": [],
    "threading._MainThread.__init__": [
        "threading.Thread.__init__",
        "threading.Thread._set_native_id",
        "threading.Event.set",
        "threading.Thread._set_tstate_lock",
        "threading.Thread._set_ident"
    ],
    "threading.Thread.__init__": [
        "threading.Event.__init__",
        "_weakrefset.WeakSet.add",
        "threading._newname",
        "threading._make_invoke_excepthook",
        "<builtin>.str",
        "threading.current_thread"
    ],
    "threading._newname": [],
    "threading.current_thread": [
        "_thread.get_ident",
        "threading._DummyThread.__init__"
    ],
    "_thread.get_ident": [],
    "threading._DummyThread.__init__": [
        "threading.Thread._set_native_id",
        "threading._newname",
        "threading.Thread.__init__",
        "threading.Thread._set_ident"
    ],
    "threading.Thread._set_ident": [
        "_thread.get_ident"
    ],
    "threading.Thread._set_native_id": [],
    "threading.Event.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Condition.__init__": [
        "_collections.deque",
        "threading.RLock"
    ],
    "threading.RLock": [
        "_thread.RLock",
        "threading._RLock.__init__"
    ],
    "threading._RLock.__init__": [],
    "_collections.deque": [],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "<builtin>.RuntimeError": [],
    "threading.Thread._set_tstate_lock": [],
    "threading.Event.set": [],
    "_threading_local": [
        "_threading_local._localimpl",
        "contextlib",
        "threading",
        "weakref",
        "_threading_local.local",
        "contextlib.contextmanager"
    ],
    "_threading_local._localimpl": [],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "_threading_local.local": [],
    "ntpath.normcase": [
        "os._fspath",
        "<builtin>.isinstance",
        "<str>.replace"
    ],
    "os._fspath": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<str>.format",
        "<builtin>.hasattr",
        "<builtin>.TypeError"
    ],
    "<str>.format": [],
    "posixpath.normcase": [
        "os._fspath"
    ],
    "logging.LogRecord": [],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.StringTemplateStyle": [],
    "logging.Formatter": [],
    "logging.Formatter.__init__": [
        "logging.StrFormatStyle.validate",
        "<builtin>.ValueError",
        "logging.StringTemplateStyle.__init__",
        "<map>.keys",
        "logging.StringTemplateStyle.validate",
        "logging.PercentStyle.__init__",
        "logging.PercentStyle.validate"
    ],
    "<map>.keys": [],
    "logging.StringTemplateStyle.__init__": [
        "string.Template.__init__"
    ],
    "string.Template.__init__": [],
    "logging.PercentStyle.__init__": [],
    "logging.BufferingFormatter": [],
    "logging.Filter": [],
    "logging.Filterer": [],
    "weakref.WeakValueDictionary.__init__": [
        "weakref.WeakValueDictionary.update",
        "<builtin>.set",
        "_weakref.ref"
    ],
    "weakref.WeakValueDictionary.update": [
        "weakref.WeakValueDictionary._commit_removals",
        "<builtin>.hasattr",
        "<builtin>.dict",
        "weakref.KeyedRef.__init__"
    ],
    "weakref.WeakValueDictionary._commit_removals": [
        "_weakref._remove_dead_weakref"
    ],
    "_weakref._remove_dead_weakref": [],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging.StreamHandler": [],
    "logging.FileHandler": [],
    "logging._StderrHandler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.Handler.__init__": [
        "logging.Handler.createLock",
        "logging._checkLevel",
        "logging._addHandlerRef",
        "logging.Filterer.__init__"
    ],
    "logging.Filterer.__init__": [],
    "logging._checkLevel": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "logging._addHandlerRef": [
        "logging._acquireLock",
        "append"
    ],
    "logging._acquireLock": [
        "threading._RLock.acquire"
    ],
    "threading._RLock.acquire": [
        "_thread.get_ident"
    ],
    "logging.Handler.createLock": [
        "logging._register_at_fork_reinit_lock",
        "threading.RLock"
    ],
    "logging._register_at_fork_reinit_lock": [
        "logging._acquireLock",
        "_weakrefset.WeakSet.add"
    ],
    "logging.PlaceHolder": [],
    "logging.Manager": [
        "<builtin>.property"
    ],
    "logging.Logger": [],
    "logging.RootLogger": [],
    "logging.LoggerAdapter": [
        "<builtin>.property"
    ],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.Logger.__init__": [
        "logging._checkLevel",
        "logging.Filterer.__init__"
    ],
    "logging.Manager.__init__": [],
    "logging.NullHandler": [],
    "argparse": [
        "argparse.MetavarTypeHelpFormatter",
        "argparse._AppendConstAction",
        "argparse._StoreAction",
        "argparse.ArgumentParser",
        "argparse._StoreTrueAction",
        "argparse._ActionsContainer",
        "argparse._MutuallyExclusiveGroup",
        "argparse.Action",
        "argparse.FileType",
        "argparse.Namespace",
        "argparse._StoreFalseAction",
        "argparse._ArgumentGroup",
        "argparse.ArgumentDefaultsHelpFormatter",
        "argparse._ExtendAction",
        "argparse.RawTextHelpFormatter",
        "re",
        "argparse._SubParsersAction",
        "argparse._AppendAction",
        "argparse.HelpFormatter",
        "argparse._StoreConstAction",
        "shutil",
        "argparse._CountAction",
        "argparse._HelpAction",
        "argparse.ArgumentTypeError",
        "os",
        "argparse.ArgumentError",
        "argparse.RawDescriptionHelpFormatter",
        "argparse._AttributeHolder",
        "argparse._VersionAction",
        "gettext"
    ],
    "shutil": [
        "<builtin>.hasattr",
        "zlib",
        "fnmatch",
        "shutil.SpecialFileError",
        "lzma",
        "bz2",
        "stat",
        "os",
        "shutil.Error",
        "shutil.ReadError",
        "shutil.RegistryError",
        "collections.namedtuple",
        "shutil.SameFileError",
        "shutil._GiveupOnFastCopy",
        "grp",
        "shutil.ExecError",
        "collections",
        "append"
    ],
    "fnmatch": [
        "functools.lru_cache.decorating_function",
        "posixpath",
        "functools",
        "os",
        "functools._lru_cache_wrapper.wrapper",
        "re",
        "functools.lru_cache"
    ],
    "zlib": [],
    "bz2": [
        "_compression",
        "warnings",
        "threading",
        "bz2.BZ2File",
        "os",
        "<builtin>.object",
        "_bz2",
        "io"
    ],
    "_compression": [
        "_compression.DecompressReader",
        "_compression.BaseStream",
        "io"
    ],
    "_compression.BaseStream": [],
    "_compression.DecompressReader": [],
    "_bz2": [],
    "bz2.BZ2File": [
        "<builtin>.property"
    ],
    "lzma": [
        "_compression",
        "os",
        "_lzma",
        "io",
        "lzma.LZMAFile"
    ],
    "_lzma": [],
    "lzma.LZMAFile": [
        "<builtin>.property"
    ],
    "grp": [],
    "shutil.Error": [],
    "shutil.SameFileError": [],
    "shutil.SpecialFileError": [],
    "shutil.ExecError": [],
    "shutil.ReadError": [],
    "shutil.RegistryError": [],
    "shutil._GiveupOnFastCopy": [],
    "gettext": [
        "re.compile",
        "<builtin>.enumerate",
        "ntpath.join",
        "locale",
        "os",
        "gettext.NullTranslations",
        "posixpath.join",
        "re",
        "gettext.GNUTranslations"
    ],
    "locale": [
        "re.compile",
        "<builtin>.hasattr",
        "encodings.aliases",
        "<builtin>.globals",
        "functools",
        "<map>.items",
        "<map>.setdefault",
        "re",
        "encodings",
        "functools.wraps",
        "<builtin>.sorted",
        "collections.abc"
    ],
    "encodings.aliases": [],
    "<map>.setdefault": [],
    "ntpath.join": [
        "<builtin>.isinstance",
        "ntpath.splitdrive",
        "os._fspath",
        "<builtin>.map",
        "genericpath._check_arg_types"
    ],
    "ntpath.splitdrive": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "os._fspath",
        "<str>.replace",
        "<str>.find"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "posixpath.join": [
        "<str>.endswith",
        "posixpath._get_sep",
        "os._fspath",
        "<builtin>.map",
        "genericpath._check_arg_types"
    ],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "gettext.NullTranslations": [],
    "gettext.GNUTranslations": [],
    "argparse._AttributeHolder": [],
    "argparse.HelpFormatter": [
        "argparse.HelpFormatter._Section"
    ],
    "argparse.HelpFormatter._Section": [],
    "argparse.RawDescriptionHelpFormatter": [],
    "argparse.RawTextHelpFormatter": [],
    "argparse.ArgumentDefaultsHelpFormatter": [],
    "argparse.MetavarTypeHelpFormatter": [],
    "argparse.ArgumentError": [],
    "argparse.ArgumentTypeError": [],
    "argparse.Action": [],
    "argparse._StoreAction": [],
    "argparse._StoreConstAction": [],
    "argparse._StoreTrueAction": [],
    "argparse._StoreFalseAction": [],
    "argparse._AppendAction": [],
    "argparse._AppendConstAction": [],
    "argparse._CountAction": [],
    "argparse._HelpAction": [],
    "argparse._VersionAction": [],
    "argparse._SubParsersAction": [
        "argparse._SubParsersAction._ChoicesPseudoAction"
    ],
    "argparse._SubParsersAction._ChoicesPseudoAction": [],
    "argparse._ExtendAction": [],
    "argparse.FileType": [],
    "argparse.Namespace": [],
    "argparse._ActionsContainer": [],
    "argparse._ArgumentGroup": [],
    "argparse._MutuallyExclusiveGroup": [],
    "argparse.ArgumentParser": [],
    "binascii": [],
    "paramiko": [
        "paramiko.transport",
        "paramiko.sftp_file",
        "paramiko.agent",
        "paramiko.auth_strategy",
        "paramiko.ssh_gss",
        "paramiko.ecdsakey",
        "paramiko.auth_handler",
        "paramiko.client",
        "paramiko.message",
        "paramiko.config",
        "paramiko.sftp_attr",
        "paramiko.ssh_exception",
        "paramiko.sftp",
        "paramiko.packet",
        "paramiko.channel",
        "paramiko._version",
        "paramiko.sftp_handle",
        "paramiko.pkey",
        "paramiko.sftp_si",
        "paramiko.dsskey",
        "paramiko.rsakey",
        "paramiko.server",
        "paramiko.proxy",
        "paramiko.hostkeys",
        "paramiko.sftp_client",
        "paramiko.ed25519key",
        "paramiko.common",
        "paramiko.file",
        "paramiko.sftp_server"
    ],
    "paramiko._version": [
        "<builtin>.map"
    ],
    "paramiko.transport": [
        "paramiko.transport.ServiceRequestingTransport",
        "cryptography.hazmat.primitives.ciphers",
        "cryptography.hazmat.backends",
        "threading",
        "paramiko.ssh_gss",
        "paramiko.ecdsakey",
        "paramiko.auth_handler",
        "paramiko.kex_group1",
        "hashlib",
        "paramiko.message",
        "paramiko.transport.ChannelMap",
        "paramiko",
        "paramiko.util",
        "paramiko.ssh_exception",
        "paramiko.packet",
        "paramiko.channel",
        "cryptography.hazmat.primitives.ciphers.modes",
        "paramiko.kex_gex",
        "socket",
        "paramiko.kex_gss",
        "paramiko.kex_ecdh_nist",
        "paramiko.transport.SecurityOptions",
        "paramiko.dsskey",
        "paramiko.rsakey",
        "paramiko.primes",
        "paramiko.transport.Transport",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "paramiko.server",
        "paramiko.compress",
        "paramiko.kex_group14",
        "paramiko.sftp_client",
        "paramiko.ed25519key",
        "paramiko.kex_curve25519",
        "paramiko.common",
        "os",
        "weakref",
        "paramiko.kex_group16"
    ],
    "hashlib": [
        "logging",
        "<builtin>.globals",
        "<builtin>.set",
        "hashlib.__get_builtin_constructor",
        "logging.exception",
        "<builtin>.range",
        "<builtin>.bytes",
        "hashlib.__get_openssl_constructor",
        "_hashlib"
    ],
    "_hashlib": [],
    "hashlib.__get_builtin_constructor": [
        "<builtin>.ValueError",
        "_blake2",
        "_sha3",
        "_sha1",
        "_sha512",
        "_sha256",
        "<map>.get",
        "_md5"
    ],
    "_sha3": [],
    "_blake2": [],
    "_sha512": [],
    "_sha256": [],
    "_md5": [],
    "_sha1": [],
    "hashlib.__get_openssl_constructor": [
        "hashlib.__get_builtin_constructor",
        "<builtin>.getattr"
    ],
    "logging.exception": [
        "logging.error"
    ],
    "logging.error": [
        "logging.Logger.error",
        "logging.basicConfig",
        "<builtin>.len"
    ],
    "logging.basicConfig": [
        "<builtin>.ValueError",
        "logging.Logger.setLevel",
        "<map>.keys",
        "logging._acquireLock",
        "logging.Logger.addHandler",
        "<builtin>.len",
        "logging.Formatter.__init__",
        "logging.StreamHandler.__init__",
        "logging.Logger.removeHandler",
        "logging.FileHandler.__init__"
    ],
    "logging.Logger.removeHandler": [
        "logging._acquireLock",
        "remove"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.FileHandler.__init__": [
        "logging.FileHandler._open",
        "os._fspath",
        "logging.StreamHandler.__init__",
        "posixpath.abspath",
        "ntpath.abspath",
        "logging.Handler.__init__"
    ],
    "ntpath.abspath": [],
    "posixpath.abspath": [
        "posixpath.isabs",
        "<builtin>.isinstance",
        "os._fspath",
        "posixpath.join",
        "posixpath.normpath"
    ],
    "posixpath.isabs": [
        "os._fspath",
        "<str>.startswith",
        "posixpath._get_sep"
    ],
    "posixpath.normpath": [
        "<builtin>.isinstance",
        "pop",
        "<str>.startswith",
        "os._fspath",
        "<str>.split",
        "append"
    ],
    "pop": [],
    "logging.FileHandler._open": [
        "<builtin>.open"
    ],
    "<builtin>.open": [],
    "logging.Logger.addHandler": [
        "logging._acquireLock",
        "append"
    ],
    "logging.Logger.setLevel": [
        "logging._checkLevel"
    ],
    "logging.Logger.error": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.isEnabledFor": [
        "logging._acquireLock",
        "logging.Logger.getEffectiveLevel"
    ],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Logger._log": [
        "logging.Logger.makeRecord",
        "<builtin>.isinstance",
        "<builtin>.type",
        "logging.Logger.handle",
        "logging.Logger.findCaller"
    ],
    "logging.Logger.findCaller": [
        "ntpath.normcase",
        "_io.StringIO",
        "posixpath.normcase",
        "traceback.print_stack",
        "<builtin>.hasattr",
        "logging.currentframe"
    ],
    "logging.currentframe": [],
    "_io.StringIO": [],
    "traceback.print_stack": [
        "traceback.print_list",
        "traceback.extract_stack"
    ],
    "traceback.extract_stack": [
        "traceback.walk_stack",
        "traceback.StackSummary.extract"
    ],
    "traceback.walk_stack": [],
    "traceback.StackSummary.extract": [
        "<builtin>.set",
        "traceback.FrameSummary.__init__",
        "linecache.lazycache",
        "linecache.checkcache",
        "<builtin>.getattr",
        "_collections.deque"
    ],
    "linecache.lazycache": [
        "<str>.endswith",
        "<builtin>.getattr",
        "<str>.startswith",
        "<builtin>.len"
    ],
    "traceback.FrameSummary.__init__": [
        "<builtin>.repr"
    ],
    "linecache.checkcache": [
        "<map>.keys",
        "<builtin>.list",
        "<map>.pop",
        "<builtin>.len"
    ],
    "<map>.pop": [],
    "traceback.print_list": [
        "<builtin>.print",
        "traceback.StackSummary.from_list",
        "traceback.StackSummary.format"
    ],
    "traceback.StackSummary.from_list": [
        "<builtin>.isinstance",
        "traceback.FrameSummary.__init__"
    ],
    "traceback.StackSummary.format": [
        "<builtin>.sorted",
        "append"
    ],
    "logging.Logger.makeRecord": [
        "logging.LogRecord.__init__",
        "<builtin>.KeyError"
    ],
    "logging.LogRecord.__init__": [
        "<builtin>.isinstance",
        "<builtin>.int",
        "ntpath.basename",
        "logging.getLevelName",
        "<builtin>.len",
        "posixpath.basename",
        "ntpath.splitext",
        "threading.current_thread",
        "<builtin>.hasattr",
        "_thread.get_ident",
        "posixpath.splitext"
    ],
    "logging.getLevelName": [
        "<map>.get"
    ],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "ntpath.split": [
        "ntpath.splitdrive",
        "ntpath._get_bothseps",
        "<builtin>.len",
        "os._fspath",
        "<str>.rstrip"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "<str>.find": [],
    "<str>.rstrip": [],
    "posixpath.basename": [
        "os._fspath",
        "<str>.rfind",
        "posixpath._get_sep"
    ],
    "<str>.rfind": [],
    "ntpath.splitext": [
        "os._fspath",
        "<builtin>.isinstance",
        "genericpath._splitext"
    ],
    "genericpath._splitext": [
        "<builtin>.max",
        "<str>.rfind"
    ],
    "posixpath.splitext": [
        "os._fspath",
        "<builtin>.isinstance",
        "genericpath._splitext"
    ],
    "<builtin>.KeyError": [],
    "logging.Logger.handle": [
        "logging.Logger.callHandlers",
        "logging.Filterer.filter"
    ],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging.Logger.callHandlers": [
        "logging.Handler.handle"
    ],
    "logging.Handler.handle": [
        "logging.StreamHandler.emit",
        "logging.Handler.emit",
        "logging.Handler.acquire",
        "logging.Filterer.filter"
    ],
    "logging.Handler.acquire": [
        "threading._RLock.acquire"
    ],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "<builtin>.NotImplementedError": [],
    "logging.StreamHandler.emit": [
        "logging.StreamHandler.flush",
        "logging.Handler.format",
        "logging.Handler.handleError"
    ],
    "logging.Handler.format": [
        "logging.Formatter.format"
    ],
    "logging.Formatter.format": [
        "logging.Formatter.formatMessage",
        "logging.LogRecord.getMessage",
        "logging.Formatter.formatTime",
        "logging.Formatter.formatStack",
        "logging.Formatter.usesTime",
        "logging.Formatter.formatException"
    ],
    "logging.LogRecord.getMessage": [
        "<builtin>.str"
    ],
    "logging.Formatter.usesTime": [
        "logging.PercentStyle.usesTime",
        "logging.StringTemplateStyle.usesTime"
    ],
    "logging.PercentStyle.usesTime": [],
    "logging.StringTemplateStyle.usesTime": [],
    "logging.Formatter.formatTime": [],
    "logging.Formatter.formatMessage": [
        "logging.PercentStyle.format"
    ],
    "logging.PercentStyle.format": [
        "logging.StringTemplateStyle._format",
        "<builtin>.ValueError",
        "logging.PercentStyle._format",
        "logging.StrFormatStyle._format"
    ],
    "logging.StrFormatStyle._format": [],
    "logging.StringTemplateStyle._format": [
        "string.Template.substitute"
    ],
    "string.Template.substitute": [
        "collections.ChainMap.__init__"
    ],
    "collections.ChainMap.__init__": [
        "<builtin>.list"
    ],
    "logging.PercentStyle._format": [],
    "logging.Formatter.formatException": [
        "traceback.print_exception",
        "_io.StringIO"
    ],
    "traceback.print_exception": [
        "<builtin>.print",
        "traceback.TracebackException.__init__",
        "<builtin>.type",
        "traceback.TracebackException.format"
    ],
    "traceback.TracebackException.__init__": [
        "<builtin>.id",
        "<builtin>.type",
        "<builtin>.set",
        "traceback._some_str",
        "traceback.StackSummary.extract",
        "traceback.TracebackException._load_lines",
        "traceback.TracebackException.__init__",
        "<builtin>.issubclass",
        "<builtin>.str",
        "traceback.walk_tb"
    ],
    "<builtin>.id": [],
    "traceback.walk_tb": [],
    "traceback._some_str": [
        "<builtin>.str",
        "<builtin>.type"
    ],
    "traceback.TracebackException._load_lines": [],
    "traceback.TracebackException.format": [
        "traceback.StackSummary.format",
        "traceback.TracebackException.format",
        "traceback.TracebackException.format_exception_only"
    ],
    "traceback.TracebackException.format_exception_only": [
        "traceback._format_final_exc_line",
        "<builtin>.issubclass",
        "<builtin>.len",
        "<builtin>.min"
    ],
    "traceback._format_final_exc_line": [
        "traceback._some_str"
    ],
    "logging.Formatter.formatStack": [],
    "logging.StreamHandler.flush": [
        "<builtin>.hasattr",
        "logging.Handler.acquire",
        "logging.StreamHandler.flush"
    ],
    "logging.Handler.handleError": [
        "ntpath.dirname",
        "traceback.print_exception",
        "posixpath.dirname",
        "traceback.print_stack"
    ],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "posixpath.dirname": [
        "<builtin>.len",
        "posixpath._get_sep",
        "os._fspath",
        "<str>.rstrip",
        "<str>.rfind"
    ],
    "cryptography.hazmat.backends": [
        "__future__",
        "typing"
    ],
    "__future__": [
        "__future__._Feature",
        "__future__._Feature.__init__"
    ],
    "__future__._Feature": [],
    "__future__._Feature.__init__": [],
    "cryptography.hazmat.primitives.ciphers.algorithms": [
        "cryptography.hazmat.primitives.ciphers.algorithms.AES",
        "cryptography.hazmat.primitives.ciphers.algorithms.Camellia",
        "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish",
        "cryptography.hazmat.primitives.ciphers.algorithms.CAST5",
        "cryptography.hazmat.primitives.ciphers.algorithms.SEED",
        "cryptography.hazmat.primitives.ciphers",
        "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES128",
        "cryptography.utils.deprecated",
        "cryptography.hazmat.primitives.ciphers.algorithms.IDEA",
        "cryptography.hazmat.primitives.ciphers.algorithms.TripleDES",
        "cryptography.hazmat.primitives.ciphers.algorithms.SM4",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES256",
        "cryptography.utils",
        "__future__",
        "cryptography.hazmat.primitives.ciphers.algorithms.ARC4"
    ],
    "cryptography.utils": [
        "types",
        "warnings",
        "cryptography.utils._DeprecatedValue",
        "cryptography.utils.CryptographyDeprecationWarning",
        "typing",
        "cryptography.utils.Enum",
        "enum",
        "cryptography.utils.InterfaceNotImplemented",
        "cryptography.utils._ModuleWithDeprecations",
        "__future__"
    ],
    "cryptography.utils.CryptographyDeprecationWarning": [],
    "cryptography.utils.InterfaceNotImplemented": [],
    "cryptography.utils._DeprecatedValue": [],
    "cryptography.utils._ModuleWithDeprecations": [],
    "cryptography.utils.Enum": [],
    "cryptography.hazmat.primitives.ciphers": [
        "cryptography.hazmat.primitives.ciphers.base",
        "__future__",
        "cryptography.hazmat.primitives._cipheralgorithm"
    ],
    "cryptography.hazmat.primitives._cipheralgorithm": [
        "cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm",
        "typing",
        "__future__",
        "cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm",
        "abc"
    ],
    "cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base": [
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext",
        "cryptography.hazmat.primitives.ciphers.base.Cipher",
        "cryptography.hazmat.primitives.ciphers.base._AEADDecryptionContext",
        "cryptography.hazmat.primitives.ciphers.base.AEADCipherContext",
        "typing",
        "cryptography.hazmat.primitives._cipheralgorithm",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.ciphers.base._AEADEncryptionContext",
        "cryptography.hazmat.primitives.ciphers.base.CipherContext",
        "cryptography.hazmat.backends.openssl.ciphers",
        "cryptography.hazmat.primitives.ciphers.base.AEADEncryptionContext",
        "cryptography.hazmat.primitives.ciphers.base.AEADDecryptionContext",
        "typing.TypeVar.__init__",
        "cryptography.hazmat.primitives.ciphers.base._CipherContext",
        "cryptography.hazmat.primitives.ciphers.modes",
        "__future__",
        "abc"
    ],
    "cryptography.exceptions": [
        "cryptography.exceptions.InvalidKey",
        "cryptography.hazmat.bindings._rust",
        "cryptography.exceptions.UnsupportedAlgorithm",
        "cryptography.exceptions.AlreadyUpdated",
        "cryptography.exceptions.AlreadyFinalized",
        "typing",
        "cryptography.exceptions.InvalidTag",
        "cryptography.exceptions.InternalError",
        "cryptography.exceptions.NotYetFinalized",
        "__future__",
        "cryptography.exceptions.InvalidSignature"
    ],
    "cryptography.hazmat.bindings._rust": [],
    "cryptography.exceptions.UnsupportedAlgorithm": [],
    "cryptography.exceptions.AlreadyFinalized": [],
    "cryptography.exceptions.AlreadyUpdated": [],
    "cryptography.exceptions.NotYetFinalized": [],
    "cryptography.exceptions.InvalidTag": [],
    "cryptography.exceptions.InvalidSignature": [],
    "cryptography.exceptions.InternalError": [],
    "cryptography.exceptions.InvalidKey": [],
    "cryptography.hazmat.primitives.ciphers.modes": [
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce",
        "cryptography.hazmat.primitives.ciphers.modes.CFB8",
        "cryptography.hazmat.primitives.ciphers.modes.GCM",
        "__future__",
        "abc",
        "cryptography.hazmat.primitives.ciphers.modes.CFB",
        "cryptography.hazmat.primitives.ciphers.modes.XTS",
        "cryptography.hazmat.primitives.ciphers.modes.ECB",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithAuthenticationTag",
        "typing",
        "cryptography.hazmat.primitives.ciphers.modes.OFB",
        "cryptography.hazmat.primitives.ciphers.modes.CTR",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithInitializationVector",
        "cryptography.hazmat.primitives.ciphers.modes.CBC",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "cryptography.hazmat.primitives.ciphers.modes.Mode",
        "cryptography.hazmat.primitives._cipheralgorithm",
        "cryptography.exceptions",
        "cryptography.utils",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithTweak"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.Mode": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithInitializationVector": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithTweak": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithAuthenticationTag": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CBC": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.XTS": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ECB": [],
    "cryptography.hazmat.primitives.ciphers.modes.OFB": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CFB": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CFB8": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CTR": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.GCM": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.ciphers": [
        "cryptography.hazmat.primitives.ciphers",
        "typing",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.primitives.ciphers.modes",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "__future__"
    ],
    "cryptography.hazmat.backends.openssl.backend": [
        "cryptography.hazmat.backends.openssl.ec",
        "cryptography.hazmat.primitives.asymmetric.types",
        "cryptography.hazmat.primitives.ciphers",
        "contextlib",
        "cryptography.x509",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "__future__",
        "collections",
        "cryptography.hazmat.backends.openssl.backend._RC2",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.primitives.asymmetric.x448",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.asymmetric.dh",
        "cryptography.hazmat.backends.openssl.rsa",
        "cryptography.hazmat.backends.openssl.aead",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.serialization.pkcs12",
        "cryptography.hazmat.bindings.openssl.binding",
        "collections.namedtuple",
        "cryptography.hazmat.primitives.ciphers.modes",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.hazmat.primitives.asymmetric.padding",
        "typing",
        "cryptography.hazmat.primitives.serialization.ssh",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "cryptography.hazmat.backends.openssl.cmac",
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat.backends.openssl.backend.Backend.__init__",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.ciphers",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.hazmat.backends.openssl.backend.GetCipherByName",
        "cryptography.utils",
        "cryptography.hazmat.backends.openssl.backend.Backend",
        "cryptography.hazmat.primitives._asymmetric",
        "cryptography.hazmat.primitives.hashes"
    ],
    "cryptography.x509": [
        "cryptography.x509.certificate_transparency",
        "cryptography.x509.name",
        "cryptography.x509.extensions",
        "cryptography.x509.oid",
        "cryptography.x509.general_name",
        "__future__",
        "cryptography.x509.base"
    ],
    "cryptography.x509.certificate_transparency": [
        "cryptography.x509.certificate_transparency.Version",
        "datetime",
        "cryptography.hazmat.bindings._rust",
        "cryptography.x509.certificate_transparency.LogEntryType",
        "cryptography.x509.certificate_transparency.SignatureAlgorithm",
        "cryptography.x509.certificate_transparency.SignedCertificateTimestamp",
        "cryptography.utils",
        "__future__",
        "abc",
        "cryptography.hazmat.primitives.hashes"
    ],
    "datetime": [
        "math",
        "datetime.time",
        "datetime.date",
        "datetime._days_before_year",
        "datetime.timezone",
        "_datetime",
        "datetime.timedelta",
        "datetime.timezone._create",
        "datetime.datetime",
        "datetime.tzinfo",
        "append"
    ],
    "datetime._days_before_year": [],
    "datetime.timedelta": [
        "<builtin>.property"
    ],
    "datetime.date": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.tzinfo": [],
    "datetime.time": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.datetime": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.timezone": [
        "<builtin>.classmethod",
        "<builtin>.object",
        "<builtin>.staticmethod"
    ],
    "datetime.timezone._create": [],
    "_datetime": [],
    "cryptography.hazmat.primitives.hashes": [
        "cryptography.hazmat.primitives.hashes.SHA3_224",
        "cryptography.hazmat.primitives.hashes.ExtendableOutputFunction",
        "cryptography.hazmat.primitives.hashes.SHAKE256",
        "__future__",
        "abc",
        "cryptography.hazmat.primitives.hashes.BLAKE2b",
        "cryptography.hazmat.primitives.hashes.SHA512_224",
        "cryptography.hazmat.primitives.hashes.BLAKE2s",
        "cryptography.hazmat.primitives.hashes.SHAKE128",
        "cryptography.hazmat.primitives.hashes.SHA256",
        "typing",
        "cryptography.hazmat.primitives.hashes.SHA3_384",
        "cryptography.hazmat.primitives.hashes.SHA3_256",
        "cryptography.hazmat.primitives.hashes.SHA3_512",
        "cryptography.hazmat.primitives.hashes.HashContext",
        "cryptography.hazmat.primitives.hashes.SM3",
        "cryptography.hazmat.primitives.hashes.SHA1",
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat.primitives.hashes.SHA384",
        "cryptography.hazmat.primitives.hashes.SHA512_256",
        "cryptography.hazmat.primitives.hashes.SHA512",
        "cryptography.hazmat.primitives.hashes.SHA224",
        "cryptography.hazmat.primitives.hashes.HashAlgorithm",
        "cryptography.hazmat.primitives.hashes.MD5"
    ],
    "cryptography.hazmat.primitives.hashes.HashAlgorithm": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.hashes.HashContext": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.hashes.ExtendableOutputFunction": [],
    "cryptography.hazmat.primitives.hashes.SHA1": [],
    "cryptography.hazmat.primitives.hashes.SHA512_224": [],
    "cryptography.hazmat.primitives.hashes.SHA512_256": [],
    "cryptography.hazmat.primitives.hashes.SHA224": [],
    "cryptography.hazmat.primitives.hashes.SHA256": [],
    "cryptography.hazmat.primitives.hashes.SHA384": [],
    "cryptography.hazmat.primitives.hashes.SHA512": [],
    "cryptography.hazmat.primitives.hashes.SHA3_224": [],
    "cryptography.hazmat.primitives.hashes.SHA3_256": [],
    "cryptography.hazmat.primitives.hashes.SHA3_384": [],
    "cryptography.hazmat.primitives.hashes.SHA3_512": [],
    "cryptography.hazmat.primitives.hashes.SHAKE128": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.SHAKE256": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.MD5": [],
    "cryptography.hazmat.primitives.hashes.BLAKE2b": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.BLAKE2s": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.SM3": [],
    "cryptography.x509.certificate_transparency.LogEntryType": [],
    "cryptography.x509.certificate_transparency.Version": [],
    "cryptography.x509.certificate_transparency.SignatureAlgorithm": [],
    "cryptography.x509.certificate_transparency.SignedCertificateTimestamp": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.x509.base": [
        "cryptography.hazmat.primitives.asymmetric.types",
        "cryptography.x509.base.CertificateRevocationList",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.x509.base.Attributes",
        "cryptography.x509.base.CertificateRevocationListBuilder",
        "__future__",
        "abc",
        "cryptography.x509.base.CertificateSigningRequestBuilder",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.primitives.asymmetric.x448",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.x509.oid",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.x509.base.CertificateBuilder",
        "cryptography.x509.base.RevokedCertificate",
        "cryptography.hazmat.primitives.asymmetric.padding",
        "typing",
        "cryptography.x509.name",
        "cryptography.x509.extensions",
        "cryptography.x509.base._RawRevokedCertificate",
        "datetime",
        "cryptography.hazmat.bindings._rust",
        "cryptography.x509.base.Version",
        "os",
        "cryptography.x509.base.AttributeNotFound",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.x509.base.CertificateSigningRequest",
        "cryptography.x509.base.RevokedCertificateBuilder",
        "cryptography.utils",
        "cryptography.x509.base.InvalidVersion",
        "cryptography.x509.base.Attribute",
        "cryptography.x509.base.Certificate",
        "cryptography.hazmat.primitives.hashes"
    ],
    "cryptography.hazmat.primitives.serialization": [
        "cryptography.hazmat.primitives.serialization.base",
        "cryptography.hazmat.primitives.serialization.ssh",
        "__future__",
        "cryptography.hazmat.primitives._serialization"
    ],
    "cryptography.hazmat.primitives._serialization": [
        "cryptography.hazmat.primitives._serialization.Encoding",
        "cryptography.hazmat.primitives._serialization.PublicFormat",
        "cryptography.hazmat.primitives._serialization.PrivateFormat",
        "cryptography.hazmat.primitives._serialization.BestAvailableEncryption",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder",
        "typing",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryption",
        "cryptography.hazmat.primitives._serialization.NoEncryption",
        "cryptography.hazmat.primitives._serialization.PBES",
        "cryptography.hazmat.primitives._serialization._KeySerializationEncryption",
        "cryptography.utils",
        "__future__",
        "cryptography.hazmat.primitives._serialization.ParameterFormat",
        "abc",
        "cryptography.hazmat.primitives.hashes"
    ],
    "cryptography.hazmat.primitives._serialization.PBES": [],
    "cryptography.hazmat.primitives._serialization.Encoding": [],
    "cryptography.hazmat.primitives._serialization.PrivateFormat": [],
    "cryptography.hazmat.primitives._serialization.PublicFormat": [],
    "cryptography.hazmat.primitives._serialization.ParameterFormat": [],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryption": [],
    "cryptography.hazmat.primitives._serialization.BestAvailableEncryption": [],
    "cryptography.hazmat.primitives._serialization.NoEncryption": [],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder": [],
    "cryptography.hazmat.primitives._serialization._KeySerializationEncryption": [],
    "cryptography.hazmat.primitives.serialization.base": [
        "__future__",
        "cryptography.hazmat.primitives.asymmetric.types",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.dh"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh": [
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat.primitives.asymmetric.dh.DHParameters",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey",
        "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers",
        "__future__",
        "cryptography.hazmat.primitives._serialization",
        "abc",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameters": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.types": [
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.primitives.asymmetric.x448",
        "cryptography.hazmat.primitives.asymmetric.dh",
        "cryptography.utils.deprecated",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "cryptography.utils",
        "__future__"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa": [
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey",
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameters",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey",
        "__future__",
        "cryptography.hazmat.primitives._serialization",
        "abc",
        "cryptography.hazmat.primitives.hashes"
    ],
    "cryptography.hazmat.primitives.asymmetric.utils": [
        "__future__",
        "cryptography.hazmat.primitives.asymmetric.utils.Prehashed",
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat.primitives.hashes"
    ],
    "cryptography.hazmat.primitives.asymmetric.utils.Prehashed": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameters": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec": [
        "cryptography.hazmat.primitives.asymmetric.ec.SECP256K1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT163R2",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1",
        "__future__",
        "abc",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP512R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve",
        "cryptography.hazmat.primitives._serialization",
        "cryptography.hazmat.primitives.asymmetric.ec.ECDSA",
        "cryptography.hazmat._oid",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT571R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT283K1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP384R1",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1",
        "cryptography.hazmat.primitives.asymmetric.ec.ECDH",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP256R1",
        "cryptography.utils",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1",
        "cryptography.hazmat.primitives.hashes"
    ],
    "cryptography.hazmat._oid": [
        "cryptography.hazmat._oid.AttributeOID",
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat._oid.CertificatePoliciesOID",
        "cryptography.hazmat._oid.SubjectInformationAccessOID",
        "cryptography.hazmat._oid.OCSPExtensionOID",
        "typing",
        "cryptography.hazmat._oid.ExtensionOID",
        "cryptography.hazmat._oid.CRLEntryExtensionOID",
        "cryptography.hazmat._oid.NameOID",
        "cryptography.hazmat._oid.ExtendedKeyUsageOID",
        "cryptography.hazmat._oid.SignatureAlgorithmOID",
        "__future__",
        "cryptography.hazmat._oid.AuthorityInformationAccessOID",
        "cryptography.hazmat.primitives.hashes"
    ],
    "cryptography.hazmat._oid.ExtensionOID": [],
    "cryptography.hazmat._oid.OCSPExtensionOID": [],
    "cryptography.hazmat._oid.CRLEntryExtensionOID": [],
    "cryptography.hazmat._oid.NameOID": [],
    "cryptography.hazmat._oid.SignatureAlgorithmOID": [],
    "cryptography.hazmat._oid.ExtendedKeyUsageOID": [],
    "cryptography.hazmat._oid.AuthorityInformationAccessOID": [],
    "cryptography.hazmat._oid.SubjectInformationAccessOID": [],
    "cryptography.hazmat._oid.CertificatePoliciesOID": [],
    "cryptography.hazmat._oid.AttributeOID": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT571R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT163R2": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT283K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP256K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP256R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP384R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP512R1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.ECDSA": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.ECDH": [],
    "cryptography.hazmat.primitives.asymmetric.ed448": [
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey",
        "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey",
        "cryptography.exceptions",
        "<builtin>.hasattr",
        "__future__",
        "cryptography.hazmat.primitives._serialization",
        "abc"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519": [
        "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey",
        "cryptography.hazmat.bindings._rust",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey",
        "<builtin>.hasattr",
        "__future__",
        "cryptography.hazmat.primitives._serialization",
        "abc"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa": [
        "math",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers",
        "__future__",
        "cryptography.hazmat.primitives._serialization",
        "abc",
        "cryptography.hazmat.primitives._asymmetric",
        "cryptography.hazmat.primitives.hashes"
    ],
    "cryptography.hazmat.primitives._asymmetric": [
        "__future__",
        "cryptography.hazmat.primitives._asymmetric.AsymmetricPadding",
        "abc"
    ],
    "cryptography.hazmat.primitives._asymmetric.AsymmetricPadding": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448": [
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey",
        "cryptography.exceptions",
        "<builtin>.hasattr",
        "__future__",
        "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey",
        "cryptography.hazmat.primitives._serialization",
        "abc"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519": [
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey",
        "<builtin>.hasattr",
        "__future__",
        "cryptography.hazmat.primitives._serialization",
        "abc"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.utils.deprecated": [
        "cryptography.utils._DeprecatedValue.__init__",
        "<builtin>.isinstance",
        "<builtin>.setattr",
        "cryptography.utils._ModuleWithDeprecations.__init__"
    ],
    "cryptography.utils._ModuleWithDeprecations.__init__": [
        "<builtin>.super"
    ],
    "cryptography.utils._DeprecatedValue.__init__": [],
    "<builtin>.setattr": [],
    "cryptography.hazmat.primitives.serialization.ssh": [
        "re.compile",
        "bcrypt",
        "cryptography.hazmat.primitives.ciphers",
        "dataclasses",
        "warnings",
        "cryptography.hazmat.primitives.serialization.ssh._SSHCipher",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.primitives.serialization.ssh.SSHCertificateType",
        "__future__",
        "base64",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.__init__",
        "cryptography.hazmat.primitives.ciphers.modes",
        "<builtin>.memoryview",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA",
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.hazmat.primitives.asymmetric.padding",
        "typing",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA",
        "enum",
        "cryptography.hazmat.primitives.serialization.ssh._FragList",
        "re",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519",
        "<builtin>.bytearray",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "binascii",
        "cryptography.hazmat.primitives.serialization.ssh.SSHCertificate",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA",
        "os",
        "<builtin>.range",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.serialization.ssh.SSHCertificateBuilder",
        "cryptography.utils",
        "cryptography.hazmat.primitives.hashes"
    ],
    "base64": [
        "binascii",
        "struct",
        "re"
    ],
    "struct": [
        "_struct"
    ],
    "_struct": [],
    "dataclasses": [
        "dataclasses._MISSING_TYPE",
        "re.compile",
        "dataclasses.InitVar",
        "types",
        "dataclasses._FIELD_BASE",
        "dataclasses._InitVarMeta",
        "copy",
        "functools",
        "dataclasses.Field",
        "dataclasses._HAS_DEFAULT_FACTORY_CLASS",
        "dataclasses.FrozenInstanceError",
        "re",
        "dataclasses._FIELD_BASE.__init__",
        "keyword",
        "inspect",
        "dataclasses._DataclassParams"
    ],
    "copy": [
        "copy.Error",
        "<builtin>.type",
        "types",
        "weakref",
        "copyreg",
        "<builtin>.getattr"
    ],
    "copy.Error": [],
    "inspect": [
        "inspect._ParameterKind",
        "dis",
        "<builtin>.globals",
        "types",
        "warnings",
        "inspect.BlockFinder",
        "inspect._empty",
        "collections.abc",
        "collections",
        "abc",
        "inspect._void",
        "<map>.items",
        "inspect.Signature",
        "collections.namedtuple",
        "tokenize",
        "functools",
        "inspect.EndOfBlock",
        "enum",
        "inspect.Parameter",
        "re",
        "<builtin>.hasattr",
        "<builtin>.type",
        "os",
        "<builtin>.object",
        "token",
        "operator",
        "importlib.machinery",
        "linecache",
        "inspect.BoundArguments"
    ],
    "dis": [
        "dis.Bytecode",
        "types",
        "dis.Instruction",
        "collections.namedtuple",
        "io",
        "opcode",
        "collections"
    ],
    "opcode": [
        "_opcode",
        "opcode.name_op",
        "<builtin>.range",
        "opcode.jrel_op",
        "opcode.jabs_op",
        "opcode.def_op",
        "append"
    ],
    "_opcode": [],
    "opcode.def_op": [],
    "opcode.name_op": [
        "opcode.def_op",
        "append"
    ],
    "opcode.jrel_op": [
        "opcode.def_op",
        "append"
    ],
    "opcode.jabs_op": [
        "opcode.def_op",
        "append"
    ],
    "dis.Instruction": [],
    "dis.Bytecode": [
        "<builtin>.classmethod"
    ],
    "importlib.machinery": [],
    "inspect.EndOfBlock": [],
    "inspect.BlockFinder": [],
    "inspect._void": [],
    "inspect._empty": [],
    "inspect._ParameterKind": [
        "<builtin>.property"
    ],
    "inspect.Parameter": [
        "<builtin>.property"
    ],
    "inspect.BoundArguments": [
        "<builtin>.property"
    ],
    "inspect.Signature": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "dataclasses.FrozenInstanceError": [],
    "dataclasses._HAS_DEFAULT_FACTORY_CLASS": [],
    "dataclasses._MISSING_TYPE": [],
    "dataclasses._FIELD_BASE": [],
    "dataclasses._FIELD_BASE.__init__": [],
    "dataclasses._InitVarMeta": [],
    "dataclasses.InitVar": [],
    "dataclasses.Field": [],
    "dataclasses._DataclassParams": [],
    "cryptography.hazmat.primitives.asymmetric.padding": [
        "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15",
        "cryptography.hazmat.primitives.asymmetric.padding._DigestLength",
        "cryptography.hazmat.primitives.asymmetric.padding._Auto",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.padding._MaxLength",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.primitives.asymmetric.padding.MGF",
        "cryptography.hazmat.primitives.asymmetric.padding.PSS",
        "cryptography.hazmat.primitives.asymmetric.padding.MGF1",
        "__future__",
        "cryptography.hazmat.primitives.asymmetric.padding.OAEP",
        "abc",
        "cryptography.hazmat.primitives._asymmetric",
        "cryptography.hazmat.primitives.hashes"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15": [],
    "cryptography.hazmat.primitives.asymmetric.padding._MaxLength": [],
    "cryptography.hazmat.primitives.asymmetric.padding._Auto": [],
    "cryptography.hazmat.primitives.asymmetric.padding._DigestLength": [],
    "cryptography.hazmat.primitives.asymmetric.padding.PSS": [],
    "cryptography.hazmat.primitives.asymmetric.padding.OAEP": [],
    "cryptography.hazmat.primitives.asymmetric.padding.MGF": [],
    "cryptography.hazmat.primitives.asymmetric.padding.MGF1": [],
    "bcrypt": [
        "bcrypt.__about__",
        "bcrypt._bcrypt",
        "warnings",
        "os",
        "__future__",
        "hmac"
    ],
    "hmac": [
        "warnings",
        "<builtin>.range",
        "<builtin>.bytes",
        "hmac.HMAC",
        "hashlib",
        "_hashlib"
    ],
    "hmac.HMAC": [
        "<builtin>.property"
    ],
    "bcrypt.__about__": [
        "__future__"
    ],
    "bcrypt._bcrypt": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHCipher": [],
    "cryptography.hazmat.primitives.serialization.ssh._FragList": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519": [],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.__init__": [],
    "cryptography.hazmat.primitives.serialization.ssh.SSHCertificateType": [],
    "cryptography.hazmat.primitives.serialization.ssh.SSHCertificate": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.serialization.ssh.SSHCertificateBuilder": [],
    "cryptography.x509.extensions": [
        "cryptography.hazmat.primitives.asymmetric.types",
        "cryptography.x509.extensions.InhibitAnyPolicy",
        "cryptography.x509.extensions.OCSPAcceptableResponses",
        "cryptography.x509.extensions.AuthorityKeyIdentifier",
        "cryptography.x509.extensions.ExtensionNotFound",
        "cryptography.x509.extensions.InvalidityDate",
        "cryptography.x509.extensions.DistributionPoint",
        "__future__",
        "cryptography.x509.extensions.NameConstraints",
        "cryptography.x509.extensions.IssuingDistributionPoint",
        "abc",
        "hashlib",
        "cryptography.x509.extensions.PolicyConstraints",
        "cryptography.x509.extensions.KeyUsage",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.x509.extensions.FreshestCRL",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.x509.extensions.PolicyInformation",
        "cryptography.x509.extensions.CertificateIssuer",
        "cryptography.x509.extensions.UserNotice",
        "cryptography.x509.extensions.TLSFeatureType",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.x509.oid",
        "cryptography.x509.extensions.ReasonFlags",
        "cryptography.x509.extensions.BasicConstraints",
        "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps",
        "ipaddress",
        "cryptography.x509.extensions.SubjectKeyIdentifier",
        "cryptography.x509.extensions.OCSPNoCheck",
        "cryptography.x509.extensions.GeneralNames",
        "cryptography.x509.extensions.ExtensionType",
        "cryptography.x509.extensions.OCSPNonce",
        "cryptography.x509.certificate_transparency",
        "cryptography.x509.extensions.SubjectAlternativeName",
        "cryptography.x509.extensions.UnrecognizedExtension",
        "cryptography.x509.extensions.Extensions",
        "cryptography.x509.extensions.ExtendedKeyUsage",
        "cryptography.x509.extensions.CRLNumber",
        "cryptography.x509.extensions.CRLReason",
        "typing",
        "cryptography.x509.name",
        "cryptography.x509.extensions.TLSFeature",
        "cryptography.x509.extensions.IssuerAlternativeName",
        "cryptography.x509.general_name",
        "cryptography.x509.extensions.MSCertificateTemplate",
        "cryptography.x509.extensions.NoticeReference",
        "cryptography.x509.extensions.DuplicateExtension",
        "datetime",
        "cryptography.hazmat.bindings._rust",
        "cryptography.x509.extensions.AuthorityInformationAccess",
        "cryptography.x509.extensions.SignedCertificateTimestamps",
        "cryptography.x509.extensions.SubjectInformationAccess",
        "cryptography.x509.extensions.DeltaCRLIndicator",
        "cryptography.x509.extensions.AccessDescription",
        "cryptography.hazmat.primitives.constant_time",
        "typing.TypeVar.__init__",
        "cryptography.utils",
        "cryptography.x509.extensions.CertificatePolicies",
        "cryptography.x509.extensions.Extension",
        "cryptography.x509.extensions.CRLDistributionPoints",
        "cryptography.x509.extensions.PrecertPoison"
    ],
    "ipaddress": [
        "ipaddress.IPv6Interface",
        "ipaddress._BaseV6",
        "ipaddress.IPv6Network",
        "ipaddress.IPv4Address",
        "ipaddress._IPv4Constants",
        "ipaddress.IPv6Address",
        "functools",
        "ipaddress._IPAddressBase",
        "ipaddress._IPv6Constants",
        "ipaddress.NetmaskValueError",
        "ipaddress._BaseV4",
        "ipaddress.IPv4Interface",
        "ipaddress.IPv4Network",
        "ipaddress.AddressValueError",
        "ipaddress._BaseAddress",
        "ipaddress._BaseNetwork"
    ],
    "ipaddress.AddressValueError": [],
    "ipaddress.NetmaskValueError": [],
    "ipaddress._IPAddressBase": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ipaddress._BaseAddress": [],
    "ipaddress._BaseNetwork": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "functools.cached_property.__init__"
    ],
    "functools.cached_property.__init__": [
        "_thread.RLock"
    ],
    "ipaddress._BaseV4": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "ipaddress.IPv4Address": [
        "functools.lru_cache.decorating_function",
        "functools._lru_cache_wrapper.wrapper",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "ipaddress.IPv4Interface": [
        "<builtin>.property",
        "functools.cached_property.__init__"
    ],
    "ipaddress.IPv4Network": [
        "functools.lru_cache.decorating_function",
        "functools._lru_cache_wrapper.wrapper",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "ipaddress._IPv4Constants": [
        "ipaddress.IPv4Network.__init__",
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress.IPv4Network.__init__": [
        "ipaddress._IPAddressBase._split_addr_prefix",
        "<builtin>.int",
        "<builtin>.ValueError",
        "ipaddress._BaseV4._make_netmask",
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress._IPAddressBase._split_addr_prefix": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "ipaddress._split_optional_netmask"
    ],
    "ipaddress._split_optional_netmask": [
        "<builtin>.str",
        "<builtin>.len"
    ],
    "ipaddress.IPv4Address.__init__": [
        "<builtin>.isinstance",
        "ipaddress._BaseV4._ip_int_from_string",
        "ipaddress._IPAddressBase._check_packed_address",
        "ipaddress._IPAddressBase._check_int_address",
        "<builtin>.str"
    ],
    "ipaddress._IPAddressBase._check_int_address": [],
    "ipaddress._IPAddressBase._check_packed_address": [
        "<builtin>.len"
    ],
    "ipaddress._BaseV4._ip_int_from_string": [
        "<builtin>.map",
        "<builtin>.len"
    ],
    "ipaddress._BaseV4._make_netmask": [
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._ip_int_from_prefix",
        "ipaddress.IPv4Address.__init__",
        "ipaddress._IPAddressBase._report_invalid_netmask",
        "ipaddress._IPAddressBase._prefix_from_prefix_string",
        "ipaddress._IPAddressBase._prefix_from_ip_string"
    ],
    "ipaddress._IPAddressBase._prefix_from_prefix_string": [
        "<builtin>.int",
        "ipaddress._IPAddressBase._report_invalid_netmask"
    ],
    "ipaddress._IPAddressBase._report_invalid_netmask": [],
    "ipaddress._IPAddressBase._prefix_from_ip_string": [
        "ipaddress._IPAddressBase._prefix_from_ip_int",
        "ipaddress._BaseV4._ip_int_from_string",
        "ipaddress._IPAddressBase._report_invalid_netmask"
    ],
    "ipaddress._IPAddressBase._prefix_from_ip_int": [
        "ipaddress._count_righthand_zero_bits",
        "<builtin>.ValueError"
    ],
    "ipaddress._count_righthand_zero_bits": [
        "<builtin>.min"
    ],
    "ipaddress._IPAddressBase._ip_int_from_prefix": [],
    "ipaddress._BaseV6": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.frozenset"
    ],
    "ipaddress.IPv6Address": [
        "functools.lru_cache.decorating_function",
        "functools._lru_cache_wrapper.wrapper",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "ipaddress.IPv6Interface": [
        "<builtin>.property",
        "functools.cached_property.__init__"
    ],
    "ipaddress.IPv6Network": [
        "<builtin>.property"
    ],
    "ipaddress._IPv6Constants": [
        "ipaddress.IPv6Network.__init__"
    ],
    "ipaddress.IPv6Network.__init__": [
        "ipaddress._IPAddressBase._split_addr_prefix",
        "<builtin>.int",
        "<builtin>.ValueError",
        "ipaddress._BaseV6._make_netmask",
        "ipaddress.IPv6Address.__init__"
    ],
    "ipaddress.IPv6Address.__init__": [
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._check_packed_address",
        "ipaddress._IPAddressBase._check_int_address",
        "<builtin>.str",
        "ipaddress._BaseV6._ip_int_from_string"
    ],
    "ipaddress._BaseV6._ip_int_from_string": [
        "ipaddress.IPv4Address.__init__",
        "ipaddress._BaseV6._parse_hextet",
        "<builtin>.len",
        "<builtin>.range"
    ],
    "ipaddress._BaseV6._parse_hextet": [
        "<builtin>.int",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "ipaddress._BaseV6._make_netmask": [
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._ip_int_from_prefix",
        "ipaddress._IPAddressBase._report_invalid_netmask",
        "ipaddress.IPv6Address.__init__",
        "ipaddress._IPAddressBase._prefix_from_prefix_string"
    ],
    "cryptography.hazmat.primitives.constant_time": [
        "__future__",
        "hmac"
    ],
    "cryptography.x509.general_name": [
        "cryptography.x509.general_name.IPAddress",
        "cryptography.x509.general_name.DirectoryName",
        "email.utils",
        "cryptography.x509.general_name.GeneralName",
        "typing",
        "cryptography.x509.name",
        "cryptography.x509.general_name.RFC822Name",
        "cryptography.x509.general_name.UniformResourceIdentifier",
        "cryptography.x509.oid",
        "cryptography.x509.general_name.RegisteredID",
        "cryptography.x509.general_name.UnsupportedGeneralNameType",
        "ipaddress",
        "cryptography.x509.general_name.DNSName",
        "cryptography.x509.general_name.OtherName",
        "__future__",
        "abc"
    ],
    "email.utils": [
        "re.compile",
        "datetime",
        "os",
        "random",
        "email.charset",
        "re",
        "email._parseaddr",
        "urllib.parse",
        "socket"
    ],
    "random": [
        "math",
        "random.Random",
        "_random",
        "random.SystemRandom",
        "warnings",
        "os",
        "bisect",
        "_sha512",
        "<builtin>.hasattr",
        "collections.abc",
        "hashlib",
        "random.Random.__init__"
    ],
    "bisect": [
        "_bisect"
    ],
    "_bisect": [],
    "_random": [],
    "random.Random": [],
    "random.SystemRandom": [],
    "random.Random.__init__": [
        "random.Random.seed"
    ],
    "random.Random.seed": [
        "<builtin>.isinstance",
        "<builtin>.ord",
        "<builtin>.super",
        "<builtin>.len",
        "<builtin>.map"
    ],
    "<builtin>.ord": [],
    "urllib.parse": [
        "re.compile",
        "urllib.parse.ParseResult",
        "urllib.parse._fix_result_transcoding",
        "warnings",
        "urllib.parse.DefragResultBytes",
        "urllib.parse.Quoter",
        "<builtin>.frozenset",
        "collections",
        "urllib.parse._NetlocResultMixinBytes",
        "urllib.parse.SplitResultBytes",
        "urllib.parse._NetlocResultMixinStr",
        "collections.namedtuple",
        "urllib.parse._NetlocResultMixinBase",
        "urllib.parse.DefragResult",
        "<builtin>.bytes",
        "urllib.parse.SplitResult",
        "re",
        "urllib.parse._ResultMixinStr",
        "urllib.parse._ResultMixinBytes",
        "urllib.parse.ParseResultBytes"
    ],
    "urllib.parse._ResultMixinStr": [],
    "urllib.parse._ResultMixinBytes": [],
    "urllib.parse._NetlocResultMixinBase": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinStr": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinBytes": [
        "<builtin>.property"
    ],
    "urllib.parse.DefragResult": [],
    "urllib.parse.SplitResult": [],
    "urllib.parse.ParseResult": [],
    "urllib.parse.DefragResultBytes": [],
    "urllib.parse.SplitResultBytes": [],
    "urllib.parse.ParseResultBytes": [],
    "urllib.parse._fix_result_transcoding": [],
    "urllib.parse.Quoter": [],
    "email._parseaddr": [
        "email._parseaddr.AddrlistClass",
        "calendar",
        "email._parseaddr.AddressList"
    ],
    "calendar": [
        "datetime",
        "calendar.LocaleHTMLCalendar",
        "calendar.LocaleTextCalendar",
        "locale",
        "calendar.IllegalWeekdayError",
        "calendar._localized_month.__init__",
        "<builtin>.range",
        "calendar.TextCalendar",
        "calendar.HTMLCalendar",
        "calendar._localized_day.__init__",
        "calendar._localized_month",
        "calendar.different_locale",
        "calendar.IllegalMonthError",
        "calendar.Calendar",
        "calendar._localized_day",
        "datetime.date.toordinal"
    ],
    "calendar.IllegalMonthError": [],
    "calendar.IllegalWeekdayError": [],
    "calendar._localized_month": [
        "<builtin>.range"
    ],
    "calendar._localized_day": [
        "<builtin>.range"
    ],
    "calendar._localized_day.__init__": [],
    "calendar._localized_month.__init__": [],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "calendar.TextCalendar": [],
    "calendar.HTMLCalendar": [],
    "calendar.different_locale": [],
    "calendar.LocaleTextCalendar": [],
    "calendar.LocaleHTMLCalendar": [],
    "datetime.date.toordinal": [
        "datetime._ymd2ord"
    ],
    "datetime._ymd2ord": [
        "datetime._days_in_month",
        "datetime._days_before_month",
        "datetime._days_before_year"
    ],
    "datetime._days_in_month": [
        "datetime._is_leap"
    ],
    "datetime._is_leap": [],
    "datetime._days_before_month": [
        "datetime._is_leap"
    ],
    "email._parseaddr.AddrlistClass": [],
    "email._parseaddr.AddressList": [],
    "email.charset": [
        "email.encoders",
        "email.base64mime",
        "email.errors",
        "email.quoprimime",
        "functools",
        "email.charset.Charset"
    ],
    "email.base64mime": [
        "base64",
        "binascii"
    ],
    "email.quoprimime": [
        "<builtin>.ord",
        "string",
        "<str>.encode",
        "<builtin>.chr",
        "<builtin>.range",
        "re"
    ],
    "<str>.encode": [],
    "email.errors": [
        "email.errors.MultipartConversionError",
        "email.errors.FirstHeaderLineIsContinuationDefect",
        "email.errors.InvalidBase64LengthDefect",
        "email.errors.HeaderParseError",
        "email.errors.CloseBoundaryNotFoundDefect",
        "email.errors.HeaderDefect",
        "email.errors.MessageError",
        "email.errors.BoundaryError",
        "email.errors.NonASCIILocalPartDefect",
        "email.errors.InvalidMultipartContentTransferEncodingDefect",
        "email.errors.InvalidBase64CharactersDefect",
        "email.errors.NonPrintableDefect",
        "email.errors.InvalidBase64PaddingDefect",
        "email.errors.UndecodableBytesDefect",
        "email.errors.MessageDefect",
        "email.errors.MisplacedEnvelopeHeaderDefect",
        "email.errors.InvalidHeaderDefect",
        "email.errors.StartBoundaryNotFoundDefect",
        "email.errors.MultipartInvariantViolationDefect",
        "email.errors.MissingHeaderBodySeparatorDefect",
        "email.errors.MessageParseError",
        "email.errors.NoBoundaryInMultipartDefect",
        "email.errors.HeaderMissingRequiredValue",
        "email.errors.ObsoleteHeaderDefect",
        "email.errors.CharsetError"
    ],
    "email.errors.MessageError": [],
    "email.errors.MessageParseError": [],
    "email.errors.HeaderParseError": [],
    "email.errors.BoundaryError": [],
    "email.errors.MultipartConversionError": [],
    "email.errors.CharsetError": [],
    "email.errors.MessageDefect": [],
    "email.errors.NoBoundaryInMultipartDefect": [],
    "email.errors.StartBoundaryNotFoundDefect": [],
    "email.errors.CloseBoundaryNotFoundDefect": [],
    "email.errors.FirstHeaderLineIsContinuationDefect": [],
    "email.errors.MisplacedEnvelopeHeaderDefect": [],
    "email.errors.MissingHeaderBodySeparatorDefect": [],
    "email.errors.MultipartInvariantViolationDefect": [],
    "email.errors.InvalidMultipartContentTransferEncodingDefect": [],
    "email.errors.UndecodableBytesDefect": [],
    "email.errors.InvalidBase64PaddingDefect": [],
    "email.errors.InvalidBase64CharactersDefect": [],
    "email.errors.InvalidBase64LengthDefect": [],
    "email.errors.HeaderDefect": [],
    "email.errors.InvalidHeaderDefect": [],
    "email.errors.HeaderMissingRequiredValue": [],
    "email.errors.NonPrintableDefect": [],
    "email.errors.ObsoleteHeaderDefect": [],
    "email.errors.NonASCIILocalPartDefect": [],
    "email.encoders": [
        "quopri",
        "base64"
    ],
    "quopri": [
        "binascii"
    ],
    "email.charset.Charset": [],
    "cryptography.x509.name": [
        "cryptography.hazmat.bindings._rust",
        "warnings",
        "cryptography.x509.name.RelativeDistinguishedName",
        "cryptography.x509.name._RFC4514NameParser",
        "typing",
        "cryptography.x509.name.Name",
        "cryptography.x509.oid",
        "cryptography.x509.name.NameAttribute",
        "re",
        "cryptography.x509.name._ASN1Type",
        "cryptography.utils",
        "__future__",
        "binascii"
    ],
    "cryptography.x509.oid": [
        "__future__",
        "cryptography.hazmat._oid"
    ],
    "cryptography.x509.name._ASN1Type": [],
    "cryptography.x509.name.NameAttribute": [
        "<builtin>.property"
    ],
    "cryptography.x509.name.RelativeDistinguishedName": [],
    "cryptography.x509.name.Name": [
        "<builtin>.property",
        "typing.overload",
        "<builtin>.classmethod"
    ],
    "typing.overload": [],
    "cryptography.x509.name._RFC4514NameParser": [
        "re.compile",
        "<builtin>.chr"
    ],
    "cryptography.x509.general_name.UnsupportedGeneralNameType": [],
    "cryptography.x509.general_name.GeneralName": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.x509.general_name.RFC822Name": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.DNSName": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.UniformResourceIdentifier": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.DirectoryName": [
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.RegisteredID": [
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.IPAddress": [
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.OtherName": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.DuplicateExtension": [],
    "cryptography.x509.extensions.ExtensionNotFound": [],
    "cryptography.x509.extensions.ExtensionType": [],
    "cryptography.x509.extensions.Extensions": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions._make_sequence_methods": [],
    "cryptography.x509.extensions.CRLNumber": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.AuthorityKeyIdentifier": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "cryptography.x509.extensions.SubjectKeyIdentifier": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "cryptography.x509.extensions.AuthorityInformationAccess": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SubjectInformationAccess": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.AccessDescription": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.BasicConstraints": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.DeltaCRLIndicator": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.CRLDistributionPoints": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.FreshestCRL": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.DistributionPoint": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.ReasonFlags": [],
    "cryptography.x509.extensions.PolicyConstraints": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.CertificatePolicies": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.PolicyInformation": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.UserNotice": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.NoticeReference": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.ExtendedKeyUsage": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.OCSPNoCheck": [],
    "cryptography.x509.extensions.PrecertPoison": [],
    "cryptography.x509.extensions.TLSFeature": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.TLSFeatureType": [],
    "cryptography.x509.extensions.InhibitAnyPolicy": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.KeyUsage": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.NameConstraints": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.Extension": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.GeneralNames": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SubjectAlternativeName": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.IssuerAlternativeName": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.CertificateIssuer": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.CRLReason": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.InvalidityDate": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SignedCertificateTimestamps": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.OCSPNonce": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.OCSPAcceptableResponses": [],
    "cryptography.x509.extensions.IssuingDistributionPoint": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.MSCertificateTemplate": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.UnrecognizedExtension": [
        "<builtin>.property"
    ],
    "cryptography.x509.base.AttributeNotFound": [],
    "cryptography.x509.base.Attribute": [
        "<builtin>.property"
    ],
    "cryptography.x509.base.Attributes": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.base.Version": [],
    "cryptography.x509.base.InvalidVersion": [],
    "cryptography.x509.base.Certificate": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.x509.base.RevokedCertificate": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.x509.base._RawRevokedCertificate": [
        "<builtin>.property"
    ],
    "cryptography.x509.base.CertificateRevocationList": [
        "typing.overload",
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.x509.base.CertificateSigningRequest": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.x509.base.CertificateSigningRequestBuilder": [],
    "cryptography.x509.base.CertificateBuilder": [],
    "cryptography.x509.base.CertificateRevocationListBuilder": [],
    "cryptography.x509.base.RevokedCertificateBuilder": [],
    "cryptography.hazmat.backends.openssl.aead": [
        "cryptography.hazmat.primitives.ciphers.aead",
        "typing",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.backend",
        "__future__"
    ],
    "cryptography.hazmat.primitives.ciphers.aead": [
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat.primitives.ciphers.aead.AESSIV",
        "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305",
        "typing",
        "os",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.aead",
        "cryptography.hazmat.primitives.ciphers.aead.AESCCM",
        "cryptography.hazmat.primitives.ciphers.aead.AESGCM",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.utils",
        "__future__",
        "cryptography.hazmat.primitives.ciphers.aead.AESOCB3"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESCCM": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESGCM": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESOCB3": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.aead.AESSIV": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.backends.openssl.cmac": [
        "cryptography.hazmat.primitives.ciphers",
        "typing",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.constant_time",
        "cryptography.hazmat.backends.openssl.backend",
        "cryptography.hazmat.primitives.ciphers.modes",
        "__future__",
        "cryptography.hazmat.backends.openssl.cmac._CMACContext"
    ],
    "cryptography.hazmat.backends.openssl.cmac._CMACContext": [],
    "cryptography.hazmat.backends.openssl.ec": [
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.backends.openssl.utils",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey",
        "typing",
        "cryptography.exceptions",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey",
        "cryptography.hazmat.backends.openssl.backend",
        "__future__"
    ],
    "cryptography.hazmat.backends.openssl.utils": [
        "cryptography.hazmat.primitives.asymmetric.utils",
        "typing",
        "cryptography.hazmat.backends.openssl.backend",
        "__future__",
        "cryptography.hazmat.primitives.hashes"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.rsa": [
        "cryptography.hazmat.primitives.asymmetric.utils",
        "cryptography.hazmat.backends.openssl.utils",
        "cryptography.hazmat.primitives.serialization",
        "threading",
        "cryptography.hazmat.primitives.asymmetric.padding",
        "typing",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey",
        "cryptography.hazmat.backends.openssl.backend",
        "__future__",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey",
        "cryptography.hazmat.primitives.hashes"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.bindings.openssl.binding": [
        "cryptography.hazmat.bindings.openssl.binding._verify_package_version",
        "cryptography.hazmat.bindings._rust",
        "cryptography.hazmat.bindings.openssl.binding.Binding.init_static_locks",
        "cryptography.hazmat.bindings.openssl.binding.Binding",
        "cryptography",
        "types",
        "warnings",
        "threading",
        "typing",
        "os",
        "cryptography.exceptions",
        "warnings.warn",
        "cryptography.hazmat.bindings.openssl._conditional",
        "__future__"
    ],
    "cryptography": [
        "__future__",
        "cryptography.__about__"
    ],
    "cryptography.__about__": [
        "__future__"
    ],
    "cryptography.hazmat.bindings.openssl._conditional": [
        "__future__",
        "typing"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.bindings.openssl.binding._verify_package_version": [
        "<builtin>.ImportError",
        "cryptography.hazmat.bindings.openssl.binding._openssl_assert",
        "<str>.encode"
    ],
    "cryptography.hazmat.bindings.openssl.binding._openssl_assert": [
        "cryptography.exceptions.InternalError.__init__"
    ],
    "cryptography.exceptions.InternalError.__init__": [
        "<builtin>.super"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding.init_static_locks": [
        "cryptography.hazmat.bindings.openssl.binding.Binding._ensure_ffi_initialized"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding._ensure_ffi_initialized": [],
    "warnings.warn": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "warnings._is_internal_frame",
        "<builtin>.range",
        "<builtin>.issubclass",
        "warnings.warn_explicit",
        "<builtin>.TypeError",
        "warnings._next_external_frame"
    ],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings.warn_explicit": [
        "<builtin>.isinstance",
        "<builtin>.int",
        "linecache.getlines",
        "warnings._showwarnmsg",
        "warnings.WarningMessage.__init__",
        "<builtin>.str",
        "<builtin>.issubclass",
        "<builtin>.RuntimeError",
        "<str>.lower",
        "<map>.get",
        "<map>.clear",
        "linecache"
    ],
    "<str>.lower": [],
    "<map>.clear": [],
    "linecache.getlines": [
        "linecache.clearcache",
        "<builtin>.len",
        "linecache.updatecache"
    ],
    "linecache.updatecache": [
        "posixpath.isabs",
        "<str>.endswith",
        "ntpath.join",
        "<str>.startswith",
        "<builtin>.len",
        "ntpath.isabs",
        "tokenize.open",
        "posixpath.join",
        "linecache.lazycache",
        "<map>.pop"
    ],
    "<str>.startswith": [],
    "<str>.endswith": [],
    "ntpath.isabs": [
        "<builtin>.isinstance",
        "ntpath.splitdrive",
        "ntpath._get_bothseps",
        "<str>.startswith",
        "<builtin>.len",
        "os._fspath",
        "<str>.replace"
    ],
    "tokenize.open": [
        "tokenize.detect_encoding",
        "_io.TextIOWrapper",
        "builtins.open"
    ],
    "builtins.open": [],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.read_or_stop",
        "tokenize.detect_encoding.find_cookie"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "<builtin>.SyntaxError",
        "tokenize._get_normal_name"
    ],
    "tokenize._get_normal_name": [
        "<str>.startswith",
        "<str>.replace",
        "<str>.lower"
    ],
    "_io.TextIOWrapper": [],
    "linecache.clearcache": [],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "<str>.strip",
        "linecache",
        "linecache.getline",
        "tracemalloc"
    ],
    "linecache.getline": [
        "linecache.getlines",
        "<builtin>.len"
    ],
    "tracemalloc": [
        "fnmatch",
        "posixpath",
        "tracemalloc.BaseFilter",
        "collections.abc",
        "functools",
        "tracemalloc.Frame",
        "tracemalloc._Traces",
        "tracemalloc.Statistic",
        "tracemalloc.Snapshot",
        "tracemalloc.Trace",
        "tracemalloc.DomainFilter",
        "pickle",
        "tracemalloc.Filter",
        "linecache",
        "tracemalloc.StatisticDiff",
        "tracemalloc.Traceback"
    ],
    "pickle": [
        "_pickle",
        "types",
        "pickle.PicklingError",
        "copyreg",
        "pickle._Unpickler",
        "pickle._Stop",
        "pickle._Unframer",
        "_compat_pickle",
        "pickle._Framer",
        "extend",
        "append",
        "functools",
        "pickle._Pickler",
        "re",
        "codecs",
        "pickle.PickleError",
        "pickle.UnpicklingError",
        "struct",
        "io"
    ],
    "_compat_pickle": [
        "<builtin>.dict",
        "<map>.items",
        "<map>.update",
        "<builtin>.len"
    ],
    "<map>.update": [],
    "_pickle": [],
    "pickle.PickleError": [],
    "pickle.PicklingError": [],
    "pickle.UnpicklingError": [],
    "pickle._Stop": [],
    "pickle._Framer": [],
    "pickle._Unframer": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "pickle._Unpickler": [],
    "tracemalloc.Statistic": [],
    "tracemalloc.StatisticDiff": [],
    "tracemalloc.Frame": [
        "<builtin>.property"
    ],
    "tracemalloc.Traceback": [],
    "tracemalloc.Trace": [
        "<builtin>.property"
    ],
    "tracemalloc._Traces": [],
    "tracemalloc.BaseFilter": [],
    "tracemalloc.Filter": [
        "<builtin>.property"
    ],
    "tracemalloc.DomainFilter": [
        "<builtin>.property"
    ],
    "tracemalloc.Snapshot": [
        "<builtin>.staticmethod"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12": [
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.primitives.asymmetric.types",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates",
        "cryptography.x509",
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate",
        "typing",
        "cryptography.hazmat.primitives.asymmetric.ed448",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "__future__",
        "cryptography.hazmat.primitives._serialization"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.backend._RC2": [],
    "cryptography.hazmat.backends.openssl.backend.Backend": [
        "contextlib.contextmanager"
    ],
    "cryptography.hazmat.backends.openssl.backend.GetCipherByName": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend._register_default_ciphers",
        "cryptography.hazmat.bindings.openssl.binding.Binding.__init__"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding.__init__": [
        "cryptography.hazmat.bindings.openssl.binding.Binding._ensure_ffi_initialized"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._register_default_ciphers": [
        "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__init__",
        "<builtin>.type",
        "cryptography.hazmat.backends.openssl.backend.Backend.register_cipher_adapter"
    ],
    "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__init__": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.register_cipher_adapter": [
        "<builtin>.ValueError"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.base.CipherContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADCipherContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADDecryptionContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADEncryptionContext": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.Cipher": [
        "typing.overload"
    ],
    "cryptography.hazmat.primitives.ciphers.base._CipherContext": [],
    "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext": [],
    "cryptography.hazmat.primitives.ciphers.base._AEADDecryptionContext": [],
    "cryptography.hazmat.primitives.ciphers.base._AEADEncryptionContext": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES128": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES256": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Camellia": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.TripleDES": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish": [
        "<builtin>.property",
        "<builtin>.range",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.CAST5": [
        "<builtin>.property",
        "<builtin>.range",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ARC4": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.IDEA": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SEED": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SM4": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "paramiko.util": [
        "logging",
        "traceback",
        "paramiko.config",
        "_thread._local",
        "threading",
        "paramiko.common",
        "struct",
        "paramiko.util.PFilter",
        "paramiko.util.ClosingContextManager"
    ],
    "paramiko.common": [
        "logging",
        "paramiko.common.byte_chr",
        "struct",
        "<builtin>.range"
    ],
    "paramiko.common.byte_chr": [
        "<builtin>.isinstance"
    ],
    "paramiko.config": [
        "io",
        "fnmatch",
        "paramiko.config.SSHConfig",
        "getpass",
        "paramiko.ssh_exception",
        "paramiko.config.SSHConfigDict",
        "os",
        "functools",
        "shlex",
        "paramiko.config.LazyFqdn",
        "re",
        "hashlib",
        "socket"
    ],
    "shlex": [
        "re.compile",
        "shlex.shlex",
        "os",
        "re",
        "io",
        "collections"
    ],
    "shlex.shlex": [
        "<builtin>.property"
    ],
    "paramiko.ssh_exception": [
        "paramiko.ssh_exception.SSHException",
        "paramiko.ssh_exception.NoValidConnectionsError",
        "paramiko.ssh_exception.AuthenticationException",
        "paramiko.ssh_exception.BadHostKeyException",
        "paramiko.ssh_exception.BadAuthenticationType",
        "paramiko.ssh_exception.CouldNotCanonicalize",
        "paramiko.ssh_exception.PasswordRequiredException",
        "paramiko.ssh_exception.PartialAuthentication",
        "paramiko.ssh_exception.ConfigParseError",
        "paramiko.ssh_exception.IncompatiblePeer",
        "paramiko.ssh_exception.UnableToAuthenticate",
        "paramiko.ssh_exception.ProxyCommandFailure",
        "paramiko.ssh_exception.ChannelException",
        "socket"
    ],
    "paramiko.ssh_exception.SSHException": [],
    "paramiko.ssh_exception.AuthenticationException": [],
    "paramiko.ssh_exception.PasswordRequiredException": [],
    "paramiko.ssh_exception.BadAuthenticationType": [],
    "paramiko.ssh_exception.PartialAuthentication": [],
    "paramiko.ssh_exception.UnableToAuthenticate": [],
    "paramiko.ssh_exception.ChannelException": [],
    "paramiko.ssh_exception.BadHostKeyException": [],
    "paramiko.ssh_exception.IncompatiblePeer": [],
    "paramiko.ssh_exception.ProxyCommandFailure": [],
    "paramiko.ssh_exception.NoValidConnectionsError": [],
    "paramiko.ssh_exception.CouldNotCanonicalize": [],
    "paramiko.ssh_exception.ConfigParseError": [],
    "paramiko.config.SSHConfig": [
        "re.compile",
        "<builtin>.classmethod"
    ],
    "paramiko.config.LazyFqdn": [],
    "paramiko.config.SSHConfigDict": [],
    "_thread._local": [],
    "paramiko.util.PFilter": [],
    "paramiko.util.ClosingContextManager": [],
    "paramiko.auth_handler": [
        "paramiko.message",
        "paramiko.auth_handler.AuthOnlyHandler",
        "paramiko.util",
        "threading",
        "paramiko.common",
        "paramiko.ssh_exception",
        "weakref",
        "paramiko.ssh_gss",
        "paramiko.auth_handler.AuthHandler",
        "paramiko.auth_handler.GssapiWithMicAuthHandler",
        "re",
        "paramiko.server"
    ],
    "paramiko.message": [
        "paramiko.util",
        "paramiko.common",
        "paramiko.message.Message",
        "struct",
        "io"
    ],
    "paramiko.message.Message": [],
    "paramiko.server": [
        "paramiko.server.SubsystemHandler",
        "paramiko.util",
        "threading",
        "paramiko.common",
        "paramiko.server.ServerInterface",
        "paramiko.server.InteractiveQuery"
    ],
    "paramiko.server.ServerInterface": [],
    "paramiko.server.InteractiveQuery": [],
    "paramiko.server.SubsystemHandler": [],
    "paramiko.ssh_gss": [
        "paramiko.ssh_gss._SSH_GSSAuth",
        "paramiko.ssh_gss._SSH_GSSAPI_NEW",
        "paramiko.ssh_exception",
        "paramiko.common",
        "paramiko.ssh_gss._SSH_GSSAPI_OLD",
        "os",
        "paramiko.ssh_gss._SSH_SSPI",
        "struct",
        "paramiko._version",
        "<builtin>.hasattr"
    ],
    "paramiko.ssh_gss._SSH_GSSAuth": [],
    "paramiko.ssh_gss._SSH_GSSAPI_OLD": [
        "<builtin>.property"
    ],
    "paramiko.ssh_gss._SSH_GSSAPI_NEW": [
        "<builtin>.property"
    ],
    "paramiko.ssh_gss._SSH_SSPI": [
        "<builtin>.property"
    ],
    "paramiko.auth_handler.AuthHandler": [
        "<builtin>.property"
    ],
    "paramiko.auth_handler.GssapiWithMicAuthHandler": [
        "<builtin>.property"
    ],
    "paramiko.auth_handler.AuthOnlyHandler": [
        "<builtin>.property"
    ],
    "paramiko.channel": [
        "paramiko.message",
        "binascii",
        "paramiko.channel.ChannelFile",
        "paramiko.channel.ChannelStderrFile",
        "paramiko.channel.Channel",
        "paramiko.util",
        "threading",
        "paramiko.common",
        "functools",
        "os",
        "paramiko.ssh_exception",
        "paramiko.buffered_pipe",
        "paramiko.pipe",
        "paramiko.channel.ChannelStdinFile",
        "paramiko.file",
        "socket"
    ],
    "paramiko.file": [
        "paramiko.util",
        "paramiko.common",
        "paramiko.file.BufferedFile",
        "io"
    ],
    "paramiko.file.BufferedFile": [
        "<builtin>.property"
    ],
    "paramiko.buffered_pipe": [
        "paramiko.util",
        "threading",
        "array",
        "paramiko.buffered_pipe.BufferedPipe",
        "paramiko.buffered_pipe.PipeTimeout"
    ],
    "array": [],
    "paramiko.buffered_pipe.PipeTimeout": [],
    "paramiko.buffered_pipe.BufferedPipe": [],
    "paramiko.pipe": [
        "paramiko.pipe.WindowsPipe",
        "os",
        "paramiko.pipe.OrPipe",
        "paramiko.pipe.PosixPipe",
        "socket"
    ],
    "paramiko.pipe.PosixPipe": [],
    "paramiko.pipe.WindowsPipe": [],
    "paramiko.pipe.OrPipe": [],
    "paramiko.channel.Channel": [
        "paramiko.channel.open_only",
        "<builtin>.property"
    ],
    "paramiko.channel.open_only": [
        "functools.wraps"
    ],
    "paramiko.channel.ChannelFile": [],
    "paramiko.channel.ChannelStderrFile": [],
    "paramiko.channel.ChannelStdinFile": [],
    "paramiko.compress": [
        "paramiko.compress.ZlibDecompressor",
        "paramiko.compress.ZlibCompressor",
        "zlib"
    ],
    "paramiko.compress.ZlibCompressor": [],
    "paramiko.compress.ZlibDecompressor": [],
    "paramiko.dsskey": [
        "cryptography.hazmat.primitives.asymmetric.dsa",
        "paramiko.message",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "paramiko.pkey",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends",
        "paramiko.util",
        "paramiko.common",
        "paramiko.ssh_exception",
        "paramiko.ber",
        "cryptography.exceptions",
        "paramiko.dsskey.DSSKey",
        "cryptography.hazmat.primitives.hashes"
    ],
    "paramiko.ber": [
        "paramiko.ber.BER",
        "paramiko.util",
        "paramiko.common",
        "paramiko.ber.BERException",
        "paramiko.sftp"
    ],
    "paramiko.sftp": [
        "paramiko.message",
        "paramiko.sftp.SFTPError",
        "paramiko.sftp.BaseSFTP",
        "paramiko.util",
        "paramiko.common",
        "<builtin>.range",
        "select",
        "struct",
        "paramiko.sftp.int64",
        "socket"
    ],
    "paramiko.sftp.int64": [],
    "paramiko.sftp.SFTPError": [],
    "paramiko.sftp.BaseSFTP": [],
    "paramiko.ber.BERException": [],
    "paramiko.ber.BER": [
        "<builtin>.staticmethod",
        "<builtin>.bytes"
    ],
    "paramiko.pkey": [
        "bcrypt",
        "cryptography.hazmat.primitives.ciphers",
        "cryptography.hazmat.backends",
        "paramiko.pkey.PKey",
        "base64",
        "hashlib",
        "paramiko.message",
        "cryptography.hazmat.primitives.serialization",
        "paramiko.util",
        "paramiko.ssh_exception",
        "cryptography.hazmat.primitives.asymmetric",
        "cryptography.hazmat.primitives.ciphers.modes",
        "paramiko.pkey.PublicBlob",
        "paramiko.pkey.UnknownKeyType",
        "re",
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "binascii",
        "paramiko.common",
        "os",
        "struct",
        "pathlib"
    ],
    "pathlib": [
        "fnmatch",
        "pathlib.PureWindowsPath",
        "pathlib._PreciseSelector",
        "pathlib._RecursiveWildcardSelector",
        "pathlib.PurePosixPath",
        "ntpath",
        "pathlib.Path",
        "collections.abc",
        "urllib.parse",
        "pathlib.PosixPath",
        "functools.lru_cache",
        "pathlib._NormalAccessor",
        "pathlib._PathParents",
        "pathlib._TerminatingSelector",
        "stat",
        "functools._lru_cache_wrapper.wrapper",
        "pathlib._Accessor",
        "pathlib._Flavour",
        "functools.lru_cache.decorating_function",
        "pathlib._WindowsFlavour",
        "pathlib._PosixFlavour",
        "functools",
        "re",
        "<builtin>.hasattr",
        "pathlib._WildcardSelector",
        "pathlib.WindowsPath",
        "pathlib.PurePath",
        "posixpath",
        "pathlib._Selector",
        "os",
        "operator",
        "io"
    ],
    "pathlib._Flavour": [],
    "pathlib._WindowsFlavour": [
        "<builtin>.range",
        "<builtin>.set"
    ],
    "pathlib._PosixFlavour": [],
    "pathlib._Accessor": [],
    "pathlib._NormalAccessor": [
        "<builtin>.hasattr",
        "<builtin>.staticmethod"
    ],
    "pathlib._Selector": [],
    "pathlib._TerminatingSelector": [],
    "pathlib._PreciseSelector": [],
    "pathlib._WildcardSelector": [],
    "pathlib._RecursiveWildcardSelector": [],
    "pathlib._PathParents": [],
    "pathlib.PurePath": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "operator.attrgetter.__init__"
    ],
    "operator.attrgetter.__init__": [
        "<builtin>.isinstance",
        "<builtin>.map",
        "<builtin>.tuple",
        "<str>.split",
        "<builtin>.TypeError"
    ],
    "pathlib.PurePosixPath": [],
    "pathlib.PureWindowsPath": [],
    "pathlib.Path": [
        "<builtin>.classmethod"
    ],
    "pathlib.PosixPath": [],
    "pathlib.WindowsPath": [],
    "cryptography.hazmat.primitives.asymmetric": [],
    "paramiko.pkey.UnknownKeyType": [],
    "paramiko.pkey.PKey": [
        "re.compile",
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "paramiko.pkey.PublicBlob": [
        "<builtin>.classmethod"
    ],
    "paramiko.dsskey.DSSKey": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "paramiko.ed25519key": [
        "paramiko.message",
        "bcrypt",
        "paramiko.ed25519key.Ed25519Key",
        "paramiko.pkey",
        "cryptography.hazmat.primitives.ciphers",
        "cryptography.hazmat.backends",
        "paramiko.util",
        "paramiko.ssh_exception",
        "nacl.signing"
    ],
    "nacl.signing": [
        "nacl.signing.SignedMessage",
        "nacl.encoding",
        "nacl.exceptions",
        "nacl.signing.SigningKey",
        "nacl.signing.VerifyKey",
        "nacl.public",
        "nacl.bindings",
        "typing",
        "nacl.utils"
    ],
    "nacl.bindings": [
        "nacl.bindings.crypto_secretbox",
        "nacl.bindings.utils",
        "nacl.bindings.crypto_aead",
        "nacl.bindings.randombytes",
        "nacl.bindings.crypto_core",
        "nacl.bindings.crypto_hash",
        "nacl.bindings.crypto_secretstream",
        "nacl.bindings.crypto_sign",
        "nacl.bindings.sodium_core",
        "nacl.bindings.crypto_box",
        "nacl.bindings.crypto_scalarmult",
        "nacl.bindings.crypto_kx",
        "nacl.bindings.crypto_pwhash",
        "nacl.bindings.crypto_generichash",
        "nacl.bindings.crypto_shorthash",
        "nacl.bindings.sodium_core.sodium_init"
    ],
    "nacl.bindings.crypto_aead": [
        "nacl.exceptions",
        "nacl._sodium",
        "typing"
    ],
    "nacl.exceptions": [
        "nacl.exceptions.CryptoError",
        "nacl.exceptions.CryptPrefixError",
        "nacl.exceptions.AssertionError",
        "typing",
        "nacl.exceptions.BadSignatureError",
        "nacl.exceptions.TypeError",
        "nacl.exceptions.InvalidkeyError",
        "nacl.exceptions.RuntimeError",
        "nacl.exceptions.UnavailableError",
        "nacl.exceptions.ValueError"
    ],
    "nacl.exceptions.CryptoError": [],
    "nacl.exceptions.BadSignatureError": [],
    "nacl.exceptions.RuntimeError": [],
    "nacl.exceptions.AssertionError": [],
    "nacl.exceptions.TypeError": [],
    "nacl.exceptions.ValueError": [],
    "nacl.exceptions.InvalidkeyError": [],
    "nacl.exceptions.CryptPrefixError": [],
    "nacl.exceptions.UnavailableError": [],
    "nacl._sodium": [],
    "nacl.bindings.crypto_box": [
        "nacl.exceptions",
        "nacl._sodium",
        "typing"
    ],
    "nacl.bindings.crypto_core": [
        "nacl.exceptions",
        "nacl._sodium",
        "<builtin>.bool"
    ],
    "nacl.bindings.crypto_generichash": [
        "nacl.bindings.crypto_generichash.Blake2State",
        "nacl.exceptions",
        "typing",
        "nacl._sodium",
        "typing.TypeVar.__init__"
    ],
    "nacl.bindings.crypto_generichash.Blake2State": [],
    "nacl.bindings.crypto_hash": [
        "nacl.exceptions",
        "nacl._sodium"
    ],
    "nacl.bindings.crypto_kx": [
        "nacl.exceptions",
        "nacl._sodium",
        "typing"
    ],
    "nacl.bindings.crypto_pwhash": [
        "<builtin>.bool",
        "nacl.exceptions",
        "nacl._sodium",
        "typing"
    ],
    "nacl.bindings.crypto_scalarmult": [
        "nacl.exceptions",
        "nacl._sodium",
        "<builtin>.bool"
    ],
    "nacl.bindings.crypto_secretbox": [
        "nacl.exceptions",
        "nacl._sodium"
    ],
    "nacl.bindings.crypto_secretstream": [
        "nacl.exceptions",
        "nacl.bindings.crypto_secretstream.crypto_secretstream_xchacha20poly1305_state",
        "nacl._sodium",
        "typing"
    ],
    "nacl.bindings.crypto_secretstream.crypto_secretstream_xchacha20poly1305_state": [],
    "nacl.bindings.crypto_shorthash": [
        "nacl.exceptions",
        "nacl._sodium",
        "<builtin>.bool"
    ],
    "nacl.bindings.crypto_sign": [
        "nacl.bindings.crypto_sign.crypto_sign_ed25519ph_state",
        "nacl.exceptions",
        "nacl._sodium",
        "typing"
    ],
    "nacl.bindings.crypto_sign.crypto_sign_ed25519ph_state": [],
    "nacl.bindings.randombytes": [
        "nacl.exceptions",
        "nacl._sodium"
    ],
    "nacl.bindings.sodium_core": [
        "nacl.exceptions",
        "nacl._sodium"
    ],
    "nacl.bindings.utils": [
        "nacl.exceptions",
        "nacl._sodium"
    ],
    "nacl.bindings.sodium_core.sodium_init": [],
    "nacl.encoding": [
        "nacl.encoding.URLSafeBase64Encoder",
        "nacl.encoding.Base16Encoder",
        "nacl.encoding.Base32Encoder",
        "nacl.encoding.Encodable",
        "typing",
        "nacl.encoding._Encoder",
        "nacl.encoding.HexEncoder",
        "nacl.encoding.RawEncoder",
        "base64",
        "nacl.encoding.Base64Encoder",
        "abc",
        "binascii"
    ],
    "nacl.encoding._Encoder": [
        "<builtin>.staticmethod",
        "abc.abstractmethod"
    ],
    "nacl.encoding.RawEncoder": [
        "<builtin>.staticmethod"
    ],
    "nacl.encoding.HexEncoder": [
        "<builtin>.staticmethod"
    ],
    "nacl.encoding.Base16Encoder": [
        "<builtin>.staticmethod"
    ],
    "nacl.encoding.Base32Encoder": [
        "<builtin>.staticmethod"
    ],
    "nacl.encoding.Base64Encoder": [
        "<builtin>.staticmethod"
    ],
    "nacl.encoding.URLSafeBase64Encoder": [
        "<builtin>.staticmethod"
    ],
    "nacl.encoding.Encodable": [],
    "nacl.public": [
        "nacl.encoding",
        "nacl.exceptions",
        "nacl.public.PublicKey",
        "nacl.bindings",
        "typing",
        "nacl.utils",
        "nacl.public.PrivateKey",
        "nacl.public.Box",
        "typing.TypeVar.__init__",
        "nacl.public.SealedBox"
    ],
    "nacl.utils": [
        "nacl.encoding",
        "nacl.utils.StringFixer",
        "nacl.bindings",
        "typing",
        "os",
        "nacl.utils.EncryptedMessage",
        "typing.TypeVar.__init__"
    ],
    "nacl.utils.EncryptedMessage": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "nacl.utils.StringFixer": [],
    "nacl.public.PublicKey": [],
    "nacl.public.PrivateKey": [
        "<builtin>.classmethod"
    ],
    "nacl.public.Box": [
        "<builtin>.classmethod"
    ],
    "nacl.public.SealedBox": [],
    "nacl.signing.SignedMessage": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "nacl.signing.VerifyKey": [],
    "nacl.signing.SigningKey": [
        "<builtin>.classmethod"
    ],
    "paramiko.ed25519key.Ed25519Key": [
        "<builtin>.property"
    ],
    "paramiko.kex_curve25519": [
        "paramiko.message",
        "cryptography.hazmat.primitives.serialization",
        "paramiko.ssh_exception",
        "paramiko.common",
        "<builtin>.range",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.constant_time",
        "paramiko.common.byte_chr",
        "cryptography.hazmat.primitives.asymmetric.x25519",
        "hashlib",
        "paramiko.kex_curve25519.KexCurve25519",
        "binascii"
    ],
    "paramiko.kex_curve25519.KexCurve25519": [
        "<builtin>.classmethod"
    ],
    "paramiko.kex_gex": [
        "paramiko.message",
        "paramiko.util",
        "paramiko.common",
        "paramiko.ssh_exception",
        "os",
        "<builtin>.range",
        "paramiko.common.byte_chr",
        "paramiko.kex_gex.KexGexSHA256",
        "paramiko.kex_gex.KexGex",
        "hashlib"
    ],
    "paramiko.kex_gex.KexGex": [],
    "paramiko.kex_gex.KexGexSHA256": [],
    "paramiko.kex_group1": [
        "paramiko.message",
        "paramiko.util",
        "paramiko.common",
        "paramiko.ssh_exception",
        "os",
        "<builtin>.range",
        "paramiko.common.byte_chr",
        "paramiko.kex_group1.KexGroup1",
        "hashlib"
    ],
    "paramiko.kex_group1.KexGroup1": [],
    "paramiko.kex_group14": [
        "paramiko.kex_group1",
        "paramiko.kex_group14.KexGroup14SHA256",
        "hashlib",
        "paramiko.kex_group14.KexGroup14"
    ],
    "paramiko.kex_group14.KexGroup14": [],
    "paramiko.kex_group14.KexGroup14SHA256": [],
    "paramiko.kex_group16": [
        "paramiko.kex_group1",
        "paramiko.kex_group16.KexGroup16SHA512",
        "hashlib"
    ],
    "paramiko.kex_group16.KexGroup16SHA512": [],
    "paramiko.kex_ecdh_nist": [
        "paramiko.message",
        "binascii",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.primitives.serialization",
        "paramiko.kex_ecdh_nist.KexNistp521",
        "paramiko.ssh_exception",
        "paramiko.common",
        "cryptography.hazmat.backends",
        "<builtin>.range",
        "paramiko.kex_ecdh_nist.KexNistp256",
        "paramiko.common.byte_chr",
        "paramiko.kex_ecdh_nist.KexNistp384",
        "hashlib"
    ],
    "paramiko.kex_ecdh_nist.KexNistp256": [],
    "paramiko.kex_ecdh_nist.KexNistp384": [],
    "paramiko.kex_ecdh_nist.KexNistp521": [],
    "paramiko.kex_gss": [
        "paramiko.message",
        "paramiko.util",
        "paramiko.common",
        "paramiko.ssh_exception",
        "os",
        "<builtin>.range",
        "paramiko.common.byte_chr",
        "paramiko.kex_gss.KexGSSGroup1",
        "paramiko.kex_gss.KexGSSGroup14",
        "paramiko.kex_gss.NullHostKey",
        "paramiko.kex_gss.KexGSSGex",
        "hashlib"
    ],
    "paramiko.kex_gss.KexGSSGroup1": [
        "paramiko.common.byte_chr"
    ],
    "paramiko.kex_gss.KexGSSGroup14": [],
    "paramiko.kex_gss.KexGSSGex": [],
    "paramiko.kex_gss.NullHostKey": [],
    "paramiko.packet": [
        "paramiko.message",
        "paramiko.util",
        "threading",
        "paramiko.common",
        "os",
        "paramiko.ssh_exception",
        "paramiko.packet.NeedRekeyException",
        "struct",
        "paramiko.packet.Packetizer",
        "socket",
        "hmac"
    ],
    "paramiko.packet.NeedRekeyException": [],
    "paramiko.packet.Packetizer": [
        "<builtin>.pow",
        "<builtin>.property"
    ],
    "<builtin>.pow": [],
    "paramiko.primes": [
        "paramiko.primes.ModulusPack",
        "paramiko.util",
        "paramiko.common",
        "paramiko.ssh_exception",
        "os"
    ],
    "paramiko.primes.ModulusPack": [],
    "paramiko.rsakey": [
        "paramiko.message",
        "paramiko.pkey",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.backends",
        "cryptography.hazmat.primitives.asymmetric.padding",
        "paramiko.ssh_exception",
        "cryptography.exceptions",
        "cryptography.hazmat.primitives.asymmetric.rsa",
        "paramiko.rsakey.RSAKey",
        "cryptography.hazmat.primitives.hashes"
    ],
    "paramiko.rsakey.RSAKey": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "paramiko.ecdsakey": [
        "paramiko.message",
        "cryptography.hazmat.primitives.asymmetric.ec",
        "cryptography.hazmat.primitives.asymmetric.utils",
        "paramiko.pkey",
        "cryptography.hazmat.primitives.serialization",
        "paramiko.ecdsakey._ECDSACurveSet",
        "cryptography.hazmat.backends",
        "paramiko.common",
        "paramiko.ssh_exception",
        "paramiko.util",
        "cryptography.exceptions",
        "paramiko.ecdsakey.ECDSAKey",
        "paramiko.ecdsakey._ECDSACurve",
        "cryptography.hazmat.primitives.hashes"
    ],
    "paramiko.ecdsakey._ECDSACurve": [],
    "paramiko.ecdsakey._ECDSACurveSet": [],
    "paramiko.ecdsakey.ECDSAKey": [
        "<builtin>.property",
        "paramiko.ecdsakey._ECDSACurve.__init__",
        "<builtin>.classmethod",
        "paramiko.ecdsakey._ECDSACurveSet.__init__"
    ],
    "paramiko.ecdsakey._ECDSACurve.__init__": [],
    "paramiko.ecdsakey._ECDSACurveSet.__init__": [],
    "paramiko.sftp_client": [
        "paramiko.message",
        "paramiko.sftp_client.SFTP",
        "paramiko.sftp_attr",
        "paramiko.sftp_file",
        "paramiko.util",
        "threading",
        "stat",
        "os",
        "weakref",
        "paramiko.common",
        "paramiko.sftp",
        "paramiko.channel",
        "paramiko.ssh_exception",
        "paramiko.sftp_client.SFTPClient",
        "binascii"
    ],
    "paramiko.sftp_attr": [
        "paramiko.sftp_attr.SFTPAttributes",
        "paramiko.common",
        "stat"
    ],
    "paramiko.sftp_attr.SFTPAttributes": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "paramiko.sftp_file": [
        "binascii",
        "paramiko.sftp_attr",
        "paramiko.sftp_file.SFTPFile",
        "paramiko.util",
        "threading",
        "paramiko.common",
        "paramiko.file",
        "paramiko.sftp",
        "collections",
        "socket"
    ],
    "paramiko.sftp_file.SFTPFile": [],
    "paramiko.sftp_client.SFTPClient": [
        "<builtin>.classmethod"
    ],
    "paramiko.sftp_client.SFTP": [],
    "paramiko.transport.Transport": [
        "paramiko.kex_curve25519.KexCurve25519.is_available",
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.object"
    ],
    "paramiko.kex_curve25519.KexCurve25519.is_available": [
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.generate"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.generate": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_supported",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_generate_key",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x25519_supported": [],
    "cryptography.exceptions.UnsupportedAlgorithm.__init__": [
        "<builtin>.super"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x25519_generate_key": [],
    "paramiko.transport.SecurityOptions": [
        "<builtin>.property"
    ],
    "paramiko.transport.ChannelMap": [],
    "paramiko.transport.ServiceRequestingTransport": [],
    "paramiko.client": [
        "paramiko.transport",
        "warnings",
        "paramiko.agent",
        "paramiko.ecdsakey",
        "inspect",
        "paramiko.client.SSHClient",
        "paramiko.config",
        "paramiko.ssh_exception",
        "paramiko.util",
        "paramiko.client.AutoAddPolicy",
        "paramiko.client.MissingHostKeyPolicy",
        "paramiko.client.WarningPolicy",
        "socket",
        "paramiko.dsskey",
        "paramiko.rsakey",
        "binascii",
        "paramiko.hostkeys",
        "paramiko.client.RejectPolicy",
        "getpass",
        "paramiko.ed25519key",
        "paramiko.common",
        "os"
    ],
    "paramiko.agent": [
        "paramiko.agent.AgentClientProxy",
        "paramiko.agent.AgentProxyThread",
        "threading",
        "<builtin>.list",
        "paramiko.agent.AgentKey",
        "paramiko.message",
        "paramiko.ssh_exception",
        "paramiko.util",
        "stat",
        "tempfile",
        "<map>.items",
        "paramiko.agent.AgentSSH",
        "socket",
        "logging",
        "paramiko.pkey",
        "paramiko.agent.AgentLocalProxy",
        "paramiko.agent.AgentServerProxy",
        "paramiko.common.byte_chr",
        "paramiko.agent.AgentRequestHandler",
        "paramiko.agent.AgentRemoteProxy",
        "paramiko.agent.Agent",
        "paramiko.common",
        "os",
        "struct",
        "select"
    ],
    "tempfile": [
        "tempfile._RandomNameSequence",
        "shutil",
        "tempfile.SpooledTemporaryFile",
        "warnings",
        "os",
        "functools",
        "random",
        "weakref",
        "tempfile.TemporaryDirectory",
        "tempfile._TemporaryFileCloser",
        "tempfile._TemporaryFileWrapper",
        "io",
        "<builtin>.hasattr"
    ],
    "tempfile._RandomNameSequence": [
        "<builtin>.property"
    ],
    "tempfile._TemporaryFileCloser": [],
    "tempfile._TemporaryFileWrapper": [],
    "tempfile.SpooledTemporaryFile": [
        "<builtin>.property"
    ],
    "tempfile.TemporaryDirectory": [
        "<builtin>.classmethod"
    ],
    "paramiko.agent.AgentSSH": [],
    "paramiko.agent.AgentProxyThread": [],
    "paramiko.agent.AgentLocalProxy": [],
    "paramiko.agent.AgentRemoteProxy": [],
    "paramiko.agent.AgentClientProxy": [],
    "paramiko.agent.AgentServerProxy": [],
    "paramiko.agent.AgentRequestHandler": [],
    "paramiko.agent.Agent": [],
    "paramiko.agent.AgentKey": [
        "<builtin>.property"
    ],
    "paramiko.hostkeys": [
        "paramiko.pkey",
        "paramiko.hostkeys.InvalidHostKey",
        "paramiko.hostkeys.HostKeyEntry",
        "paramiko.util",
        "paramiko.ssh_exception",
        "os",
        "paramiko.hostkeys.HostKeys",
        "re",
        "hashlib",
        "base64",
        "collections.abc",
        "binascii",
        "hmac"
    ],
    "paramiko.hostkeys.HostKeys": [
        "<builtin>.staticmethod"
    ],
    "paramiko.hostkeys.InvalidHostKey": [],
    "paramiko.hostkeys.HostKeyEntry": [
        "<builtin>.classmethod"
    ],
    "paramiko.client.SSHClient": [],
    "paramiko.client.MissingHostKeyPolicy": [],
    "paramiko.client.AutoAddPolicy": [],
    "paramiko.client.RejectPolicy": [],
    "paramiko.client.WarningPolicy": [],
    "paramiko.auth_strategy": [
        "paramiko.auth_strategy.InMemoryPrivateKey",
        "paramiko.auth_strategy.AuthSource",
        "paramiko.auth_strategy.AuthFailure",
        "paramiko.util",
        "paramiko.agent",
        "paramiko.ssh_exception",
        "paramiko.auth_strategy.PrivateKey",
        "paramiko.auth_strategy.OnDiskPrivateKey",
        "paramiko.auth_strategy.Password",
        "collections.namedtuple",
        "paramiko.auth_strategy.AuthStrategy",
        "paramiko.auth_strategy.NoneAuth",
        "paramiko.auth_strategy.AuthResult",
        "collections"
    ],
    "paramiko.auth_strategy.AuthSource": [],
    "paramiko.auth_strategy.NoneAuth": [],
    "paramiko.auth_strategy.Password": [],
    "paramiko.auth_strategy.PrivateKey": [],
    "paramiko.auth_strategy.InMemoryPrivateKey": [],
    "paramiko.auth_strategy.OnDiskPrivateKey": [],
    "paramiko.auth_strategy.AuthResult": [],
    "paramiko.auth_strategy.AuthFailure": [],
    "paramiko.auth_strategy.AuthStrategy": [],
    "paramiko.sftp_server": [
        "paramiko.sftp_handle",
        "paramiko.sftp_attr",
        "paramiko.sftp_si",
        "paramiko.util",
        "paramiko.common",
        "os",
        "paramiko.sftp_server.SFTPServer",
        "paramiko.sftp",
        "paramiko.server",
        "hashlib"
    ],
    "paramiko.sftp_si": [
        "paramiko.sftp_si.SFTPServerInterface",
        "os",
        "paramiko.sftp"
    ],
    "paramiko.sftp_si.SFTPServerInterface": [],
    "paramiko.sftp_server.SFTPServer": [
        "<builtin>.staticmethod"
    ],
    "paramiko.sftp_handle": [
        "paramiko.util",
        "paramiko.sftp_handle.SFTPHandle",
        "os",
        "paramiko.sftp",
        "paramiko.sftp_server"
    ],
    "paramiko.sftp_handle.SFTPHandle": [],
    "paramiko.proxy": [
        "subprocess",
        "paramiko.ssh_exception",
        "paramiko.util",
        "signal",
        "os",
        "shlex",
        "select",
        "paramiko.proxy.ProxyCommand",
        "socket"
    ],
    "signal": [
        "functools.wraps",
        "enum",
        "functools",
        "<builtin>.globals"
    ],
    "subprocess": [
        "contextlib",
        "warnings",
        "threading",
        "selectors",
        "subprocess._use_posix_spawn",
        "subprocess.STARTUPINFO",
        "subprocess.CalledProcessError",
        "subprocess.TimeoutExpired",
        "subprocess.Handle",
        "subprocess.Popen",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "subprocess.SubprocessError",
        "signal",
        "os",
        "select",
        "io",
        "subprocess.CompletedProcess",
        "_posixsubprocess"
    ],
    "_posixsubprocess": [],
    "subprocess.SubprocessError": [],
    "subprocess.CalledProcessError": [
        "<builtin>.property"
    ],
    "subprocess.TimeoutExpired": [
        "<builtin>.property"
    ],
    "subprocess.STARTUPINFO": [],
    "subprocess.Handle": [],
    "subprocess.CompletedProcess": [],
    "subprocess._use_posix_spawn": [
        "<builtin>.hasattr",
        "<builtin>.map",
        "<builtin>.tuple",
        "<builtin>.len"
    ],
    "subprocess.Popen": [
        "<builtin>.property"
    ],
    "paramiko.proxy.ProxyCommand": [
        "<builtin>.property"
    ],
    "queue": [
        "queue.Empty",
        "heapq",
        "queue.Full",
        "queue.Queue",
        "threading",
        "queue.PriorityQueue",
        "queue.LifoQueue",
        "queue._PySimpleQueue",
        "collections",
        "_queue"
    ],
    "_queue": [],
    "queue.Empty": [],
    "queue.Full": [],
    "queue.Queue": [],
    "queue.PriorityQueue": [],
    "queue.LifoQueue": [],
    "queue._PySimpleQueue": [],
    "socketserver": [
        "socketserver.BaseServer",
        "threading",
        "selectors",
        "socketserver.ThreadingUnixDatagramServer",
        "socketserver.ForkingTCPServer",
        "socketserver._SocketWriter",
        "socketserver._Threads",
        "socketserver.ForkingMixIn",
        "socketserver.UnixStreamServer",
        "socketserver._NoThreads",
        "extend",
        "socket",
        "socketserver.DatagramRequestHandler",
        "socketserver.UDPServer",
        "socketserver.StreamRequestHandler",
        "socketserver.ThreadingUnixStreamServer",
        "<builtin>.hasattr",
        "socketserver.TCPServer",
        "socketserver.BaseRequestHandler",
        "socketserver.ThreadingTCPServer",
        "socketserver.UnixDatagramServer",
        "os",
        "socketserver.ForkingUDPServer",
        "io",
        "socketserver.ThreadingMixIn",
        "socketserver.ThreadingUDPServer"
    ],
    "socketserver.BaseServer": [],
    "socketserver.TCPServer": [],
    "socketserver.UDPServer": [],
    "socketserver.ForkingMixIn": [],
    "socketserver._Threads": [],
    "socketserver._NoThreads": [],
    "socketserver.ThreadingMixIn": [],
    "socketserver.ForkingUDPServer": [],
    "socketserver.ForkingTCPServer": [],
    "socketserver.ThreadingUDPServer": [],
    "socketserver.ThreadingTCPServer": [],
    "socketserver.UnixStreamServer": [],
    "socketserver.UnixDatagramServer": [],
    "socketserver.ThreadingUnixStreamServer": [],
    "socketserver.ThreadingUnixDatagramServer": [],
    "socketserver.BaseRequestHandler": [],
    "socketserver.StreamRequestHandler": [],
    "socketserver._SocketWriter": [],
    "socketserver.DatagramRequestHandler": [],
    "logging.addLevelName": [
        "logging._acquireLock"
    ],
    "sshtunnel.BaseSSHTunnelForwarderError": [],
    "sshtunnel.HandlerSSHTunnelForwarderError": [],
    "sshtunnel._ForwardHandler": [],
    "sshtunnel._ForwardServer": [
        "<builtin>.property"
    ],
    "sshtunnel._ThreadingForwardServer": [],
    "sshtunnel._StreamForwardServer": [
        "<builtin>.property"
    ],
    "sshtunnel._ThreadingStreamForwardServer": [],
    "sshtunnel.SSHTunnelForwarder": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "sshtunnel._cli_main": [
        "sshtunnel._parse_arguments",
        "sshtunnel.open_tunnel",
        "sshtunnel._remove_none_values",
        "<builtin>.min"
    ],
    "sshtunnel._parse_arguments": [
        "logging.getLevelName",
        "argparse._ActionsContainer.add_argument",
        "argparse.ArgumentParser.__init__",
        "<builtin>.vars",
        "argparse.ArgumentParser.parse_args"
    ],
    "argparse.ArgumentParser.__init__": [
        "gettext.gettext",
        "ntpath.basename",
        "argparse._ActionsContainer.add_argument",
        "argparse._ActionsContainer.add_argument_group",
        "<builtin>.super",
        "argparse._ActionsContainer._add_container_actions",
        "posixpath.basename",
        "argparse._ActionsContainer.register"
    ],
    "gettext.gettext": [
        "gettext.dgettext"
    ],
    "gettext.dgettext": [
        "gettext.NullTranslations.gettext",
        "gettext.translation",
        "<map>.get"
    ],
    "gettext.translation": [
        "warnings.catch_warnings.__init__",
        "<builtin>.FileNotFoundError",
        "warnings",
        "copy",
        "gettext.NullTranslations.__init__",
        "<builtin>.open",
        "posixpath.abspath",
        "<map>.setdefault",
        "warnings.warn",
        "copy.copy",
        "ntpath.abspath",
        "gettext.find",
        "<map>.get"
    ],
    "gettext.find": [
        "gettext._expand_lang",
        "ntpath.join",
        "genericpath.exists",
        "posixpath.join",
        "append"
    ],
    "gettext._expand_lang": [
        "reverse",
        "locale.normalize",
        "<builtin>.range",
        "append"
    ],
    "locale.normalize": [
        "locale._append_modifier",
        "<str>.replace",
        "locale._replace_encoding",
        "<map>.get"
    ],
    "locale._append_modifier": [
        "locale._replace_encoding"
    ],
    "locale._replace_encoding": [
        "encodings.normalize_encoding",
        "<str>.replace",
        "<map>.get"
    ],
    "encodings.normalize_encoding": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "append"
    ],
    "reverse": [],
    "genericpath.exists": [],
    "gettext.NullTranslations.__init__": [
        "gettext.NullTranslations._parse"
    ],
    "gettext.NullTranslations._parse": [],
    "<builtin>.FileNotFoundError": [],
    "copy.copy": [
        "<map>",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.issubclass",
        "copy._copy_immutable",
        "<map>.get",
        "copy._reconstruct",
        "<builtin>.getattr"
    ],
    "<map>": [],
    "copy._copy_immutable": [],
    "copy._reconstruct": [
        "<builtin>.id",
        "<builtin>.isinstance",
        "<builtin>.setattr",
        "<builtin>.len",
        "copy.deepcopy",
        "<builtin>.hasattr"
    ],
    "copy.deepcopy": [
        "<builtin>.id",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<map>",
        "copy._deepcopy_atomic",
        "<builtin>.issubclass",
        "<map>.get",
        "copy._reconstruct",
        "<builtin>.getattr",
        "copy._keep_alive"
    ],
    "copy._deepcopy_atomic": [],
    "copy._keep_alive": [
        "<builtin>.id"
    ],
    "warnings.catch_warnings.__init__": [],
    "gettext.NullTranslations.gettext": [],
    "argparse._ActionsContainer.add_argument_group": [
        "argparse._ArgumentGroup.__init__"
    ],
    "argparse._ArgumentGroup.__init__": [
        "<builtin>.super"
    ],
    "argparse._ActionsContainer.register": [],
    "argparse._ActionsContainer.add_argument": [
        "<builtin>.callable",
        "argparse.ArgumentParser._get_formatter",
        "<builtin>.ValueError",
        "argparse._ActionsContainer._registry_get",
        "<builtin>.len",
        "argparse.ArgumentParser._add_action",
        "argparse._ActionsContainer._get_optional_kwargs",
        "<builtin>.hasattr",
        "argparse._ActionsContainer._pop_action_class",
        "argparse._ActionsContainer._get_positional_kwargs",
        "argparse._ActionsContainer._add_action"
    ],
    "argparse._ActionsContainer._get_optional_kwargs": [
        "<builtin>.dict",
        "gettext.gettext",
        "<builtin>.ValueError",
        "<builtin>.len",
        "append"
    ],
    "argparse._ActionsContainer._get_positional_kwargs": [
        "<builtin>.dict",
        "gettext.gettext",
        "<builtin>.TypeError"
    ],
    "argparse._ActionsContainer._pop_action_class": [
        "argparse._ActionsContainer._registry_get"
    ],
    "argparse._ActionsContainer._registry_get": [],
    "argparse.ArgumentParser._get_formatter": [],
    "argparse.ArgumentParser._add_action": [],
    "argparse._ActionsContainer._add_action": [
        "argparse._ActionsContainer._check_conflict"
    ],
    "argparse._ActionsContainer._check_conflict": [
        "argparse._ActionsContainer._get_handler",
        "append"
    ],
    "argparse._ActionsContainer._get_handler": [
        "<builtin>.getattr",
        "gettext.gettext",
        "<builtin>.ValueError"
    ],
    "argparse._ActionsContainer._add_container_actions": [
        "gettext.gettext",
        "<builtin>.ValueError",
        "argparse._ActionsContainer.add_argument_group",
        "<map>.get",
        "argparse._ActionsContainer.add_mutually_exclusive_group"
    ],
    "argparse._ActionsContainer.add_mutually_exclusive_group": [
        "argparse._MutuallyExclusiveGroup.__init__"
    ],
    "argparse._MutuallyExclusiveGroup.__init__": [
        "<builtin>.super"
    ],
    "argparse.ArgumentParser.parse_args": [
        "gettext.gettext",
        "argparse.ArgumentParser.parse_known_args",
        "argparse.ArgumentParser.error"
    ],
    "argparse.ArgumentParser.parse_known_args": [
        "argparse.Namespace.__init__",
        "<builtin>.setattr",
        "argparse.ArgumentParser.error",
        "<builtin>.delattr",
        "<builtin>.list",
        "<builtin>.str",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "argparse.ArgumentParser._parse_known_args"
    ],
    "argparse.Namespace.__init__": [
        "<builtin>.setattr"
    ],
    "argparse.ArgumentParser._parse_known_args": [
        "gettext.gettext",
        "argparse.ArgumentParser._parse_known_args.consume_positionals",
        "argparse.ArgumentParser._read_args_from_files",
        "<map>.setdefault",
        "argparse.ArgumentParser._get_positional_actions",
        "extend",
        "append",
        "<builtin>.setattr",
        "<builtin>.max",
        "argparse.ArgumentParser.error",
        "<builtin>.iter",
        "argparse.ArgumentParser._parse_known_args.consume_optional",
        "argparse.ArgumentParser._parse_optional",
        "argparse.ArgumentParser._get_value",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.enumerate",
        "<builtin>.set",
        "<builtin>.min"
    ],
    "argparse.ArgumentParser._read_args_from_files": [
        "argparse.ArgumentParser.convert_arg_line_to_args",
        "argparse.ArgumentParser._read_args_from_files",
        "<builtin>.open",
        "argparse.ArgumentParser.error",
        "<builtin>.str",
        "extend",
        "append"
    ],
    "argparse.ArgumentParser.convert_arg_line_to_args": [],
    "argparse.ArgumentParser.error": [
        "gettext.gettext",
        "argparse.ArgumentParser.print_usage",
        "argparse.ArgumentParser.exit"
    ],
    "argparse.ArgumentParser.print_usage": [
        "argparse.ArgumentParser._print_message",
        "argparse.ArgumentParser.format_usage"
    ],
    "argparse.ArgumentParser.format_usage": [
        "argparse.ArgumentParser._get_formatter"
    ],
    "argparse.ArgumentParser._print_message": [],
    "argparse.ArgumentParser.exit": [
        "argparse.ArgumentParser._print_message"
    ],
    "argparse.ArgumentParser._parse_optional": [
        "argparse.ArgumentParser._get_option_tuples",
        "gettext.gettext",
        "<builtin>.len",
        "argparse.ArgumentParser.error"
    ],
    "argparse.ArgumentParser._get_option_tuples": [
        "gettext.gettext",
        "argparse.ArgumentParser.error",
        "append"
    ],
    "argparse.ArgumentParser._get_positional_actions": [],
    "argparse.ArgumentParser._parse_known_args.consume_positionals": [
        "argparse.ArgumentParser._parse_known_args.take_action",
        "<builtin>.zip",
        "<builtin>.len",
        "argparse.ArgumentParser._match_arguments_partial"
    ],
    "argparse.ArgumentParser._match_arguments_partial": [
        "re.match",
        "argparse.ArgumentParser._get_nargs_pattern",
        "<builtin>.len",
        "<builtin>.range",
        "extend"
    ],
    "argparse.ArgumentParser._get_nargs_pattern": [
        "<str>.replace"
    ],
    "re.match": [
        "re._compile"
    ],
    "argparse.ArgumentParser._parse_known_args.take_action": [
        "gettext.gettext",
        "argparse.ArgumentError.__init__",
        "argparse.ArgumentParser._get_values",
        "argparse._get_action_name",
        "<map>.get"
    ],
    "argparse.ArgumentParser._get_values": [
        "<builtin>.isinstance",
        "remove",
        "<builtin>.len",
        "argparse.ArgumentParser._check_value",
        "argparse.ArgumentParser._get_value"
    ],
    "argparse.ArgumentParser._get_value": [
        "<builtin>.callable",
        "gettext.gettext",
        "argparse.ArgumentError.__init__",
        "<builtin>.repr",
        "argparse._ActionsContainer._registry_get",
        "<builtin>.str",
        "<builtin>.getattr"
    ],
    "argparse.ArgumentError.__init__": [
        "argparse._get_action_name"
    ],
    "argparse._get_action_name": [],
    "argparse.ArgumentParser._check_value": [
        "<builtin>.map",
        "gettext.gettext",
        "argparse.ArgumentError.__init__"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_optional": [
        "gettext.gettext",
        "argparse.ArgumentError.__init__",
        "argparse.ArgumentParser._parse_known_args.take_action",
        "argparse.ArgumentParser._match_argument",
        "append"
    ],
    "argparse.ArgumentParser._match_argument": [
        "gettext.gettext",
        "argparse.ArgumentError.__init__",
        "re.match",
        "argparse.ArgumentParser._get_nargs_pattern",
        "<builtin>.len",
        "<map>.get",
        "gettext.ngettext"
    ],
    "gettext.ngettext": [
        "gettext.dngettext"
    ],
    "gettext.dngettext": [
        "gettext.NullTranslations.ngettext",
        "gettext.translation",
        "<map>.get"
    ],
    "gettext.NullTranslations.ngettext": [],
    "<builtin>.delattr": [],
    "<builtin>.vars": [],
    "sshtunnel._remove_none_values": [
        "<builtin>.map",
        "<builtin>.list"
    ],
    "sshtunnel.open_tunnel": [
        "<builtin>.isinstance",
        "sshtunnel.SSHTunnelForwarder.__init__",
        "sshtunnel.create_logger",
        "warnings.warn",
        "sshtunnel.SSHTunnelForwarder._process_deprecated"
    ],
    "sshtunnel.create_logger": [
        "<builtin>.isinstance",
        "<builtin>.any",
        "sshtunnel._check_paramiko_handlers",
        "logging.getLogger",
        "logging.StreamHandler.__init__",
        "logging.captureWarnings",
        "sshtunnel._add_handler"
    ],
    "logging.getLogger": [],
    "sshtunnel._add_handler": [
        "logging.Handler.setFormatter",
        "logging.Handler.setLevel",
        "logging.Formatter.__init__"
    ],
    "logging.Handler.setLevel": [
        "logging._checkLevel"
    ],
    "logging.StrFormatStyle.validate": [
        "<builtin>.ValueError",
        "string.Formatter.parse",
        "<builtin>.set"
    ],
    "string.Formatter.parse": [],
    "logging.PercentStyle.validate": [
        "<builtin>.ValueError"
    ],
    "logging.StringTemplateStyle.validate": [
        "<builtin>.ValueError",
        "<builtin>.set"
    ],
    "logging.Handler.setFormatter": [],
    "sshtunnel._check_paramiko_handlers": [
        "logging.Logger.addHandler",
        "logging.Formatter.__init__",
        "logging.getLogger",
        "logging.StreamHandler.__init__",
        "logging.Handler.setFormatter"
    ],
    "logging.captureWarnings": [],
    "sshtunnel.SSHTunnelForwarder._process_deprecated": [
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "sshtunnel.SSHTunnelForwarder.__init__": [
        "<builtin>.isinstance",
        "sshtunnel.SSHTunnelForwarder._read_ssh_config",
        "<builtin>.ValueError",
        "sshtunnel.check_address",
        "sshtunnel.create_logger",
        "sshtunnel.SSHTunnelForwarder._consolidate_binds",
        "sshtunnel.SSHTunnelForwarder._consolidate_auth",
        "sshtunnel._check_paramiko_handlers",
        "sshtunnel.check_port",
        "sshtunnel.check_host",
        "sshtunnel.SSHTunnelForwarder._get_binds",
        "sshtunnel.SSHTunnelForwarder._process_deprecated"
    ],
    "sshtunnel.check_address": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.ValueError",
        "ntpath.dirname",
        "genericpath.exists",
        "sshtunnel.check_port",
        "sshtunnel.check_host",
        "posixpath.dirname"
    ],
    "sshtunnel.check_host": [
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "sshtunnel.check_port": [
        "<builtin>.isinstance"
    ],
    "sshtunnel.SSHTunnelForwarder._get_binds": [
        "<builtin>.isinstance",
        "<builtin>.enumerate",
        "<builtin>.ValueError",
        "<builtin>.len",
        "sshtunnel.check_addresses"
    ],
    "sshtunnel.check_addresses": [
        "<builtin>.isinstance",
        "sshtunnel.check_address",
        "<builtin>.AssertionError",
        "<builtin>.any",
        "<builtin>.all"
    ],
    "<builtin>.all": [],
    "<builtin>.AssertionError": [],
    "sshtunnel.SSHTunnelForwarder._consolidate_binds": [
        "<builtin>.ValueError",
        "extend",
        "<builtin>.len"
    ],
    "sshtunnel.SSHTunnelForwarder._read_ssh_config": [
        "ntpath.expanduser",
        "paramiko.config.SSHConfig.parse",
        "<builtin>.open",
        "posixpath.expanduser",
        "paramiko.config.SSHConfig.__init__",
        "paramiko.proxy.ProxyCommand.__init__",
        "paramiko.config.SSHConfig.lookup"
    ],
    "paramiko.config.SSHConfig.__init__": [],
    "ntpath.expanduser": [
        "<builtin>.isinstance",
        "ntpath._get_bothseps",
        "<str>.startswith",
        "<builtin>.len",
        "ntpath.join",
        "os._fspath",
        "ntpath.dirname"
    ],
    "posixpath.expanduser": [
        "<builtin>.isinstance",
        "<str>.startswith",
        "<builtin>.len",
        "posixpath._get_sep",
        "os._fspath",
        "<builtin>.str",
        "<str>.find"
    ],
    "paramiko.config.SSHConfig.parse": [
        "<str>.endswith",
        "<str>.startswith",
        "re.match",
        "paramiko.config.SSHConfig._get_hosts",
        "paramiko.config.SSHConfig._get_matches",
        "append"
    ],
    "paramiko.config.SSHConfig._get_matches": [
        "<builtin>.any",
        "<builtin>.filter",
        "<builtin>.list",
        "shlex.split",
        "append"
    ],
    "shlex.split": [
        "<builtin>.list",
        "shlex.shlex.__init__"
    ],
    "shlex.shlex.__init__": [
        "<builtin>.isinstance",
        "_collections.deque",
        "_io.StringIO"
    ],
    "<builtin>.filter": [],
    "paramiko.config.SSHConfig._get_hosts": [
        "shlex.split"
    ],
    "paramiko.config.SSHConfig.lookup": [
        "<builtin>.int",
        "paramiko.config.SSHConfig.canonicalize",
        "paramiko.config.SSHConfig._lookup"
    ],
    "paramiko.config.SSHConfig._lookup": [
        "paramiko.config.SSHConfig._expand_variables",
        "paramiko.config.SSHConfig._does_match",
        "paramiko.config.SSHConfig._pattern_matches"
    ],
    "paramiko.config.SSHConfig._pattern_matches": [
        "<builtin>.hasattr",
        "fnmatch.fnmatch"
    ],
    "fnmatch.fnmatch": [
        "ntpath.normcase",
        "fnmatch.fnmatchcase",
        "posixpath.normcase"
    ],
    "fnmatch.fnmatchcase": [
        "fnmatch._compile_pattern"
    ],
    "fnmatch._compile_pattern": [
        "re.compile",
        "<builtin>.isinstance",
        "<builtin>.str",
        "<builtin>.bytes",
        "fnmatch.translate"
    ],
    "fnmatch.translate": [
        "<str>.replace",
        "<builtin>.len",
        "re.escape",
        "re.sub",
        "<str>.find",
        "append"
    ],
    "re.sub": [
        "re._compile"
    ],
    "paramiko.config.SSHConfig._does_match": [
        "paramiko.config.SSHConfig._tokenize",
        "paramiko.config.SSHConfig._pattern_matches",
        "paramiko.config.SSHConfig._should_fail",
        "getpass.getuser",
        "append"
    ],
    "getpass.getuser": [],
    "paramiko.config.SSHConfig._should_fail": [],
    "paramiko.config.SSHConfig._tokenize": [
        "paramiko.config.LazyFqdn.__init__",
        "paramiko.config.SSHConfig._allowed_tokens",
        "ntpath.expanduser",
        "<builtin>.repr",
        "posixpath.expanduser",
        "<map>.items",
        "<builtin>.str",
        "getpass.getuser"
    ],
    "paramiko.config.SSHConfig._allowed_tokens": [
        "<map>.get"
    ],
    "paramiko.config.LazyFqdn.__init__": [],
    "paramiko.config.SSHConfig._expand_variables": [
        "<builtin>.isinstance",
        "<builtin>.enumerate"
    ],
    "paramiko.config.SSHConfig.canonicalize": [
        "paramiko.config._addressfamily_host_lookup"
    ],
    "paramiko.config._addressfamily_host_lookup": [
        "socket.getaddrinfo"
    ],
    "socket.getaddrinfo": [
        "append"
    ],
    "<str>.translate": [],
    "paramiko.proxy.ProxyCommand.__init__": [
        "shlex.split",
        "subprocess.Popen.__init__"
    ],
    "subprocess.Popen.__init__": [
        "<builtin>.isinstance",
        "_io.open",
        "<builtin>.ValueError",
        "subprocess.Popen._execute_child",
        "subprocess._cleanup",
        "_io.TextIOWrapper",
        "<builtin>.filter",
        "subprocess.Popen._get_handles",
        "warnings.warn",
        "<builtin>.bool",
        "<builtin>.hasattr",
        "<builtin>.TypeError",
        "append"
    ],
    "subprocess._cleanup": [
        "remove"
    ],
    "subprocess.Popen._get_handles": [
        "<builtin>.isinstance",
        "subprocess.Popen._get_devnull"
    ],
    "subprocess.Popen._get_devnull": [
        "<builtin>.hasattr"
    ],
    "_io.open": [],
    "subprocess.Popen._execute_child": [
        "<builtin>.list",
        "ntpath.dirname",
        "<builtin>.tuple",
        "<builtin>.issubclass",
        "<builtin>.TypeError",
        "subprocess.Popen._posix_spawn",
        "os.get_exec_path",
        "append",
        "<builtin>.int",
        "ntpath.join",
        "<builtin>.map",
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "<builtin>.hasattr",
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.set",
        "<builtin>.len",
        "posixpath.join",
        "<builtin>.sorted",
        "posixpath.dirname",
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.Popen._posix_spawn": [
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.getattr",
        "append"
    ],
    "subprocess.Popen._close_pipe_fds": [
        "<builtin>.getattr"
    ],
    "os.get_exec_path": [
        "warnings.catch_warnings.__init__",
        "warnings",
        "<str>.split"
    ],
    "subprocess.Popen._handle_exitstatus": [],
    "sshtunnel.SSHTunnelForwarder._consolidate_auth": [
        "<builtin>.isinstance",
        "ntpath.expanduser",
        "sshtunnel.SSHTunnelForwarder.get_keys",
        "<builtin>.ValueError",
        "sshtunnel.SSHTunnelForwarder.read_private_key_file",
        "posixpath.expanduser",
        "genericpath.exists"
    ],
    "sshtunnel.SSHTunnelForwarder.get_keys": [
        "ntpath.expanduser",
        "<map>.keys",
        "ntpath.join",
        "<builtin>.len",
        "sshtunnel.SSHTunnelForwarder.read_private_key_file",
        "posixpath.expanduser",
        "posixpath.join",
        "sshtunnel.SSHTunnelForwarder.get_agent_keys",
        "<builtin>.hasattr",
        "genericpath.isfile"
    ],
    "sshtunnel.SSHTunnelForwarder.get_agent_keys": [
        "<builtin>.list",
        "paramiko.agent.Agent.__init__",
        "paramiko.agent.AgentSSH.get_keys",
        "<builtin>.len"
    ],
    "paramiko.agent.Agent.__init__": [
        "paramiko.agent.AgentSSH._connect",
        "paramiko.agent.get_agent_connection",
        "paramiko.agent.AgentSSH.__init__"
    ],
    "paramiko.agent.AgentSSH.__init__": [],
    "paramiko.agent.get_agent_connection": [
        "socket.socket.__init__",
        "paramiko.win_openssh",
        "paramiko.win_pageant",
        "paramiko.win_pageant.can_talk_to_agent",
        "paramiko.win_pageant.PageantConnection.__init__",
        "paramiko.win_openssh.can_talk_to_agent",
        "paramiko.win_openssh.OpenSSHAgentConnection.__init__"
    ],
    "paramiko.win_pageant": [
        "paramiko._winapi",
        "ctypes.wintypes",
        "paramiko.util",
        "paramiko.common",
        "struct",
        "array",
        "paramiko.win_pageant.PageantConnection",
        "platform",
        "platform.architecture",
        "paramiko.win_pageant.COPYDATASTRUCT"
    ],
    "ctypes.wintypes": [
        "ctypes.wintypes.FILETIME",
        "ctypes.wintypes.VARIANT_BOOL",
        "ctypes.wintypes.MSG",
        "ctypes.wintypes.WIN32_FIND_DATAA",
        "ctypes.wintypes._SMALL_RECT",
        "ctypes",
        "ctypes.wintypes._COORD",
        "ctypes.wintypes.POINT",
        "ctypes.wintypes.RECT",
        "ctypes.wintypes.SIZE",
        "ctypes.wintypes.WIN32_FIND_DATAW"
    ],
    "ctypes": [
        "ctypes.HRESULT",
        "ctypes.LibraryLoader.__init__",
        "_ctypes",
        "ctypes.c_ushort",
        "ctypes.c_longlong",
        "ctypes.CFUNCTYPE",
        "ctypes.c_float",
        "<builtin>.Exception",
        "ctypes.c_char_p",
        "ctypes.c_uint",
        "ctypes.WinDLL",
        "ctypes.PYFUNCTYPE",
        "ctypes.CDLL",
        "ctypes._reset_cache",
        "ctypes.c_longdouble",
        "ctypes.c_short",
        "ctypes.c_long",
        "ctypes.c_ulong",
        "ctypes._endian",
        "ctypes.c_wchar",
        "<builtin>.int",
        "ctypes.OleDLL",
        "ctypes.c_bool",
        "ctypes.c_wchar_p",
        "ctypes._check_size",
        "ctypes.c_char",
        "ctypes.c_byte",
        "ctypes.LibraryLoader",
        "ctypes.c_int",
        "ctypes.py_object",
        "ctypes.c_double",
        "ctypes.c_void_p",
        "ctypes.c_ulonglong",
        "os",
        "ctypes.PyDLL",
        "struct",
        "ctypes.c_ubyte"
    ],
    "_ctypes": [],
    "<builtin>.Exception": [],
    "ctypes.py_object": [],
    "ctypes._check_size": [
        "struct",
        "<builtin>.SystemError"
    ],
    "ctypes.c_short": [],
    "ctypes.c_ushort": [],
    "ctypes.c_long": [],
    "ctypes.c_ulong": [],
    "ctypes.c_int": [],
    "ctypes.c_uint": [],
    "ctypes.c_float": [],
    "ctypes.c_double": [],
    "ctypes.c_longdouble": [],
    "ctypes.c_longlong": [],
    "ctypes.c_ulonglong": [],
    "ctypes.c_ubyte": [],
    "ctypes.c_byte": [],
    "ctypes.c_char": [],
    "ctypes.c_char_p": [],
    "ctypes.c_void_p": [],
    "ctypes.c_bool": [],
    "ctypes.c_wchar_p": [],
    "ctypes.c_wchar": [],
    "ctypes.CDLL": [],
    "ctypes.PyDLL": [],
    "ctypes.WinDLL": [],
    "ctypes.HRESULT": [],
    "ctypes.OleDLL": [],
    "ctypes.LibraryLoader": [],
    "ctypes.LibraryLoader.__init__": [],
    "ctypes.CFUNCTYPE": [
        "ctypes.CFUNCTYPE.CFunctionType",
        "<builtin>.ValueError"
    ],
    "ctypes.CFUNCTYPE.CFunctionType": [],
    "ctypes.PYFUNCTYPE": [
        "ctypes.PYFUNCTYPE.CFunctionType"
    ],
    "ctypes.PYFUNCTYPE.CFunctionType": [],
    "ctypes._endian": [
        "ctypes._endian.BigEndianStructure",
        "<builtin>.type",
        "ctypes",
        "ctypes._endian._swapped_meta"
    ],
    "ctypes._endian._swapped_meta": [],
    "ctypes._endian.BigEndianStructure": [],
    "ctypes._reset_cache": [
        "<map>.clear"
    ],
    "ctypes.wintypes.VARIANT_BOOL": [],
    "ctypes.wintypes.RECT": [],
    "ctypes.wintypes._SMALL_RECT": [],
    "ctypes.wintypes._COORD": [],
    "ctypes.wintypes.POINT": [],
    "ctypes.wintypes.SIZE": [],
    "ctypes.wintypes.FILETIME": [],
    "ctypes.wintypes.MSG": [],
    "ctypes.wintypes.WIN32_FIND_DATAA": [],
    "ctypes.wintypes.WIN32_FIND_DATAW": [],
    "platform": [
        "re.compile",
        "os",
        "collections.namedtuple",
        "re",
        "collections"
    ],
    "paramiko._winapi": [
        "paramiko._winapi.MemoryMap",
        "paramiko._winapi.SECURITY_ATTRIBUTES",
        "ctypes.wintypes",
        "paramiko.util",
        "paramiko._winapi.WindowsError",
        "paramiko._winapi.TokenInformationClass",
        "paramiko._winapi.TOKEN_USER",
        "paramiko._winapi.TokenAccess",
        "paramiko._winapi.SECURITY_DESCRIPTOR"
    ],
    "paramiko._winapi.WindowsError": [
        "<builtin>.property"
    ],
    "paramiko._winapi.MemoryMap": [],
    "paramiko._winapi.TokenAccess": [],
    "paramiko._winapi.TokenInformationClass": [],
    "paramiko._winapi.TOKEN_USER": [],
    "paramiko._winapi.SECURITY_DESCRIPTOR": [],
    "paramiko._winapi.SECURITY_ATTRIBUTES": [
        "<builtin>.property"
    ],
    "platform.architecture": [
        "<builtin>.str",
        "struct",
        "platform._syscmd_file"
    ],
    "platform._syscmd_file": [
        "<builtin>.dict",
        "subprocess.check_output",
        "subprocess",
        "platform._follow_symlinks"
    ],
    "platform._follow_symlinks": [
        "ntpath.join",
        "posixpath.islink",
        "ntpath.normpath",
        "posixpath.abspath",
        "ntpath.dirname",
        "posixpath.join",
        "ntpath.abspath",
        "ntpath.islink",
        "posixpath.normpath",
        "posixpath.dirname"
    ],
    "ntpath.islink": [
        "stat.S_ISLNK"
    ],
    "stat.S_ISLNK": [
        "stat.S_IFMT"
    ],
    "stat.S_IFMT": [],
    "posixpath.islink": [
        "stat.S_ISLNK"
    ],
    "ntpath.normpath": [
        "<str>.lstrip",
        "<builtin>.isinstance",
        "ntpath.splitdrive",
        "<str>.startswith",
        "<builtin>.len",
        "os._fspath",
        "<str>.split",
        "<str>.replace",
        "append"
    ],
    "<str>.lstrip": [],
    "subprocess.check_output": [
        "<builtin>.ValueError",
        "subprocess.run"
    ],
    "subprocess.run": [
        "<builtin>.ValueError",
        "subprocess.Popen.wait",
        "subprocess.CompletedProcess.__init__",
        "subprocess.Popen.__exit__",
        "subprocess.Popen.communicate",
        "subprocess.Popen.kill",
        "subprocess.CalledProcessError.__init__",
        "subprocess.Popen.__enter__",
        "subprocess.Popen.__init__",
        "subprocess.Popen.poll"
    ],
    "subprocess.Popen.__enter__": [],
    "subprocess.Popen.__exit__": [],
    "subprocess.Popen.communicate": [
        "subprocess.Popen._stdin_write",
        "<builtin>.ValueError",
        "subprocess.Popen._communicate",
        "subprocess.Popen.wait",
        "time.monotonic",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._wait",
        "<builtin>.min"
    ],
    "time.monotonic": [],
    "subprocess.Popen._communicate": [
        "subprocess.Popen._translate_newlines",
        "subprocess.Popen.wait",
        "selectors.SelectSelector.__init__",
        "<builtin>.RuntimeError",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._save_input",
        "<builtin>.memoryview",
        "subprocess.Popen._check_timeout"
    ],
    "subprocess.Popen._save_input": [],
    "selectors.SelectSelector.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "subprocess.Popen._remaining_time": [
        "time.monotonic"
    ],
    "subprocess.Popen._check_timeout": [
        "time.monotonic",
        "subprocess.TimeoutExpired.__init__"
    ],
    "subprocess.TimeoutExpired.__init__": [],
    "subprocess.Popen.wait": [
        "subprocess.Popen._wait",
        "time.monotonic",
        "subprocess.Popen._remaining_time",
        "<builtin>.min"
    ],
    "subprocess.Popen._wait": [
        "subprocess.Popen._try_wait",
        "<builtin>.min",
        "time.monotonic",
        "subprocess.TimeoutExpired.__init__",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.Popen._try_wait": [],
    "subprocess.Popen._translate_newlines": [],
    "subprocess.Popen._stdin_write": [],
    "subprocess.Popen.kill": [
        "subprocess.Popen.send_signal"
    ],
    "subprocess.Popen.send_signal": [],
    "subprocess.Popen.poll": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen._internal_poll": [
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.CalledProcessError.__init__": [],
    "subprocess.CompletedProcess.__init__": [],
    "paramiko.win_pageant.COPYDATASTRUCT": [],
    "paramiko.win_pageant.PageantConnection": [],
    "paramiko.win_openssh": [
        "paramiko.win_openssh.OpenSSHAgentConnection",
        "posixpath"
    ],
    "paramiko.win_openssh.OpenSSHAgentConnection": [],
    "paramiko.win_pageant.can_talk_to_agent": [
        "<builtin>.bool",
        "paramiko.win_pageant._get_pageant_window_object"
    ],
    "paramiko.win_pageant._get_pageant_window_object": [],
    "paramiko.win_openssh.can_talk_to_agent": [
        "<builtin>.any"
    ],
    "paramiko.win_openssh.OpenSSHAgentConnection.__init__": [],
    "paramiko.win_pageant.PageantConnection.__init__": [],
    "socket.socket.__init__": [],
    "paramiko.agent.AgentSSH._connect": [
        "<builtin>.tuple",
        "paramiko.agent.AgentSSH._send_message",
        "<builtin>.range",
        "append"
    ],
    "paramiko.agent.AgentSSH._send_message": [
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.get_byte",
        "<builtin>.ord",
        "paramiko.util.asbytes",
        "<builtin>.len",
        "paramiko.win_pageant.PageantConnection.send",
        "paramiko.win_openssh.OpenSSHAgentConnection.send",
        "paramiko.agent.AgentSSH._read_all"
    ],
    "paramiko.util.asbytes": [
        "paramiko.util.b",
        "paramiko.message.Message.asbytes"
    ],
    "paramiko.util.b": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "paramiko.win_openssh.OpenSSHAgentConnection.send": [],
    "paramiko.win_pageant.PageantConnection.send": [
        "paramiko.win_pageant._query_pageant"
    ],
    "paramiko.win_pageant._query_pageant": [
        "paramiko._winapi.MemoryMap.__init__",
        "paramiko._winapi.get_security_attributes_for_user",
        "paramiko.win_pageant._get_pageant_window_object"
    ],
    "paramiko._winapi.get_security_attributes_for_user": [
        "<builtin>.isinstance",
        "paramiko._winapi.SECURITY_ATTRIBUTES.__init__",
        "paramiko._winapi.get_current_user"
    ],
    "paramiko._winapi.get_current_user": [
        "paramiko._winapi.OpenProcessToken",
        "paramiko._winapi.GetTokenInformation"
    ],
    "paramiko._winapi.OpenProcessToken": [
        "paramiko._winapi.handle_nonzero_success"
    ],
    "paramiko._winapi.handle_nonzero_success": [
        "paramiko._winapi.WindowsError.__init__"
    ],
    "paramiko._winapi.WindowsError.__init__": [
        "paramiko._winapi.format_system_message",
        "<builtin>.super"
    ],
    "paramiko._winapi.format_system_message": [
        "paramiko._winapi.handle_nonzero_success"
    ],
    "paramiko._winapi.GetTokenInformation": [
        "paramiko._winapi.handle_nonzero_success"
    ],
    "paramiko._winapi.SECURITY_ATTRIBUTES.__init__": [
        "<builtin>.super"
    ],
    "paramiko._winapi.MemoryMap.__init__": [],
    "paramiko.agent.AgentSSH._read_all": [
        "paramiko.win_openssh.OpenSSHAgentConnection.recv",
        "<builtin>.len",
        "paramiko.win_pageant.PageantConnection.recv"
    ],
    "paramiko.win_openssh.OpenSSHAgentConnection.recv": [],
    "paramiko.win_pageant.PageantConnection.recv": [],
    "paramiko.message.Message.__init__": [
        "_io.BytesIO"
    ],
    "_io.BytesIO": [],
    "paramiko.message.Message.get_byte": [
        "paramiko.message.Message.get_bytes"
    ],
    "paramiko.message.Message.get_bytes": [
        "<builtin>.len"
    ],
    "paramiko.message.Message.asbytes": [],
    "paramiko.agent.AgentSSH.get_keys": [],
    "genericpath.isfile": [
        "stat.S_ISREG"
    ],
    "stat.S_ISREG": [
        "stat.S_IFMT"
    ],
    "sshtunnel.SSHTunnelForwarder.read_private_key_file": [
        "<builtin>.hasattr"
    ]
}