{
    "__future__": [
        "__future__._Feature.__init__",
        "__future__._Feature"
    ],
    "_collections_abc.Mapping.__contains__": [],
    "_collections_abc.Mapping.get": [],
    "_weakrefset._IterationGuard.__exit__": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "abc.ABCMeta.__instancecheck__": [
        "abc.ABCMeta.__subclasscheck__"
    ],
    "abc.ABCMeta.__subclasscheck__": [
        "_collections_abc.__subclasshook__",
        "abc.ABCMeta.__subclasscheck__"
    ],
    "_threading_local": [
        "_threading_local._localimpl",
        "contextlib.contextmanager",
        "_threading_local.local"
    ],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet.add",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset._IterationGuard.__init__": [
        "_weakref.ref"
    ],
    "_weakrefset": [
        "_weakrefset.WeakSet",
        "_weakrefset._IterationGuard"
    ],
    "_weakrefset.WeakSet.__init__": [
        "_weakrefset.WeakSet.update",
        "<builtin>.set",
        "_weakref.ref"
    ],
    "abc.ABCMeta.register": [
        "abc.ABCMeta.__subclasscheck__"
    ],
    "abc.__new__": [
        "typing.__init_subclass__"
    ],
    "argparse": [
        "argparse._VersionAction",
        "shutil",
        "argparse._HelpAction",
        "argparse._SubParsersAction",
        "argparse._StoreConstAction",
        "argparse.HelpFormatter",
        "argparse._ExtendAction",
        "argparse.ArgumentParser._get_value",
        "argparse._MutuallyExclusiveGroup",
        "argparse.ArgumentParser._get_nargs_pattern",
        "argparse._StoreTrueAction",
        "argparse._AppendConstAction",
        "argparse.ArgumentError",
        "argparse.ArgumentDefaultsHelpFormatter",
        "gettext",
        "argparse.Action",
        "argparse._AppendAction",
        "argparse.ArgumentTypeError",
        "argparse.Namespace",
        "argparse._ArgumentGroup",
        "argparse.RawTextHelpFormatter",
        "argparse.MetavarTypeHelpFormatter",
        "argparse.RawDescriptionHelpFormatter",
        "argparse._StoreFalseAction",
        "argparse.ArgumentParser",
        "argparse.FileType",
        "argparse._ActionsContainer",
        "argparse._StoreAction",
        "argparse._AttributeHolder",
        "argparse._CountAction"
    ],
    "argparse.ArgumentParser.__init__": [
        "argparse._ActionsContainer.register",
        "argparse._ActionsContainer.add_argument_group",
        "posixpath.basename",
        "argparse._ActionsContainer.add_argument",
        "<builtin>.super",
        "argparse._ActionsContainer.__init__",
        "gettext.gettext"
    ],
    "collections": [
        "collections.UserString",
        "collections._OrderedDictValuesView",
        "collections._OrderedDictKeysView",
        "keyword",
        "collections._OrderedDictItemsView",
        "collections._Link",
        "collections.UserList",
        "collections.UserDict",
        "collections.OrderedDict",
        "reprlib",
        "collections.Counter",
        "collections.ChainMap",
        "heapq",
        "operator"
    ],
    "contextlib": [
        "contextlib.nullcontext",
        "contextlib.closing",
        "contextlib.redirect_stdout",
        "contextlib.ContextDecorator",
        "functools",
        "contextlib.redirect_stderr",
        "contextlib.AsyncExitStack",
        "contextlib._RedirectStream",
        "contextlib._GeneratorContextManager",
        "contextlib._AsyncGeneratorContextManager",
        "contextlib.AbstractContextManager",
        "contextlib.suppress",
        "contextlib.AbstractAsyncContextManager",
        "contextlib._GeneratorContextManagerBase",
        "contextlib.ExitStack",
        "contextlib._BaseExitStack"
    ],
    "argparse.ArgumentParser._add_action": [
        "argparse._ArgumentGroup._add_action"
    ],
    "argparse.ArgumentParser._get_formatter": [
        "argparse.HelpFormatter.__init__"
    ],
    "argparse.ArgumentParser._get_positional_actions": [],
    "argparse.ArgumentParser._get_value": [
        "sshtunnel._bindlist",
        "<builtin>.str",
        "<builtin>.callable",
        "argparse._ActionsContainer._registry_get",
        "argparse.ArgumentError.__init__",
        "<builtin>.repr",
        "<builtin>.getattr",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._get_values": [
        "argparse.ArgumentParser._check_value",
        "<builtin>.isinstance",
        "argparse.ArgumentParser._get_value",
        "<list>.remove",
        "<builtin>.len"
    ],
    "argparse.ArgumentParser._match_argument": [
        "gettext.ngettext",
        "argparse.ArgumentError.__init__",
        "re.match",
        "<str>.group",
        "argparse.ArgumentParser._get_nargs_pattern",
        "<map>.get",
        "<builtin>.len",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._match_arguments_partial": [
        "<builtin>.range",
        "re.match",
        "<builtin>.len",
        "<list>.extend"
    ],
    "argparse.ArgumentParser._parse_known_args": [
        "<builtin>.hasattr",
        "argparse.consume_optional",
        "argparse.ArgumentParser._parse_known_args.consume_positionals",
        "argparse.ArgumentParser._get_value",
        "argparse.ArgumentParser._get_positional_actions",
        "<list>.extend",
        "<map>.setdefault",
        "<builtin>.getattr",
        "argparse.ArgumentParser._parse_known_args.consume_optional",
        "<builtin>.set",
        "<builtin>.isinstance",
        "argparse.ArgumentParser._read_args_from_files",
        "<builtin>.min",
        "<list>.append",
        "argparse.ArgumentParser.error",
        "<builtin>.enumerate",
        "<builtin>.max",
        "argparse.consume_positionals",
        "gettext.gettext",
        "argparse.ArgumentParser._parse_optional",
        "<builtin>.setattr",
        "<map>.extend",
        "<builtin>.iter"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_optional": [
        "argparse.ArgumentParser._parse_known_args.take_action",
        "argparse.ArgumentParser._match_argument",
        "argparse.ArgumentError.__init__",
        "<list>.append",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_positionals": [
        "argparse.ArgumentParser._parse_known_args.take_action",
        "<builtin>.zip",
        "<builtin>.len",
        "argparse.ArgumentParser._match_arguments_partial"
    ],
    "argparse.ArgumentParser._parse_known_args.take_action": [
        "argparse.ArgumentParser._get_values",
        "argparse._StoreAction.__call__",
        "argparse._get_action_name",
        "argparse.ArgumentError.__init__",
        "<map>.get",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.parse_args": [
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser.parse_known_args",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.parse_known_args": [
        "<builtin>.delattr",
        "<builtin>.hasattr",
        "<builtin>.str",
        "argparse.ArgumentParser.error",
        "<builtin>.list",
        "argparse.ArgumentParser._parse_known_args",
        "<builtin>.setattr",
        "<list>.extend",
        "<builtin>.getattr",
        "argparse.Namespace.__init__"
    ],
    "argparse.HelpFormatter.__init__": [
        "re.compile",
        "shutil.get_terminal_size",
        "argparse._Section.__init__",
        "<builtin>.min",
        "<builtin>.max",
        "argparse.HelpFormatter._Section.__init__"
    ],
    "argparse.HelpFormatter._format_args": [
        "<builtin>.range",
        "argparse.HelpFormatter._metavar_formatter.format",
        "<builtin>.ValueError",
        "argparse.HelpFormatter._metavar_formatter"
    ],
    "argparse._ActionsContainer.__init__": [
        "argparse._ActionsContainer.register",
        "<builtin>.super",
        "re.compile",
        "argparse._ActionsContainer._get_handler"
    ],
    "argparse._ActionsContainer._add_action": [
        "argparse._ActionsContainer._check_conflict"
    ],
    "argparse._ActionsContainer._pop_action_class": [
        "argparse._ActionsContainer._registry_get"
    ],
    "argparse._ActionsContainer.add_argument": [
        "<builtin>.hasattr",
        "<builtin>.callable",
        "<builtin>.len",
        "argparse._HelpAction.__init__",
        "argparse.ArgumentParser._get_formatter",
        "argparse.HelpFormatter._format_args",
        "argparse._StoreTrueAction.__init__",
        "argparse.ArgumentParser._add_action",
        "argparse._ActionsContainer._get_positional_kwargs",
        "argparse._ActionsContainer._registry_get",
        "argparse._VersionAction.__init__",
        "argparse._CountAction.__init__",
        "argparse._StoreAction.__init__",
        "<builtin>.ValueError",
        "argparse._StoreFalseAction.__init__",
        "argparse._ActionsContainer._get_optional_kwargs",
        "argparse._ActionsContainer._pop_action_class"
    ],
    "argparse._ActionsContainer.add_argument_group": [
        "argparse._ArgumentGroup.__init__"
    ],
    "argparse._ArgumentGroup.__init__": [
        "<builtin>.super",
        "argparse._ActionsContainer.__init__"
    ],
    "argparse._ArgumentGroup._add_action": [
        "<builtin>.super",
        "argparse._ActionsContainer._add_action"
    ],
    "argparse._CountAction.__init__": [
        "<builtin>.super",
        "argparse.Action.__init__"
    ],
    "argparse._HelpAction.__init__": [
        "<builtin>.super",
        "argparse.Action.__init__"
    ],
    "argparse._StoreAction.__init__": [
        "<builtin>.ValueError",
        "<builtin>.super",
        "argparse.Action.__init__"
    ],
    "argparse._StoreConstAction.__init__": [
        "<builtin>.super",
        "argparse.Action.__init__"
    ],
    "argparse._StoreFalseAction.__init__": [
        "<builtin>.super",
        "argparse._StoreConstAction.__init__"
    ],
    "argparse._StoreTrueAction.__init__": [
        "<builtin>.super",
        "argparse._StoreConstAction.__init__"
    ],
    "argparse._VersionAction.__init__": [
        "<builtin>.super",
        "argparse.Action.__init__"
    ],
    "argparse.consume_optional": [
        "argparse.ArgumentParser._match_argument",
        "argparse.take_action"
    ],
    "argparse.consume_positionals": [
        "argparse.take_action",
        "argparse.ArgumentParser._match_arguments_partial"
    ],
    "argparse.take_action": [
        "argparse._StoreAction.__call__",
        "argparse.ArgumentParser._get_values"
    ],
    "base64.decodebytes": [
        "base64._input_type_check"
    ],
    "bcrypt": [
        "hmac",
        "bcrypt.__about__"
    ],
    "bisect": [],
    "calendar": [
        "calendar._localized_day.__init__",
        "calendar.different_locale",
        "calendar.LocaleHTMLCalendar",
        "<builtin>.range",
        "calendar.Calendar.__init__",
        "calendar.TextCalendar",
        "calendar._localized_month.__init__",
        "calendar.HTMLCalendar",
        "calendar.LocaleTextCalendar",
        "calendar.IllegalMonthError",
        "calendar.main",
        "calendar.IllegalWeekdayError",
        "datetime.datetime.date"
    ],
    "calendar.Calendar.__init__": [
        "calendar.Calendar.setfirstweekday"
    ],
    "calendar._localized_day": [
        "<builtin>.range"
    ],
    "calendar._localized_month": [
        "<builtin>.range"
    ],
    "codecs.BufferedIncrementalDecoder.__init__": [
        "codecs.IncrementalDecoder.__init__"
    ],
    "collections.namedtuple": [
        "<builtin>.classmethod",
        "_collections._tuplegetter",
        "<str>.replace",
        "<builtin>.set",
        "collections.<lambda1>",
        "<builtin>.isinstance",
        "<builtin>.list",
        "<builtin>.type",
        "<str>.split",
        "<builtin>.dict",
        "<builtin>.len",
        "<builtin>.repr",
        "<builtin>.str",
        "<builtin>.TypeError",
        "<builtin>.enumerate",
        "<str>.join",
        "<builtin>.map",
        "<builtin>.exec",
        "<builtin>.reversed",
        "<builtin>.zip",
        "<builtin>.ValueError",
        "<builtin>.tuple",
        "<list>.split"
    ],
    "contextlib.contextmanager": [
        "functools.update_wrapper",
        "functools.wraps"
    ],
    "cryptography": [
        "warnings.warn",
        "cryptography.__about__"
    ],
    "cryptography.hazmat._oid": [
        "typing.inner",
        "cryptography.hazmat.primitives.hashes.HashAlgorithm.__init__"
    ],
    "cryptography.hazmat.backends.openssl.aead": [
        "typing.inner",
        "cryptography.hazmat.primitives.ciphers.aead"
    ],
    "cryptography.hazmat.backends.openssl.backend": [
        "cryptography.hazmat.backends.openssl.dh",
        "cryptography.hazmat.backends.openssl.backend.GetCipherByName",
        "cryptography.hazmat.backends.openssl.cmac",
        "cryptography.hazmat.backends.openssl.hashes",
        "cryptography.hazmat.backends.openssl.ec",
        "cryptography.hazmat.backends.openssl.hmac",
        "collections.namedtuple",
        "cryptography.hazmat.backends.openssl.rsa",
        "cryptography.hazmat.backends.openssl.ed25519",
        "cryptography.hazmat.backends.openssl.poly1305",
        "cryptography.hazmat.backends.openssl.x25519",
        "cryptography.hazmat.backends.openssl.dsa",
        "cryptography.hazmat.backends.openssl.backend.Backend.__init__",
        "cryptography.x509",
        "cryptography.hazmat.primitives.kdf.scrypt",
        "cryptography.hazmat.backends.openssl.x448",
        "cryptography.hazmat.backends.openssl.ed448",
        "cryptography.hazmat.primitives.serialization.pkcs12",
        "cryptography.hazmat.primitives.serialization.pkcs7"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend": [
        "typing.inner",
        "contextlib.contextmanager"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend._register_default_ciphers",
        "cryptography.hazmat.backends.openssl.backend.Backend.activate_osrandom_engine",
        "cryptography.hazmat.bindings.openssl.binding.Binding.__init__",
        "warnings.warn",
        "cryptography.hazmat.backends.openssl.backend.Backend._is_fips_enabled"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors": [
        "cryptography.hazmat.bindings.openssl.binding._consume_errors"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._create_evp_pkey_gc": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_non_null_from_algorithm": [
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_from_algorithm",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_from_der_traditional_key": [
        "<builtin>.TypeError",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_keygen_gc": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_private_key": [
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.getattr"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend._register_default_ciphers": [
        "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__init__",
        "<builtin>.type",
        "cryptography.hazmat.backends.openssl.backend.Backend.register_cipher_adapter"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.create_hash_ctx": [
        "cryptography.hazmat.backends.openssl.hashes._HashContext.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.create_symmetric_decryption_ctx": [
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.create_symmetric_encryption_ctx": [
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.load_der_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_from_der_traditional_key",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_private_key"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert": [
        "cryptography.hazmat.bindings.openssl.binding._openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x25519_generate_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_keygen_gc",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x25519_load_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_evp_pkey_gc",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.__init__",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__call__": [
        "cryptography.hazmat.primitives.ciphers.algorithms.key_size",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors"
    ],
    "cryptography.hazmat.backends.openssl.ciphers": [
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext",
        "cryptography.hazmat.backends.openssl.backend"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.__init__": [
        "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__call__",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.type",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce.nonce",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "<builtin>.len",
        "abc.ABCMeta.__instancecheck__"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.update": [
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.update_into",
        "<builtin>.bytearray",
        "cryptography.hazmat.backends.openssl.ciphers.update_into",
        "<builtin>.bytes",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.ciphers._CipherContext.update_into": [
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError",
        "<builtin>.min",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.ciphers.update_into": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.cmac": [
        "cryptography.hazmat.backends.openssl.cmac._CMACContext"
    ],
    "cryptography.hazmat.backends.openssl.dh": [
        "cryptography.hazmat.backends.openssl.dh._DHPublicKey",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey",
        "cryptography.hazmat.backends.openssl.dh._DHParameters"
    ],
    "cryptography.hazmat.backends.openssl.dsa": [
        "cryptography.hazmat.backends.openssl.dsa._DSAParameters",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey",
        "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey",
        "cryptography.hazmat.backends.openssl.utils"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.ec": [
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey"
    ],
    "cryptography.hazmat.backends.openssl.ed25519": [
        "ed25519._Ed25519PublicKey",
        "ed25519._Ed25519PrivateKey"
    ],
    "cryptography.hazmat.backends.openssl.ed448": [
        "ed448._Ed448PublicKey",
        "ed448._Ed448PrivateKey"
    ],
    "cryptography.hazmat.backends.openssl.hashes": [
        "cryptography.hazmat.backends.openssl.hashes._HashContext"
    ],
    "cryptography.hazmat.backends.openssl.hashes._HashContext.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_from_algorithm",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.hashes._HashContext.finalize": [
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "abc.ABCMeta.__instancecheck__",
        "cryptography.hazmat.backends.openssl.hashes.algorithm"
    ],
    "cryptography.hazmat.backends.openssl.hashes._HashContext.update": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.hmac": [
        "hmac._HMACContext"
    ],
    "cryptography.hazmat.backends.openssl.poly1305": [
        "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context"
    ],
    "cryptography.hazmat.backends.openssl.rsa": [
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey",
        "typing._VariadicGenericAlias.__getitem__",
        "typing.inner"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.__init__": [
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey._enable_blinding": [
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey._non_threadsafe_enable_blinding"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey._non_threadsafe_enable_blinding": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.private_numbers": [
        "cryptography.hazmat.backends.openssl.rsa.RSAPublicNumbers.__init__",
        "cryptography.hazmat.backends.openssl.rsa.RSAPrivateNumbers.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.sign": [
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_sign",
        "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey._enable_blinding"
    ],
    "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.rsa._rsa_sig_determine_padding": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError",
        "abc.ABCMeta.__instancecheck__"
    ],
    "cryptography.hazmat.backends.openssl.rsa._rsa_sig_setup": [
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_non_null_from_algorithm",
        "<builtin>.isinstance",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_determine_padding",
        "abc.ABCMeta.__instancecheck__"
    ],
    "cryptography.hazmat.backends.openssl.rsa._rsa_sig_sign": [
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_setup",
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "<builtin>.len"
    ],
    "cryptography.hazmat.backends.openssl.utils": [
        "typing.inner"
    ],
    "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm": [
        "cryptography.hazmat.primitives.hashes.Hash.__init__",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.hashes.Hash.update",
        "<builtin>.len",
        "cryptography.hazmat.primitives.hashes.Hash.finalize"
    ],
    "cryptography.hazmat.backends.openssl.utils._evp_pkey_derive": [
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.x25519": [
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.exchange": [
        "cryptography.hazmat.backends.openssl.utils._evp_pkey_derive",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "abc.ABCMeta.__instancecheck__"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.public_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.__init__"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey._raw_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert"
    ],
    "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.public_bytes": [
        "<builtin>.ValueError",
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey._raw_public_bytes"
    ],
    "cryptography.hazmat.backends.openssl.x448": [
        "cryptography.hazmat.backends.openssl.x448._X448PublicKey",
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey"
    ],
    "cryptography.hazmat.bindings.openssl._conditional": [
        "typing.inner"
    ],
    "cryptography.hazmat.bindings.openssl.binding": [
        "cryptography.hazmat.bindings.openssl.binding.init_static_locks",
        "cryptography.hazmat.bindings.openssl.binding._verify_openssl_version",
        "cryptography.hazmat.bindings.openssl.binding._OpenSSLError",
        "typing.inner",
        "cryptography.hazmat.bindings.openssl.binding.Binding",
        "typing.__new__",
        "cryptography.hazmat.bindings.openssl.binding._verify_package_version"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding.__init__": [
        "cryptography.hazmat.bindings.openssl.binding._ensure_ffi_initialized"
    ],
    "cryptography.hazmat.bindings.openssl.binding._ensure_ffi_initialized": [
        "cryptography.hazmat.bindings.openssl.binding.buildcryptography.hazmat.bindings.openssl._conditional_library",
        "cryptography.hazmat.bindings.openssl.binding._register_osrandom_engine",
        "cryptography.hazmat.bindings.openssl.binding._openssl_assert"
    ],
    "cryptography.hazmat.bindings.openssl.binding.buildcryptography.hazmat.bindings.openssl._conditional_library": [
        "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_fips",
        "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_ssl3_method",
        "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_ssl_st"
    ],
    "cryptography.hazmat.bindings.openssl.binding.init_static_locks": [
        "cryptography.hazmat.bindings.openssl.binding._ensure_ffi_initialized"
    ],
    "cryptography.hazmat.primitives._asymmetric": [
        "cryptography.hazmat.primitives._asymmetric.AsymmetricPadding"
    ],
    "cryptography.hazmat.primitives._cipheralgorithm": [
        "cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm",
        "cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm"
    ],
    "cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm": [
        "typing.inner"
    ],
    "cryptography.hazmat.primitives._serialization": [
        "cryptography.hazmat.primitives._serialization.PrivateFormat",
        "cryptography.hazmat.primitives._serialization.PBES",
        "cryptography.hazmat.primitives._serialization.Encoding",
        "enum.__new__",
        "cryptography.hazmat.primitives._serialization.ParameterFormat",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryption",
        "cryptography.hazmat.primitives._serialization._KeySerializationEncryption",
        "enum.__prepare__",
        "cryptography.hazmat.primitives._serialization.NoEncryption",
        "cryptography.hazmat.primitives._serialization.PublicFormat",
        "cryptography.hazmat.primitives._serialization.BestAvailableEncryption"
    ],
    "cryptography.hazmat.primitives._serialization.Encoding": [],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder": [
        "typing.inner"
    ],
    "cryptography.hazmat.primitives._serialization.PBES": [],
    "cryptography.hazmat.primitives._serialization.ParameterFormat": [],
    "cryptography.hazmat.primitives._serialization.PrivateFormat": [],
    "cryptography.hazmat.primitives._serialization.PublicFormat": [],
    "cryptography.hazmat.primitives._serialization._KeySerializationEncryption": [
        "typing.inner"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh": [
        "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey",
        "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers",
        "cryptography.hazmat.primitives.asymmetric.dh.DHParameters"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameters": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa": [
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameters",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameters": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey": [
        "typing.inner",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey": [
        "typing.inner",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec": [
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP256R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT283K1",
        "cryptography.hazmat.primitives.asymmetric.ec.ECDSA",
        "cryptography.hazmat.primitives.asymmetric.ec.ECDH",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1",
        "cryptography.hazmat._oid",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers",
        "typing.inner",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP512R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT571R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP384R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT163R2",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP256K1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.ECDSA": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm": [
        "typing.inner"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519": [
        "ed25519.Ed25519PublicKey",
        "ed25519.Ed25519PrivateKey",
        "abc.__new__"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448": [
        "ed448.Ed448PublicKey",
        "ed448.Ed448PrivateKey",
        "abc.__new__"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding": [
        "cryptography.hazmat.primitives.asymmetric.padding._MaxLength",
        "cryptography.hazmat.primitives.asymmetric.padding.MGF1",
        "cryptography.hazmat.primitives.asymmetric.padding.MGF",
        "cryptography.hazmat.primitives.asymmetric.padding._Auto",
        "cryptography.hazmat.primitives.asymmetric.padding.OAEP",
        "cryptography.hazmat.primitives.asymmetric.padding._DigestLength",
        "typing.inner",
        "cryptography.hazmat.primitives.asymmetric.padding.PSS",
        "abc.__new__",
        "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.OAEP": [
        "typing.inner"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.PSS": [
        "typing.inner"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa": [
        "typing._VariadicGenericAlias.__getitem__",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers",
        "abc.__new__"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey": [
        "typing.inner",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey": [
        "typing.inner",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.types": [
        "typing.inner"
    ],
    "cryptography.hazmat.primitives.asymmetric.utils": [
        "ryptography.hazmat.primitives.asymmetric.utils.Prehashed"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519": [
        "abc.__new__",
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey",
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.from_public_bytes": [
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_supported",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_load_public_bytes"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.generate": [
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_supported",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_generate_key"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448": [
        "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey",
        "abc.__new__",
        "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers": [],
    "cryptography.hazmat.primitives.ciphers.algorithms": [
        "cryptography.hazmat.primitives.ciphers.algorithms.ARC4",
        "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20",
        "cryptography.hazmat.primitives.ciphers.algorithms.IDEA",
        "cryptography.utils.deprecated",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES256",
        "cryptography.hazmat.primitives.ciphers.algorithms.SM4",
        "cryptography.hazmat.primitives.ciphers.algorithms.Camellia",
        "cryptography.hazmat.primitives.ciphers.algorithms.TripleDES",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES",
        "cryptography.hazmat.primitives.ciphers.algorithms.CAST5",
        "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish",
        "abc.__new__",
        "cryptography.hazmat.primitives.ciphers.algorithms.SEED",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES128"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES.__init__": [
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size": [
        "<builtin>.ValueError",
        "cryptography.utils._check_byteslike",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.ciphers.base": [
        "cryptography.hazmat.primitives.ciphers.base.AEADEncryptionContext",
        "cryptography.hazmat.primitives.ciphers.base._AEADEncryptionContext",
        "cryptography.hazmat.primitives.ciphers.base.AEADCipherContext",
        "typing.inner",
        "cryptography.hazmat.primitives.ciphers.base._CipherContext",
        "typing.TypeVar.__init__",
        "cryptography.hazmat.primitives.ciphers.base.CipherContext",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext",
        "typing.__init_subclass__",
        "cryptography.hazmat.primitives.ciphers.base.AEADDecryptionContext",
        "cryptography.hazmat.primitives.ciphers.base.Cipher",
        "typing._GenericAlias.__mro_entries__",
        "abc.__new__",
        "cryptography.hazmat.primitives.ciphers.base._AEADDecryptionContext"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADCipherContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADDecryptionContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.Cipher": [
        "typing.inner",
        "typing.overload"
    ],
    "cryptography.hazmat.primitives.ciphers.base.Cipher.__init__": [
        "cryptography.hazmat.primitives.ciphers.modes.CTR.validate_for_algorithm",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "abc.ABCMeta.__instancecheck__"
    ],
    "cryptography.hazmat.primitives.ciphers.base.Cipher._wrap_ctx": [
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.ciphers.base._CipherContext.__init__",
        "abc.ABCMeta.__instancecheck__"
    ],
    "cryptography.hazmat.primitives.ciphers.base.Cipher.decryptor": [
        "cryptography.hazmat.backends.openssl.backend.Backend.create_symmetric_decryption_ctx",
        "cryptography.hazmat.primitives.ciphers.base.Cipher._wrap_ctx"
    ],
    "cryptography.hazmat.primitives.ciphers.base.Cipher.encryptor": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.ciphers.base.Cipher._wrap_ctx",
        "cryptography.hazmat.backends.openssl.backend.Backend.create_symmetric_encryption_ctx",
        "abc.ABCMeta.__instancecheck__"
    ],
    "cryptography.hazmat.primitives.ciphers.base.CipherContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext": [
        "typing.inner"
    ],
    "cryptography.hazmat.primitives.ciphers.base._CipherContext": [
        "typing.inner"
    ],
    "cryptography.hazmat.primitives.ciphers.base._CipherContext.update": [
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.update"
    ],
    "cryptography.hazmat.primitives.ciphers.modes": [
        "cryptography.hazmat.primitives.ciphers.modes.CTR",
        "cryptography.hazmat.primitives.ciphers.modes.XTS",
        "cryptography.hazmat.primitives.ciphers.modes.Mode",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithInitializationVector",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithTweak",
        "cryptography.hazmat.primitives.ciphers.modes.CFB",
        "cryptography.hazmat.primitives.ciphers.modes.CFB8",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce",
        "cryptography.hazmat.primitives.ciphers.modes.OFB",
        "cryptography.hazmat.primitives.ciphers.modes.CBC",
        "cryptography.hazmat.primitives.ciphers.modes.ECB",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithAuthenticationTag",
        "cryptography.hazmat.primitives.ciphers.modes.GCM"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CTR.__init__": [
        "cryptography.utils._check_byteslike"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CTR.validate_for_algorithm": [
        "cryptography.hazmat.primitives.ciphers.modes._check_aes_key_length",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce.nonce",
        "cryptography.hazmat.primitives.ciphers.modes._check_nonce_length"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.GCM": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.Mode": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithAuthenticationTag": [
        "typing.inner"
    ],
    "cryptography.hazmat.primitives.ciphers.modes._check_aes_key_length": [
        "<builtin>.ValueError",
        "cryptography.hazmat.primitives.ciphers.algorithms.key_size"
    ],
    "cryptography.hazmat.primitives.ciphers.modes._check_nonce_length": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.len",
        "abc.ABCMeta.__instancecheck__"
    ],
    "cryptography.hazmat.primitives.hashes": [
        "cryptography.hazmat.primitives.hashes.SHA3_512",
        "cryptography.hazmat.primitives.hashes.SHA224",
        "cryptography.hazmat.primitives.hashes.SHA512_224",
        "cryptography.hazmat.primitives.hashes.SHA3_224",
        "cryptography.hazmat.primitives.hashes.Hash",
        "cryptography.hazmat.primitives.hashes.HashAlgorithm",
        "cryptography.hazmat.primitives.hashes.SHA384",
        "cryptography.hazmat.primitives.hashes.SM3",
        "cryptography.hazmat.primitives.hashes.BLAKE2s",
        "cryptography.hazmat.primitives.hashes.SHAKE256",
        "cryptography.hazmat.primitives.hashes.SHA256",
        "cryptography.hazmat.primitives.hashes.ExtendableOutputFunction",
        "cryptography.hazmat.primitives.hashes.SHA3_384",
        "cryptography.hazmat.primitives.hashes.SHAKE128",
        "cryptography.hazmat.primitives.hashes.BLAKE2b",
        "cryptography.hazmat.primitives.hashes.SHA1",
        "cryptography.hazmat.primitives.hashes.SHA512",
        "cryptography.hazmat.primitives.hashes.SHA512_256",
        "cryptography.hazmat.primitives.hashes.HashContext",
        "cryptography.hazmat.primitives.hashes.SHA3_256",
        "cryptography.hazmat.primitives.hashes.MD5"
    ],
    "cryptography.hazmat.primitives.hashes.Hash": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.Hash.__init__": [
        "cryptography.hazmat.backends.openssl.backend.Backend.create_hash_ctx",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.hashes.algorithm",
        "abc.ABCMeta.__instancecheck__"
    ],
    "cryptography.hazmat.primitives.hashes.Hash.finalize": [
        "cryptography.hazmat.backends.openssl.hashes._HashContext.finalize"
    ],
    "cryptography.hazmat.primitives.hashes.Hash.update": [
        "cryptography.utils._check_byteslike",
        "cryptography.hazmat.backends.openssl.hashes._HashContext.update"
    ],
    "cryptography.hazmat.primitives.hashes.HashAlgorithm": [
        "typing.inner"
    ],
    "cryptography.hazmat.primitives.hashes.HashContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.kdf": [
        "cryptography.hazmat.primitives.kdf.KeyDerivationFunction",
        "abc.__new__"
    ],
    "cryptography.hazmat.primitives.kdf.KeyDerivationFunction": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.kdf.scrypt": [
        "abc.__new__",
        "cryptography.hazmat.primitives.kdf.scrypt.Scrypt"
    ],
    "cryptography.hazmat.primitives.serialization": [],
    "cryptography.hazmat.primitives.serialization.base": [
        "typing.inner"
    ],
    "cryptography.hazmat.primitives.serialization.base.load_der_private_key": [
        "cryptography.hazmat.backends.openssl.backend.Backend.load_der_private_key"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12": [
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates",
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate",
        "typing._VariadicGenericAlias.__getitem__",
        "typing.inner"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7": [
        "enum.__new__",
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder",
        "enum.__prepare__",
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7Options",
        "typing.inner"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7Options": [
        "enum._EnumDict.__setitem__"
    ],
    "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder": [
        "typing.inner",
        "typing._VariadicGenericAlias.__getitem__"
    ],
    "cryptography.hazmat.primitives.serialization.ssh": [
        "re.compile",
        "typing._VariadicGenericAlias.__getitem__",
        "<builtin>.range",
        "<builtin>.bytearray",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.__init__",
        "typing.inner",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA",
        "<builtin>.memoryview",
        "cryptography.hazmat.primitives.serialization.ssh._FragList",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519",
        "cryptography.utils._ModuleWithDeprecations.__getattr__"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._FragList": [
        "typing.inner"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA": [
        "typing._VariadicGenericAlias.__getitem__"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA": [
        "typing._VariadicGenericAlias.__getitem__"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519": [
        "typing._VariadicGenericAlias.__getitem__"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA": [
        "typing._VariadicGenericAlias.__getitem__"
    ],
    "cryptography.utils": [
        "typing.inner",
        "cryptography.utils._ModuleWithDeprecations",
        "enum.__new__",
        "cryptography.utils.Enum",
        "cryptography.utils._DeprecatedValue",
        "enum.__prepare__",
        "cryptography.utils.CryptographyDeprecationWarning",
        "cryptography.utils.InterfaceNotImplemented"
    ],
    "cryptography.utils.Enum": [
        "enum._EnumDict.__setitem__"
    ],
    "cryptography.utils._ModuleWithDeprecations": [
        "typing.inner"
    ],
    "cryptography.utils.deprecated": [
        "cryptography.utils._DeprecatedValue.__init__",
        "<builtin>.isinstance",
        "<builtin>.setattr",
        "cryptography.utils._ModuleWithDeprecations.__init__",
        "cryptography.utils._ModuleWithDeprecations.__setattr__"
    ],
    "cryptography.x509": [],
    "cryptography.x509.base": [
        "cryptography.x509.base.Version",
        "cryptography.x509.base._RawRevokedCertificate",
        "cryptography.x509.base.Attributes",
        "enum.__prepare__",
        "cryptography.x509.base.Attribute",
        "cryptography.x509.base.CertificateRevocationListBuilder",
        "enum.__new__",
        "cryptography.x509.base.RevokedCertificateBuilder",
        "typing.inner",
        "cryptography.x509.base.CertificateRevocationList",
        "cryptography.x509.base.CertificateSigningRequestBuilder",
        "cryptography.x509.base.Certificate",
        "cryptography.x509.base.InvalidVersion",
        "typing._VariadicGenericAlias.__getitem__",
        "abc.ABCMeta.register",
        "cryptography.x509.base.CertificateBuilder",
        "cryptography.x509.base.RevokedCertificate",
        "cryptography.x509.base.AttributeNotFound",
        "abc.__new__",
        "cryptography.x509.base.CertificateSigningRequest"
    ],
    "cryptography.x509.base.Attribute": [
        "types.DynamicClassAttribute.__get__",
        "<builtin>.property"
    ],
    "cryptography.x509.base.Attributes": [
        "typing.inner",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.base.Certificate": [
        "typing.inner",
        "abc.abstractmethod"
    ],
    "cryptography.x509.base.CertificateBuilder": [
        "typing.inner"
    ],
    "cryptography.x509.base.CertificateRevocationList": [
        "typing.inner",
        "typing.overload",
        "abc.abstractmethod"
    ],
    "cryptography.x509.base.CertificateRevocationListBuilder": [
        "typing.inner"
    ],
    "cryptography.x509.base.CertificateSigningRequest": [
        "typing.inner",
        "abc.abstractmethod"
    ],
    "cryptography.x509.base.CertificateSigningRequestBuilder": [
        "typing.inner",
        "typing._VariadicGenericAlias.__getitem__"
    ],
    "cryptography.x509.base.RevokedCertificateBuilder": [
        "typing.inner"
    ],
    "cryptography.x509.base.Version": [
        "enum._EnumDict.__setitem__"
    ],
    "cryptography.x509.certificate_transparency": [
        "cryptography.x509.certificate_transparency.Version",
        "abc.ABCMeta.register",
        "enum.__new__",
        "enum.__prepare__",
        "cryptography.x509.certificate_transparency.LogEntryType",
        "abc.__new__",
        "cryptography.x509.certificate_transparency.SignatureAlgorithm",
        "cryptography.x509.certificate_transparency.SignedCertificateTimestamp"
    ],
    "cryptography.x509.certificate_transparency.LogEntryType": [
        "enum._EnumDict.__setitem__"
    ],
    "cryptography.x509.certificate_transparency.SignatureAlgorithm": [
        "enum._EnumDict.__setitem__"
    ],
    "cryptography.x509.certificate_transparency.Version": [
        "enum._EnumDict.__setitem__"
    ],
    "cryptography.x509.extensions": [
        "cryptography.x509.extensions.BasicConstraints",
        "cryptography.x509.extensions.SignedCertificateTimestamps",
        "cryptography.x509.extensions.UserNotice",
        "cryptography.x509.extensions.CRLReason",
        "enum.__prepare__",
        "cryptography.x509.extensions.ExtensionType",
        "cryptography.x509.extensions.SubjectAlternativeName",
        "cryptography.x509.extensions.NoticeReference",
        "cryptography.x509.extensions.OCSPNoCheck",
        "cryptography.x509.extensions.ExtensionNotFound",
        "cryptography.x509.extensions.PrecertPoison",
        "enum.__new__",
        "cryptography.x509.extensions.CertificatePolicies",
        "cryptography.x509.extensions.GeneralNames",
        "cryptography.x509.extensions.CertificateIssuer",
        "cryptography.x509.extensions.Extensions",
        "cryptography.x509.extensions.ReasonFlags",
        "cryptography.x509.extensions.Extension",
        "cryptography.x509.extensions.IssuerAlternativeName",
        "cryptography.x509.extensions.PolicyConstraints",
        "typing.inner",
        "typing.TypeVar.__init__",
        "cryptography.x509.extensions.CRLDistributionPoints",
        "cryptography.x509.extensions.UnrecognizedExtension",
        "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps",
        "cryptography.x509.extensions.AccessDescription",
        "cryptography.x509.extensions.CRLNumber",
        "cryptography.x509.extensions.SubjectInformationAccess",
        "enum.EnumMeta.__iter__",
        "typing._GenericAlias.__mro_entries__",
        "cryptography.x509.extensions.TLSFeatureType",
        "cryptography.x509.extensions.DistributionPoint",
        "cryptography.x509.extensions.IssuingDistributionPoint",
        "cryptography.x509.extensions.PolicyInformation",
        "enum.Enum.__hash__",
        "cryptography.x509.extensions.FreshestCRL",
        "cryptography.x509.extensions.OCSPNonce",
        "cryptography.x509.extensions.AuthorityInformationAccess",
        "cryptography.x509.extensions.AuthorityKeyIdentifier",
        "cryptography.x509.extensions.ExtendedKeyUsage",
        "cryptography.x509.extensions.DuplicateExtension",
        "cryptography.x509.extensions.TLSFeature",
        "cryptography.x509.extensions.DeltaCRLIndicator",
        "cryptography.x509.extensions.InhibitAnyPolicy",
        "typing.__init_subclass__",
        "cryptography.x509.extensions.KeyUsage",
        "cryptography.x509.extensions.NameConstraints",
        "cryptography.x509.extensions.InvalidityDate",
        "abc.__new__",
        "cryptography.x509.extensions.SubjectKeyIdentifier"
    ],
    "cryptography.x509.extensions.AuthorityInformationAccess": [
        "typing.inner",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.AuthorityKeyIdentifier": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "typing.inner"
    ],
    "cryptography.x509.extensions.BasicConstraints": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.CRLDistributionPoints": [
        "typing.inner",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.CertificateIssuer": [
        "typing.inner",
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.CertificatePolicies": [
        "typing.inner",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.DistributionPoint": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.ExtendedKeyUsage": [
        "typing.inner",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.ExtensionType": [
        "typing.inner"
    ],
    "cryptography.x509.extensions.Extensions": [
        "typing.inner",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.FreshestCRL": [
        "typing.inner",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.GeneralNames": [
        "typing.inner",
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.IssuerAlternativeName": [
        "typing.inner",
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.IssuingDistributionPoint": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.NameConstraints": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.NoticeReference": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.PolicyConstraints": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.PolicyInformation": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps": [
        "typing.inner",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.ReasonFlags": [
        "enum._EnumDict.__setitem__"
    ],
    "cryptography.x509.extensions.SignedCertificateTimestamps": [
        "typing.inner",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SubjectAlternativeName": [
        "typing.inner",
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SubjectInformationAccess": [
        "typing.inner",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.TLSFeature": [
        "typing.inner",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.TLSFeatureType": [
        "enum._EnumDict.__setitem__"
    ],
    "cryptography.x509.extensions.UserNotice": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.x509.general_name": [
        "cryptography.x509.general_name.UnsupportedGeneralNameType",
        "cryptography.x509.general_name.DirectoryName",
        "cryptography.x509.general_name.RegisteredID",
        "cryptography.x509.general_name.IPAddress",
        "cryptography.x509.general_name.OtherName",
        "cryptography.x509.general_name.UniformResourceIdentifier",
        "cryptography.x509.general_name.GeneralName",
        "cryptography.x509.general_name.DNSName",
        "typing.inner",
        "abc.__new__",
        "cryptography.x509.general_name.RFC822Name"
    ],
    "cryptography.x509.name": [
        "cryptography.x509.name._ASN1Type",
        "enum.__new__",
        "cryptography.x509.name.RelativeDistinguishedName",
        "cryptography.x509.name._RFC4514NameParser",
        "enum.__prepare__",
        "enum.EnumMeta.__iter__",
        "cryptography.x509.name.Name",
        "typing.inner",
        "cryptography.x509.name.NameAttribute"
    ],
    "cryptography.x509.name.Name": [
        "<builtin>.classmethod",
        "typing.overload",
        "<builtin>.property",
        "typing.inner"
    ],
    "cryptography.x509.name.NameAttribute": [
        "typing.inner",
        "<builtin>.property"
    ],
    "cryptography.x509.name.RelativeDistinguishedName": [
        "typing.inner"
    ],
    "cryptography.x509.name._ASN1Type": [
        "enum._EnumDict.__setitem__"
    ],
    "cryptography.x509.name._RFC4514NameParser": [
        "typing.inner",
        "<builtin>.chr",
        "re.compile"
    ],
    "datetime": [
        "datetime.timedelta",
        "datetime.timezone._create",
        "datetime._days_before_year",
        "datetime.__new__",
        "datetime.timezone",
        "datetime.tzinfo",
        "datetime.datetime",
        "datetime.time",
        "<list>.append",
        "datetime._create",
        "datetime.date"
    ],
    "datetime.__new__": [
        "datetime._check_time_fields",
        "datetime._check_tzinfo_arg",
        "datetime._check_date_fields"
    ],
    "datetime._check_date_fields": [
        "datetime._check_int_field",
        "<builtin>.ValueError",
        "datetime._days_in_month"
    ],
    "datetime._check_time_fields": [
        "datetime._check_int_field",
        "<builtin>.ValueError"
    ],
    "datetime.date": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.datetime": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.time": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.timedelta.__neg__": [
        "datetime.__new__"
    ],
    "datetime.timezone": [
        "<builtin>.classmethod",
        "datetime.__new__",
        "<builtin>.object",
        "<builtin>.staticmethod"
    ],
    "email._parseaddr": [
        "calendar",
        "email._parseaddr.AddressList",
        "email._parseaddr.AddrlistClass"
    ],
    "email.charset": [
        "email.quoprimime",
        "email.errors",
        "email.base64mime",
        "email.encoders",
        "email.charset.Charset"
    ],
    "email.encoders": [
        "quopri"
    ],
    "email.errors": [
        "email.errors.HeaderParseError",
        "email.errors.UndecodableBytesDefect",
        "email.errors.BoundaryError",
        "email.errors.CharsetError",
        "email.errors.InvalidHeaderDefect",
        "email.errors.StartBoundaryNotFoundDefect",
        "email.errors.InvalidBase64PaddingDefect",
        "email.errors.MisplacedEnvelopeHeaderDefect",
        "email.errors.MessageDefect",
        "email.errors.InvalidMultipartContentTransferEncodingDefect",
        "email.errors.ObsoleteHeaderDefect",
        "email.errors.MessageParseError",
        "email.errors.MultipartConversionError",
        "email.errors.HeaderMissingRequiredValue",
        "email.errors.HeaderDefect",
        "email.errors.CloseBoundaryNotFoundDefect",
        "email.errors.InvalidBase64CharactersDefect",
        "email.errors.MessageError",
        "email.errors.MissingHeaderBodySeparatorDefect",
        "email.errors.NonPrintableDefect",
        "email.errors.FirstHeaderLineIsContinuationDefect",
        "email.errors.MultipartInvariantViolationDefect",
        "email.errors.NonASCIILocalPartDefect",
        "email.errors.NoBoundaryInMultipartDefect",
        "email.errors.InvalidBase64LengthDefect"
    ],
    "email.utils": [
        "email.charset",
        "email._parseaddr",
        "re.compile",
        "urllib.parse"
    ],
    "encodings.idna.getregentry": [
        "codecs.__new__"
    ],
    "encodings.search_function": [
        "<builtin>.callable",
        "<builtin>.isinstance",
        "encodings.idna.getregentry",
        "<builtin>.__import__",
        "encodings.normalize_encoding",
        "<builtin>.len"
    ],
    "enum.EnumMeta": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "enum.EnumMeta.__call__": [
        "enum.__new__",
        "enum.EnumMeta._create_"
    ],
    "enum.EnumMeta.__getattr__": [
        "enum._is_dunder",
        "<builtin>.AttributeError"
    ],
    "enum.EnumMeta._convert_": [
        "<builtin>.vars",
        "enum.__members__",
        "enum.EnumMeta.__call__",
        "enum.<lambda>",
        "enum.EnumMeta.__setattr__"
    ],
    "enum.EnumMeta._create_": [
        "<builtin>.enumerate",
        "enum.__new__",
        "<builtin>.isinstance",
        "enum._get_mixins_"
    ],
    "enum.IntFlag": [
        "<builtin>.classmethod"
    ],
    "enum.IntFlag.__and__": [
        "<builtin>.isinstance",
        "enum.EnumMeta.__call__"
    ],
    "enum.IntFlag.__or__": [
        "<builtin>.isinstance",
        "enum.EnumMeta.__call__"
    ],
    "enum._EnumDict.__setitem__": [
        "enum._is_sunder",
        "<builtin>.set",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.list",
        "<builtin>.setattr",
        "enum._is_descriptor",
        "<builtin>.ValueError",
        "<builtin>.super",
        "enum._is_dunder",
        "<builtin>.len"
    ],
    "enum.__new__": [
        "enum._get_mixins_",
        "enum._EnumDict.__setitem__",
        "enum._find_new_",
        "enum._missing_",
        "enum.EnumMeta.__setattr__"
    ],
    "enum.__prepare__": [
        "enum._check_for_existing_members",
        "enum._EnumDict.__init__",
        "enum._EnumDict.__setitem__",
        "enum._get_mixins_"
    ],
    "enum._create_pseudo_member_": [
        "enum._decompose"
    ],
    "enum._decompose": [
        "<builtin>.list",
        "<builtin>.len",
        "enum.<lambda>"
    ],
    "enum._find_new_": [],
    "enum._get_mixins_": [
        "enum._find_data_type"
    ],
    "enum._missing_": [
        "enum._create_pseudo_member_"
    ],
    "fnmatch": [
        "functools.lru_cache.decorating_function",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache"
    ],
    "fnmatch._compile_pattern": [
        "<builtin>.str",
        "re.compile",
        "<builtin>.isinstance",
        "fnmatch.translate",
        "<builtin>.bytes"
    ],
    "fnmatch.fnmatch": [
        "fnmatch.fnmatchcase",
        "posixpath.normcase"
    ],
    "fnmatch.fnmatchcase": [
        "fnmatch._compile_pattern"
    ],
    "fnmatch.translate": [
        "re.escape",
        "<builtin>.len"
    ],
    "functools._HashedSeq.__init__": [
        "<builtin>.hash"
    ],
    "functools._lru_cache_wrapper": [
        "_thread.RLock",
        "<builtin>.object"
    ],
    "functools._lru_cache_wrapper.wrapper": [
        "functools._make_key"
    ],
    "functools._make_key": [
        "functools._HashedSeq.__init__",
        "<builtin>.len",
        "<builtin>.tuple",
        "<builtin>.type"
    ],
    "functools.cached_property.__init__": [
        "_thread.RLock"
    ],
    "functools.decorating_function": [
        "functools.update_wrapper"
    ],
    "functools.lru_cache": [
        "functools.update_wrapper",
        "<builtin>.callable",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "functools._lru_cache_wrapper"
    ],
    "functools.lru_cache.decorating_function": [
        "functools.update_wrapper",
        "functools._lru_cache_wrapper"
    ],
    "functools.partial": [
        "reprlib.recursive_repr.decorating_function",
        "reprlib.recursive_repr"
    ],
    "functools.partialmethod": [
        "<builtin>.property"
    ],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.update_wrapper": [
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "getpass": [
        "getpass.GetPassWarning"
    ],
    "getpass.getuser": [
        "_collections_abc.Mapping.get"
    ],
    "gettext": [
        "re.compile",
        "locale",
        "ntpath.join",
        "posixpath.join",
        "<builtin>.enumerate"
    ],
    "gettext.NullTranslations.__init__": [
        "gettext.NullTranslations._parse"
    ],
    "gettext._expand_lang": [
        "<list>.append",
        "<builtin>.range",
        "locale.normalize",
        "<list>.reverse"
    ],
    "gettext.dgettext": [
        "<map>.gettext",
        "gettext.NullTranslations.gettext",
        "gettext.translation",
        "<map>.get"
    ],
    "gettext.dngettext": [
        "<map>.get",
        "gettext.NullTranslations.ngettext",
        "gettext.translation",
        "<map>.ngettext"
    ],
    "gettext.find": [
        "ntpath.join",
        "posixpath.join",
        "gettext._expand_lang",
        "<list>.append",
        "_collections_abc.Mapping.get",
        "genericpath.exists"
    ],
    "gettext.gettext": [
        "gettext.dgettext"
    ],
    "gettext.ngettext": [
        "gettext.dngettext"
    ],
    "gettext.translation": [
        "gettext.find",
        "<map>.add_fallback",
        "<builtin>.FileNotFoundError",
        "<map>.setdefault",
        "<builtin>.open",
        "<map>.get"
    ],
    "hashlib": [
        "<builtin>.set",
        "hashlib.__get_openssl_constructor",
        "<builtin>.range",
        "hashlib.__get_builtin_constructor",
        "logging.exception",
        "<builtin>.bytes",
        "<builtin>.globals"
    ],
    "hashlib.__get_builtin_constructor": [
        "<builtin>.ValueError",
        "<map>.get"
    ],
    "hashlib.__get_openssl_constructor": [
        "hashlib.__get_builtin_constructor",
        "<builtin>.getattr"
    ],
    "hmac": [
        "<builtin>.range",
        "hmac.HMAC",
        "<builtin>.frozenset",
        "<builtin>.bytes"
    ],
    "hmac.HMAC.__init__": [
        "<builtin>.hasattr",
        "<builtin>.callable",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.len",
        "hmac.HMAC.update"
    ],
    "hmac.HMAC.digest": [
        "hmac.HMAC._current"
    ],
    "inspect": [
        "<builtin>.hasattr",
        "importlib.machinery",
        "<builtin>.type",
        "<builtin>.object",
        "<builtin>.globals",
        "dis"
    ],
    "inspect.BoundArguments": [
        "<builtin>.property"
    ],
    "inspect.Parameter": [
        "<builtin>.property"
    ],
    "inspect.Signature": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "inspect._ParameterKind": [
        "<builtin>.property"
    ],
    "ipaddress": [
        "ipaddress._IPv4Constants",
        "ipaddress._IPv6Constants",
        "functools.total_ordering",
        "functools.cached_property.__set_name__",
        "ipaddress.IPv4Interface",
        "ipaddress._BaseV4",
        "ipaddress._BaseNetwork",
        "ipaddress.IPv6Interface",
        "ipaddress._BaseV6",
        "ipaddress._IPAddressBase",
        "ipaddress.IPv6Network",
        "ipaddress.NetmaskValueError",
        "ipaddress._BaseAddress",
        "ipaddress.IPv6Address",
        "ipaddress.AddressValueError",
        "ipaddress.IPv4Network",
        "ipaddress.IPv4Address"
    ],
    "ipaddress.IPv4Address": [
        "functools.lru_cache.decorating_function",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache",
        "<builtin>.property"
    ],
    "ipaddress.IPv4Address.__init__": [
        "<builtin>.str",
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._check_int_address",
        "ipaddress._BaseV4._ip_int_from_string",
        "ipaddress._IPAddressBase._check_packed_address"
    ],
    "ipaddress.IPv4Interface": [
        "functools.cached_property.__init__",
        "<builtin>.property"
    ],
    "ipaddress.IPv4Network": [
        "functools.lru_cache.decorating_function",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache",
        "<builtin>.property"
    ],
    "ipaddress.IPv4Network.__init__": [
        "ipaddress.IPv4Address.__init__",
        "ipaddress._IPAddressBase._split_addr_prefix",
        "<builtin>.ValueError",
        "ipaddress._BaseAddress.__int__",
        "<builtin>.int",
        "ipaddress._make_netmask",
        "ipaddress._BaseV4._make_netmask"
    ],
    "ipaddress.IPv6Address": [
        "functools.lru_cache.decorating_function",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache",
        "<builtin>.property"
    ],
    "ipaddress.IPv6Address.__init__": [
        "<builtin>.str",
        "ipaddress._BaseV6._ip_int_from_string",
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._check_int_address",
        "ipaddress._IPAddressBase._check_packed_address"
    ],
    "ipaddress.IPv6Interface": [
        "functools.cached_property.__init__",
        "<builtin>.property"
    ],
    "ipaddress.IPv6Network.__init__": [
        "ipaddress._BaseV6._make_netmask",
        "ipaddress._IPAddressBase._split_addr_prefix",
        "<builtin>.ValueError",
        "ipaddress._BaseAddress.__int__",
        "<builtin>.int",
        "ipaddress.IPv6Address.__init__"
    ],
    "ipaddress._BaseNetwork": [
        "functools.cached_property.__init__",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "ipaddress._IPv4Constants": [
        "ipaddress.IPv4Address.__init__",
        "ipaddress.IPv4Network.__init__"
    ],
    "ipaddress._IPv6Constants": [
        "ipaddress.IPv6Network.__init__"
    ],
    "ipaddress._ip_int_from_string": [
        "ipaddress._parse_octet",
        "ipaddress._parse_hextet"
    ],
    "ipaddress._make_netmask": [
        "ipaddress._prefix_from_prefix_string",
        "ipaddress.IPv4Address.__init__",
        "ipaddress.IPv6Address.__init__",
        "ipaddress._ip_int_from_prefix"
    ],
    "ipaddress._split_addr_prefix": [
        "ipaddress._split_optional_netmask"
    ],
    "linecache.getline": [
        "linecache.getlines",
        "<builtin>.len"
    ],
    "linecache.getlines": [
        "linecache.updatecache",
        "linecache.clearcache",
        "<builtin>.len"
    ],
    "linecache.lazycache": [
        "<str>.startswith",
        "<builtin>.len",
        "<str>.endswith",
        "<builtin>.getattr"
    ],
    "linecache.updatecache": [
        "<str>.startswith",
        "ntpath.isabs",
        "ntpath.join",
        "posixpath.join",
        "codecs.BufferedIncrementalDecoder.decode",
        "posixpath.isabs",
        "linecache.lazycache",
        "tokenize.open",
        "<builtin>.len",
        "<str>.endswith"
    ],
    "logging": [
        "<builtin>.hasattr",
        "logging._StderrHandler.__init__",
        "threading.RLock",
        "weakref.WeakValueDictionary.__init__",
        "logging.Formatter.__init__",
        "logging.Manager.__init__",
        "_weakrefset.WeakSet.__init__",
        "logging.RootLogger.__init__",
        "ntpath.normcase",
        "string",
        "posixpath.normcase"
    ],
    "logging.FileHandler.__init__": [
        "logging.FileHandler._open",
        "posixpath.abspath",
        "os._fspath",
        "ntpath._abspath_fallback",
        "logging.StreamHandler.__init__",
        "logging.Handler.__init__"
    ],
    "logging.Formatter.__init__": [
        "logging.PercentStyle.__init__",
        "<builtin>.ValueError",
        "logging.PercentStyle.validate",
        "<map>.keys"
    ],
    "logging.Formatter.format": [
        "logging.Formatter.formatMessage",
        "logging.Formatter.formatStack",
        "logging.LogRecord.getMessage",
        "logging.Formatter.formatException",
        "logging.Formatter.formatTime",
        "logging.Formatter.usesTime"
    ],
    "logging.Formatter.formatMessage": [
        "_io.StringIO",
        "traceback.print_exception",
        "logging.PercentStyle.format"
    ],
    "logging.Formatter.usesTime": [
        "logging.PercentStyle.usesTime"
    ],
    "logging.Handler.__init__": [
        "logging.Filterer.__init__",
        "logging._checkLevel",
        "logging._addHandlerRef",
        "logging.Handler.createLock"
    ],
    "logging.Handler.createLock": [
        "threading.RLock",
        "logging._register_at_fork_reinit_lock"
    ],
    "logging.Handler.format": [
        "logging.Formatter.format"
    ],
    "logging.Handler.handle": [
        "logging.Filterer.filter",
        "logging.StreamHandler.emit",
        "logging.Handler.acquire",
        "logging.Handler.release"
    ],
    "logging.Handler.setLevel": [
        "logging._checkLevel"
    ],
    "logging.LogRecord.__init__": [
        "<builtin>.hasattr",
        "ntpath.basename",
        "threading.current_thread",
        "posixpath.splitext",
        "posixpath.basename",
        "<builtin>.isinstance",
        "logging.getLevelName",
        "<builtin>.int",
        "ntpath.splitext",
        "_thread.get_ident",
        "threading.name",
        "<builtin>.len",
        "abc.ABCMeta.__instancecheck__"
    ],
    "logging.Logger.__init__": [
        "logging.Filterer.__init__",
        "logging._checkLevel"
    ],
    "logging.Logger._log": [
        "<builtin>.isinstance",
        "logging.Logger.findCaller",
        "<builtin>.type",
        "logging.Logger.handle",
        "logging.Logger.makeRecord"
    ],
    "logging.Logger.addHandler": [
        "logging._releaseLock",
        "logging._acquireLock",
        "<list>.append"
    ],
    "logging.Logger.callHandlers": [
        "logging.Handler.handle"
    ],
    "logging.Logger.debug": [
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.error": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.findCaller": [
        "<builtin>.hasattr",
        "posixpath.normcase",
        "logging.<lambda>"
    ],
    "logging.Logger.handle": [
        "logging.Filterer.filter",
        "logging.Logger.callHandlers"
    ],
    "logging.Logger.info": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.isEnabledFor": [
        "logging.disable",
        "logging._releaseLock",
        "logging._acquireLock",
        "logging.Logger.getEffectiveLevel"
    ],
    "logging.Logger.log": [
        "logging.Logger._log",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.makeRecord": [
        "logging.LogRecord.__init__",
        "<builtin>.KeyError"
    ],
    "logging.Logger.setLevel": [
        "logging.Manager._clear_cache",
        "logging._checkLevel"
    ],
    "logging.Logger.warning": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Manager.__init__": [
        "logging.disable"
    ],
    "logging.Manager._clear_cache": [
        "logging._releaseLock",
        "<builtin>.isinstance",
        "logging._acquireLock"
    ],
    "logging.Manager._fixupParents": [
        "logging.PlaceHolder.__init__",
        "<builtin>.isinstance"
    ],
    "logging.Manager.getLogger": [
        "logging._releaseLock",
        "<builtin>.TypeError",
        "logging.Manager._fixupParents",
        "<builtin>.isinstance",
        "logging.Logger.__init__",
        "logging._acquireLock"
    ],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.PercentStyle.format": [
        "<builtin>.ValueError",
        "logging.PercentStyle._format"
    ],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.StreamHandler.emit": [
        "logging.StreamHandler.flush",
        "logging.Handler.format"
    ],
    "logging.StreamHandler.flush": [
        "<builtin>.hasattr",
        "logging.Handler.acquire",
        "logging.Handler.release"
    ],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging._addHandlerRef": [
        "logging._releaseLock",
        "logging._acquireLock",
        "<list>.append"
    ],
    "logging._register_at_fork_reinit_lock": [
        "logging._releaseLock",
        "logging._acquireLock",
        "_weakrefset.WeakSet.add"
    ],
    "logging._showwarning": [
        "warnings.formatwarning",
        "logging.Logger.addHandler",
        "logging.Logger.warning",
        "logging.getLogger",
        "logging.Handler.__init__"
    ],
    "logging.addLevelName": [
        "logging._releaseLock",
        "logging._acquireLock"
    ],
    "logging.disable": [
        "logging._checkLevel"
    ],
    "logging.getLogger": [
        "logging.Manager.getLogger"
    ],
    "nacl.bindings": [
        "nacl.bindings.crypto_core",
        "nacl.bindings.crypto_sign",
        "nacl.bindings.utils",
        "nacl.bindings.crypto_box",
        "nacl.bindings.crypto_secretbox",
        "nacl.bindings.crypto_aead",
        "nacl.bindings.sodium_core",
        "nacl.bindings.crypto_shorthash",
        "nacl.bindings.crypto_kx",
        "nacl.bindings.crypto_pwhash",
        "nacl.bindings.crypto_generichash",
        "nacl.bindings.crypto_hash",
        "nacl.bindings.randombytes",
        "nacl.bindings.crypto_scalarmult",
        "nacl.bindings.crypto_secretstream",
        "nacl.bindings.sodium_core.sodium_init"
    ],
    "nacl.bindings.crypto_box": [
        "typing._VariadicGenericAlias.__getitem__"
    ],
    "nacl.bindings.crypto_core": [
        "<builtin>.bool"
    ],
    "nacl.bindings.crypto_generichash": [
        "typing.TypeVar.__init__",
        "nacl.bindings.crypto_generichash.Blake2State"
    ],
    "nacl.bindings.crypto_hash": [],
    "nacl.bindings.crypto_kx": [
        "typing._VariadicGenericAlias.__getitem__"
    ],
    "nacl.bindings.crypto_pwhash": [
        "<builtin>.bool"
    ],
    "nacl.bindings.crypto_scalarmult": [
        "<builtin>.bool"
    ],
    "nacl.bindings.crypto_secretbox": [],
    "nacl.bindings.crypto_secretstream": [
        "typing.inner",
        "typing._VariadicGenericAlias.__getitem__",
        "crypto_secretstream.crypto_secretstream_xchacha20poly1305_state"
    ],
    "nacl.bindings.crypto_sign": [
        "crypto_sign.crypto_sign_ed25519ph_state",
        "typing._VariadicGenericAlias.__getitem__"
    ],
    "nacl.bindings.sodium_core": [],
    "nacl.bindings.sodium_core._sodium_init": [
        "nacl.exceptions.ensure"
    ],
    "nacl.bindings.sodium_core.sodium_init": [
        "nacl.bindings.sodium_core._sodium_init"
    ],
    "nacl.encoding": [
        "typing.inner"
    ],
    "nacl.encoding._Encoder": [
        "abc.abstractmethod",
        "<builtin>.staticmethod"
    ],
    "nacl.exceptions": [
        "nacl.exceptions.TypeError",
        "enum.__prepare__",
        "nacl.exceptions.UnavailableError",
        "nacl.exceptions._Reasons",
        "nacl.exceptions.CryptPrefixError",
        "nacl.exceptions.AlreadyUpdated",
        "nacl.exceptions.RuntimeError",
        "typing.inner",
        "nacl.exceptions.InvalidSignature",
        "nacl.exceptions.ValueError",
        "nacl.exceptions.AssertionError",
        "nacl.exceptions.CryptoError",
        "nacl.exceptions.InternalError",
        "nacl.exceptions.NotYetFinalized",
        "nacl.exceptions.AlreadyFinalized",
        "nacl.exceptions.InvalidkeyError",
        "nacl.exceptions.BadSignatureError",
        "nacl.exceptions.InvalidTag",
        "nacl.exceptions.InvalidKey",
        "nacl.exceptions.UnsupportedAlgorithm"
    ],
    "nacl.exceptions.InternalError": [
        "typing.inner"
    ],
    "nacl.exceptions.UnsupportedAlgorithm": [
        "typing.inner"
    ],
    "nacl.exceptions._Reasons": [],
    "nacl.public": [
        "nacl.utils",
        "nacl.public.SealedBox",
        "nacl.public.PublicKey",
        "typing.__init_subclass__",
        "nacl.public.Box",
        "typing._GenericAlias.__mro_entries__",
        "typing.inner",
        "nacl.public.PrivateKey",
        "typing.TypeVar.__init__"
    ],
    "nacl.public.Box": [
        "<builtin>.classmethod",
        "typing.inner"
    ],
    "nacl.public.PrivateKey": [
        "<builtin>.classmethod",
        "typing.inner"
    ],
    "nacl.public.PublicKey": [
        "typing.inner"
    ],
    "nacl.public.SealedBox": [
        "typing.inner"
    ],
    "nacl.signing": [
        "nacl.signing.SignedMessage",
        "nacl.signing.SigningKey",
        "nacl.bindings",
        "nacl.signing.VerifyKey"
    ],
    "nacl.signing.VerifyKey": [
        "typing.inner"
    ],
    "nacl.signing.VerifyKey.__init__": [
        "nacl.encoding.decode",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "nacl.signing.VerifyKey.verify": [
        "crypto_sign.crypto_sign_open",
        "nacl.encoding.decode",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "nacl.utils": [
        "nacl.utils.StringFixer",
        "nacl.utils.EncryptedMessage",
        "typing.TypeVar.__init__"
    ],
    "nacl.utils.EncryptedMessage": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "typing.inner"
    ],
    "os._Environ.__getitem__": [
        "<builtin>.KeyError",
        "os.decode",
        "os.encode"
    ],
    "paramiko": [
        "paramiko.transport",
        "paramiko._version",
        "paramiko.sftp_server",
        "paramiko.client",
        "paramiko.proxy"
    ],
    "paramiko.agent": [
        "paramiko.agent.AgentSSH",
        "paramiko.agent.AgentRequestHandler",
        "paramiko.agent.AgentServerProxy",
        "paramiko.agent.AgentLocalProxy",
        "paramiko.agent.AgentClientProxy",
        "paramiko.agent.AgentRemoteProxy",
        "paramiko.agent.Agent",
        "paramiko.agent.AgentProxyThread",
        "paramiko.py3compat.byte_chr",
        "paramiko.agent.AgentKey"
    ],
    "paramiko.agent.<lambda>": [],
    "paramiko.agent.Agent.__init__": [
        "paramiko.agent.AgentSSH.__init__",
        "paramiko.agent.get_agent_connection",
        "paramiko.agent.AgentSSH._connect"
    ],
    "paramiko.agent.AgentSSH._connect": [
        "paramiko.agent.AgentSSH._send_message",
        "paramiko.message.Message.get_int",
        "<builtin>.range",
        "<builtin>.tuple",
        "<list>.append"
    ],
    "paramiko.agent.AgentSSH._send_message": [
        "<builtin>.len",
        "paramiko.agent.AgentSSH._read_all",
        "<builtin>.ord",
        "paramiko.message.Message.__init__",
        "paramiko.common.asbytes",
        "paramiko.message.Message.get_byte"
    ],
    "paramiko.agent.get_agent_connection": [
        "_collections_abc.Mapping.__contains__",
        "socket.socket.__init__",
        "paramiko.util.retry_on_signal"
    ],
    "paramiko.auth_handler": [
        "paramiko.ssh_gss",
        "paramiko.message",
        "paramiko.server",
        "paramiko.auth_handler.GssapiWithMicAuthHandler",
        "paramiko.auth_handler.AuthHandler"
    ],
    "paramiko.auth_handler.AuthHandler._finalize_pubkey_algorithm": [
        "<builtin>.list",
        "paramiko.py3compat.u",
        "paramiko.transport.preferred_pubkeys",
        "<builtin>.filter",
        "paramiko.auth_handler.AuthHandler._log",
        "paramiko.py3compat.b"
    ],
    "paramiko.auth_handler.AuthHandler._get_key_type_and_bits": [
        "paramiko.rsakey.RSAKey.get_name"
    ],
    "paramiko.auth_handler.AuthHandler._get_session_blob": [
        "paramiko.auth_handler.AuthHandler._get_key_type_and_bits",
        "paramiko.message.Message.add_string",
        "paramiko.message.Message.add_boolean",
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_byte"
    ],
    "paramiko.auth_handler.AuthHandler._log": [
        "paramiko.transport.Transport._log"
    ],
    "paramiko.auth_handler.AuthHandler._request_auth": [
        "paramiko.message.Message.add_string",
        "paramiko.message.Message.__init__",
        "paramiko.transport.Transport._send_message",
        "paramiko.message.Message.add_byte"
    ],
    "paramiko.auth_handler.AuthHandler.auth_publickey": [
        "paramiko.auth_handler.AuthHandler._request_auth"
    ],
    "paramiko.auth_handler.AuthHandler.wait_for_response": [
        "threading.Event.is_set",
        "paramiko.transport.Transport.is_active",
        "<builtin>.issubclass",
        "threading.Event.wait",
        "paramiko.auth_handler.AuthHandler.is_authenticated"
    ],
    "paramiko.auth_handler._parse_service_accept": [
        "paramiko.auth_handler.AuthHandler._get_key_type_and_bits",
        "paramiko.rsakey.RSAKey.sign_ssh_data",
        "paramiko.auth_handler.AuthHandler._finalize_pubkey_algorithm",
        "paramiko.message.Message.add_string",
        "paramiko.message.Message.add_boolean",
        "paramiko.auth_handler.AuthHandler._get_session_blob",
        "paramiko.transport.Transport._send_message",
        "paramiko.message.Message.get_text",
        "paramiko.message.Message.__init__",
        "paramiko.auth_handler.AuthHandler._log",
        "paramiko.message.Message.add_byte"
    ],
    "paramiko.auth_handler._parse_userauth_success": [
        "paramiko.auth_handler.AuthHandler._log",
        "paramiko.transport.Transport._auth_trigger",
        "threading.Event.set"
    ],
    "paramiko.ber": [
        "paramiko.ber.BER",
        "paramiko.ber.BERException"
    ],
    "paramiko.ber.BER": [
        "<builtin>.bytes",
        "<builtin>.staticmethod"
    ],
    "paramiko.buffered_pipe": [
        "paramiko.buffered_pipe.BufferedPipe",
        "paramiko.buffered_pipe.PipeTimeout"
    ],
    "paramiko.buffered_pipe.BufferedPipe.__init__": [
        "threading.Condition.__init__"
    ],
    "paramiko.buffered_pipe.BufferedPipe.close": [
        "threading.Condition.notify_all",
        "paramiko.pipe.OrPipe.set"
    ],
    "paramiko.buffered_pipe.BufferedPipe.set_event": [
        "<builtin>.len",
        "paramiko.pipe.OrPipe.clear"
    ],
    "paramiko.channel": [
        "paramiko.file",
        "paramiko.channel.ChannelFile",
        "paramiko.pipe",
        "paramiko.channel.Channel",
        "paramiko.channel.ChannelStderrFile",
        "paramiko.channel.ChannelStdinFile"
    ],
    "paramiko.channel.Channel": [
        "paramiko.channel.open_only",
        "<builtin>.property"
    ],
    "paramiko.channel.Channel.__del__": [
        "paramiko.channel.Channel.close"
    ],
    "paramiko.channel.Channel.__init__": [
        "paramiko.util.get_logger",
        "<builtin>.str",
        "threading.Event.__init__",
        "threading.Condition.__init__",
        "paramiko.buffered_pipe.BufferedPipe.__init__"
    ],
    "paramiko.channel.Channel._close_internal": [
        "paramiko.message.Message.add_int",
        "paramiko.channel.Channel._send_eof",
        "paramiko.channel.Channel._set_closed",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_byte"
    ],
    "paramiko.channel.Channel._log": [
        "logging.Logger.log"
    ],
    "paramiko.channel.Channel._send_eof": [
        "paramiko.message.Message.add_int",
        "paramiko.channel.Channel._log",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_byte"
    ],
    "paramiko.channel.Channel._set_closed": [
        "threading.Condition.notify_all",
        "threading.Event.set",
        "paramiko.buffered_pipe.BufferedPipe.close"
    ],
    "paramiko.channel.Channel._set_remote_channel": [
        "paramiko.transport.Transport._sanitize_packet_size",
        "paramiko.channel.Channel._log"
    ],
    "paramiko.channel.Channel._set_transport": [
        "paramiko.util.get_logger",
        "paramiko.transport.Transport.get_log_channel"
    ],
    "paramiko.channel.Channel._set_window": [
        "paramiko.channel.Channel._log"
    ],
    "paramiko.channel.Channel.close": [
        "paramiko.pipe.PosixPipe.close",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.channel.Channel._close_internal"
    ],
    "paramiko.channel.Channel.fileno": [
        "paramiko.pipe.PosixPipe.fileno",
        "paramiko.pipe.make_pipe",
        "paramiko.buffered_pipe.BufferedPipe.set_event",
        "paramiko.pipe.make_or_pipe"
    ],
    "paramiko.channel.Channel.recv_ready": [
        "paramiko.buffered_pipe.BufferedPipe.read_ready"
    ],
    "paramiko.channel.open_only": [
        "functools.update_wrapper",
        "functools.wraps"
    ],
    "paramiko.client": [
        "paramiko.client.WarningPolicy",
        "paramiko.client.RejectPolicy",
        "paramiko.hostkeys",
        "paramiko.client.AutoAddPolicy",
        "paramiko.client.SSHClient",
        "paramiko.client.MissingHostKeyPolicy"
    ],
    "paramiko.common": [
        "<builtin>.range",
        "paramiko.py3compat.byte_chr",
        "paramiko.py3compat"
    ],
    "paramiko.common.asbytes": [
        "paramiko.message.Message.asbytes",
        "paramiko.py3compat.b",
        "paramiko.rsakey.RSAKey.asbytes"
    ],
    "paramiko.compress": [
        "paramiko.compress.ZlibCompressor",
        "paramiko.compress.ZlibDecompressor"
    ],
    "paramiko.config": [
        "paramiko.config.SSHConfigDict",
        "paramiko.ssh_exception",
        "paramiko.config.LazyFqdn",
        "paramiko.config.SSHConfig",
        "shlex"
    ],
    "paramiko.config.SSHConfig": [
        "<builtin>.classmethod",
        "re.compile"
    ],
    "paramiko.config.SSHConfig._does_match": [
        "paramiko.config.SSHConfig._pattern_matches",
        "paramiko.config.SSHConfig._should_fail",
        "paramiko.config.SSHConfig._tokenize",
        "<list>.append"
    ],
    "paramiko.config.SSHConfig._expand_variables": [
        "<builtin>.enumerate",
        "<builtin>.isinstance",
        "paramiko.config.SSHConfig._tokenize"
    ],
    "paramiko.config.SSHConfig._get_hosts": [
        "shlex.split"
    ],
    "paramiko.config.SSHConfig._lookup": [
        "paramiko.config.SSHConfig._expand_variables",
        "paramiko.config.SSHConfig._pattern_matches",
        "paramiko.config.SSHConfigDict.__init__",
        "paramiko.config.SSHConfig._does_match"
    ],
    "paramiko.config.SSHConfig._pattern_matches": [
        "<str>.split",
        "<builtin>.hasattr",
        "fnmatch.fnmatch"
    ],
    "paramiko.config.SSHConfig._tokenize": [
        "posixpath.expanduser",
        "<builtin>.str",
        "paramiko.config.SSHConfig._allowed_tokens",
        "paramiko.config.LazyFqdn.__init__",
        "<builtin>.repr",
        "getpass.getuser",
        "<map>.items"
    ],
    "paramiko.config.SSHConfig.canonicalize": [
        "paramiko.config._addressfamily_host_lookup"
    ],
    "paramiko.config.SSHConfig.lookup": [
        "paramiko.config.SSHConfig._lookup",
        "<str>.count",
        "paramiko.config.SSHConfig.canonicalize",
        "<builtin>.int"
    ],
    "paramiko.config.SSHConfig.parse": [
        "<str>.startswith",
        "<str>.lower",
        "paramiko.config.SSHConfig._get_hosts",
        "paramiko.config.SSHConfig._get_matches",
        "codecs.BufferedIncrementalDecoder.decode",
        "re.match",
        "<str>.group",
        "<list>.append",
        "<str>.endswith"
    ],
    "paramiko.dsskey": [
        "paramiko.dsskey.DSSKey",
        "paramiko.ber",
        "paramiko.pkey"
    ],
    "paramiko.dsskey.DSSKey": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "paramiko.ecdsakey": [
        "paramiko.ecdsakey._ECDSACurve",
        "paramiko.ecdsakey.ECDSAKey",
        "paramiko.ecdsakey._ECDSACurveSet"
    ],
    "paramiko.ecdsakey.ECDSAKey": [
        "<builtin>.classmethod",
        "paramiko.ecdsakey._ECDSACurve.__init__",
        "<builtin>.property",
        "paramiko.ecdsakey._ECDSACurveSet.__init__"
    ],
    "paramiko.ed25519key": [
        "nacl.signing",
        "paramiko.ed25519key.Ed25519Key"
    ],
    "paramiko.ed25519key.Ed25519Key": [
        "<builtin>.property"
    ],
    "paramiko.ed25519key.Ed25519Key.__init__": [
        "paramiko.message.Message.get_binary",
        "paramiko.pkey.PKey._check_type_and_load_cert",
        "<builtin>.ValueError",
        "<builtin>.open",
        "nacl.signing.VerifyKey.__init__"
    ],
    "paramiko.ed25519key.Ed25519Key.verify_ssh_sig": [
        "paramiko.message.Message.get_binary",
        "nacl.signing.VerifyKey.verify",
        "paramiko.message.Message.get_text"
    ],
    "paramiko.file": [
        "paramiko.file.BufferedFile"
    ],
    "paramiko.file.BufferedFile": [
        "<builtin>.property"
    ],
    "paramiko.hostkeys": [
        "paramiko.hostkeys.InvalidHostKey",
        "paramiko.hostkeys.HostKeyEntry",
        "paramiko.hostkeys.HostKeys"
    ],
    "paramiko.hostkeys.HostKeyEntry": [
        "<builtin>.classmethod"
    ],
    "paramiko.hostkeys.HostKeys": [
        "<builtin>.staticmethod"
    ],
    "paramiko.kex_curve25519": [
        "<builtin>.range",
        "paramiko.py3compat.byte_chr",
        "paramiko.kex_curve25519.KexCurve25519"
    ],
    "paramiko.kex_curve25519.KexCurve25519": [
        "<builtin>.classmethod"
    ],
    "paramiko.kex_curve25519.KexCurve25519._parse_kexecdh_reply": [
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.public_bytes",
        "paramiko.transport.Transport._verify_key",
        "paramiko.message.Message.get_binary",
        "paramiko.message.Message.add_string",
        "paramiko.message.Message.add_mpint",
        "paramiko.transport.Transport._set_K_H",
        "paramiko.message.Message.get_string",
        "paramiko.message.Message.asbytes",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.public_key",
        "paramiko.transport.Transport._activate_outbound",
        "paramiko.kex_curve25519.KexCurve25519._perform_exchange",
        "paramiko.message.Message.__init__",
        "cryptography.hazmat.primitives.asymmetric.x25519.from_public_bytes",
        "paramiko.message.Message.add"
    ],
    "paramiko.kex_curve25519.KexCurve25519._perform_exchange": [
        "cryptography.hazmat.primitives.constant_time.bytes_eq",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.exchange"
    ],
    "paramiko.kex_curve25519.KexCurve25519.is_available": [
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.generate"
    ],
    "paramiko.kex_curve25519.KexCurve25519.parse_next": [
        "paramiko.kex_curve25519.KexCurve25519._parse_kexecdh_reply"
    ],
    "paramiko.kex_curve25519.KexCurve25519.start_kex": [
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.public_bytes",
        "paramiko.transport.Transport._expect_packet",
        "paramiko.message.Message.add_string",
        "paramiko.transport.Transport._send_message",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.public_key",
        "cryptography.hazmat.primitives.asymmetric.x25519.generate",
        "paramiko.message.Message.__init__",
        "paramiko.message.Message.add_byte"
    ],
    "paramiko.kex_curve25519.is_available": [
        "cryptography.hazmat.primitives.asymmetric.x25519.generate"
    ],
    "paramiko.kex_ecdh_nist": [
        "paramiko.kex_ecdh_nist.KexNistp256",
        "paramiko.kex_ecdh_nist.KexNistp384",
        "paramiko.kex_ecdh_nist.KexNistp521",
        "<builtin>.range",
        "paramiko.py3compat.byte_chr"
    ],
    "paramiko.kex_gex": [
        "<builtin>.range",
        "paramiko.py3compat.byte_chr",
        "paramiko.kex_gex.KexGexSHA256",
        "paramiko.kex_gex.KexGex"
    ],
    "paramiko.kex_group1": [
        "<builtin>.range",
        "paramiko.py3compat.byte_chr",
        "paramiko.kex_group1.KexGroup1"
    ],
    "paramiko.kex_group14": [
        "paramiko.kex_group14.KexGroup14SHA256",
        "paramiko.kex_group14.KexGroup14"
    ],
    "paramiko.kex_group16": [
        "paramiko.kex_group16.KexGroup16SHA512"
    ],
    "paramiko.kex_gss": [
        "paramiko.kex_gss.KexGSSGroup1",
        "<builtin>.range",
        "paramiko.kex_gss.KexGSSGroup14",
        "paramiko.kex_gss.KexGSSGex",
        "paramiko.kex_gss.NullHostKey",
        "paramiko.py3compat.byte_chr"
    ],
    "paramiko.kex_gss.KexGSSGroup1": [
        "paramiko.py3compat.byte_chr"
    ],
    "paramiko.message": [
        "paramiko.message.Message"
    ],
    "paramiko.message.Message._add": [
        "paramiko.message.Message.add_string",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "paramiko.message.Message.add": [
        "paramiko.message.Message._add"
    ],
    "paramiko.message.Message.add_list": [
        "paramiko.message.Message.add_string"
    ],
    "paramiko.message.Message.add_mpint": [
        "paramiko.message.Message.add_string",
        "paramiko.util.deflate_long"
    ],
    "paramiko.message.Message.add_string": [
        "paramiko.common.asbytes",
        "<builtin>.len",
        "paramiko.message.Message.add_int"
    ],
    "paramiko.message.Message.get_binary": [
        "paramiko.message.Message.get_bytes",
        "paramiko.message.Message.get_int"
    ],
    "paramiko.message.Message.get_boolean": [
        "paramiko.message.Message.get_bytes"
    ],
    "paramiko.message.Message.get_byte": [
        "paramiko.message.Message.get_bytes"
    ],
    "paramiko.message.Message.get_int": [
        "paramiko.message.Message.get_bytes"
    ],
    "paramiko.message.Message.get_list": [
        "paramiko.message.Message.get_text"
    ],
    "paramiko.message.Message.get_so_far": [
        "paramiko.message.Message.rewind"
    ],
    "paramiko.message.Message.get_string": [
        "paramiko.message.Message.get_bytes",
        "paramiko.message.Message.get_int"
    ],
    "paramiko.message.Message.get_text": [
        "paramiko.message.Message.get_string",
        "paramiko.py3compat.u"
    ],
    "paramiko.packet": [
        "paramiko.packet.Packetizer",
        "paramiko.packet.NeedRekeyException"
    ],
    "paramiko.packet.Packetizer": [
        "<builtin>.pow",
        "<builtin>.property"
    ],
    "paramiko.packet.Packetizer.__init__": [
        "threading.RLock",
        "<builtin>.bytes"
    ],
    "paramiko.packet.Packetizer._check_keepalive": [
        "paramiko.transport._request"
    ],
    "paramiko.packet.Packetizer.close": [
        "socket.socket.close"
    ],
    "paramiko.packet.Packetizer.complete_handshake": [
        "threading.Timer.cancel"
    ],
    "paramiko.packet.Packetizer.read_all": [
        "paramiko.packet.Packetizer._check_keepalive",
        "<builtin>.bytes",
        "paramiko.packet.Packetizer.handshake_timed_out",
        "<builtin>.EOFError",
        "<builtin>.len"
    ],
    "paramiko.packet.Packetizer.read_message": [
        "<builtin>.len",
        "paramiko.py3compat.byte_ord",
        "paramiko.packet.Packetizer.read_all",
        "paramiko.util.constant_time_bytes_eq",
        "cryptography.hazmat.primitives.ciphers.base._CipherContext.update",
        "paramiko.message.Message.__init__",
        "paramiko.packet.compute_hmac"
    ],
    "paramiko.packet.Packetizer.readline": [
        "paramiko.py3compat.u",
        "<builtin>.len",
        "paramiko.packet.Packetizer._read_timeout"
    ],
    "paramiko.packet.Packetizer.send_message": [
        "<builtin>.len",
        "paramiko.packet.Packetizer.write_all",
        "paramiko.py3compat.byte_ord",
        "paramiko.packet.Packetizer._build_packet",
        "cryptography.hazmat.primitives.ciphers.base._CipherContext.update",
        "paramiko.common.asbytes",
        "paramiko.packet.compute_hmac"
    ],
    "paramiko.packet.Packetizer.start_handshake": [
        "threading.Timer.__init__",
        "<builtin>.float",
        "threading.Thread.start"
    ],
    "paramiko.packet.Packetizer.write_all": [
        "<builtin>.EOFError",
        "paramiko.packet.first_arg",
        "<builtin>.len"
    ],
    "paramiko.packet.compute_hmac": [
        "hmac.HMAC.digest",
        "hmac.HMAC.__init__"
    ],
    "paramiko.pipe": [
        "paramiko.pipe.PosixPipe",
        "paramiko.pipe.OrPipe",
        "paramiko.pipe.WindowsPipe"
    ],
    "paramiko.pipe.OrPipe.clear": [
        "paramiko.pipe.PosixPipe.clear"
    ],
    "paramiko.pipe.OrPipe.set": [
        "paramiko.pipe.PosixPipe.set"
    ],
    "paramiko.pipe.make_or_pipe": [
        "paramiko.pipe.OrPipe.__init__"
    ],
    "paramiko.pipe.make_pipe": [
        "paramiko.pipe.PosixPipe.__init__"
    ],
    "paramiko.pkey": [
        "paramiko.pkey.PKey",
        "paramiko.pkey.PublicBlob"
    ],
    "paramiko.pkey.PKey": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "re.compile",
        "cryptography.utils._ModuleWithDeprecations.__getattr__"
    ],
    "paramiko.pkey.PKey._check_type_and_load_cert": [
        "paramiko.message.Message.rewind",
        "paramiko.message.Message.get_text",
        "<builtin>.isinstance"
    ],
    "paramiko.pkey.PKey._read_private_key": [
        "codecs.BufferedIncrementalDecoder.decode",
        "paramiko.pkey.PKey._read_private_key_pem",
        "<builtin>.len"
    ],
    "paramiko.pkey.PKey._read_private_key_file": [
        "<builtin>.open",
        "codecs.BufferedIncrementalDecoder.__init__",
        "paramiko.pkey.PKey._read_private_key",
        "_bootlocale.getpreferredencoding"
    ],
    "paramiko.pkey.PKey._read_private_key_pem": [
        "paramiko.py3compat.b",
        "<builtin>.len",
        "base64.decodebytes"
    ],
    "paramiko.pkey.PKey.get_fingerprint": [
        "paramiko.rsakey.RSAKey.asbytes"
    ],
    "paramiko.pkey.from_private_key_file": [
        "paramiko.rsakey.RSAKey.__init__"
    ],
    "paramiko.primes": [
        "paramiko.primes.ModulusPack"
    ],
    "paramiko.proxy": [
        "paramiko.proxy.ProxyCommand"
    ],
    "paramiko.py3compat": [
        "<builtin>.len",
        "<builtin>.int",
        "paramiko.py3compat.long"
    ],
    "paramiko.py3compat.b": [
        "<builtin>.isinstance",
        "paramiko.message.Message.__repr__",
        "<builtin>.TypeError"
    ],
    "paramiko.py3compat.byte_chr": [
        "<builtin>.isinstance"
    ],
    "paramiko.rsakey": [
        "paramiko.rsakey.RSAKey"
    ],
    "paramiko.rsakey.RSAKey.__init__": [
        "paramiko.rsakey.RSAKey._from_private_key_file"
    ],
    "paramiko.rsakey.RSAKey._decode_key": [
        "<builtin>.str",
        "__init__.default_backend",
        "<builtin>.isinstance",
        "cryptography.hazmat.primitives.serialization.base.load_der_private_key",
        "abc.ABCMeta.__instancecheck__"
    ],
    "paramiko.rsakey.RSAKey._from_private_key_file": [
        "paramiko.rsakey.RSAKey._decode_key",
        "paramiko.pkey.PKey._read_private_key_file"
    ],
    "paramiko.rsakey.RSAKey.asbytes": [
        "paramiko.message.Message.add_string",
        "paramiko.message.Message.add_mpint",
        "paramiko.rsakey.public_numbers",
        "paramiko.message.Message.asbytes",
        "cryptography.hazmat.backends.openssl.rsa.e",
        "paramiko.message.Message.__init__",
        "cryptography.hazmat.backends.openssl.rsa.n"
    ],
    "paramiko.rsakey.RSAKey.sign_ssh_data": [
        "paramiko.message.Message.add_string",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.sign",
        "paramiko.message.Message.__init__"
    ],
    "paramiko.rsakey.public_numbers": [
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.private_numbers",
        "cryptography.hazmat.backends.openssl.rsa.public_numbers",
        "abc.ABCMeta.__instancecheck__"
    ],
    "paramiko.server": [
        "paramiko.server.InteractiveQuery",
        "paramiko.server.ServerInterface",
        "paramiko.server.SubsystemHandler"
    ],
    "paramiko.sftp": [
        "<builtin>.range",
        "paramiko.sftp.BaseSFTP",
        "paramiko.sftp.SFTPError"
    ],
    "paramiko.sftp_attr": [
        "paramiko.sftp_attr.SFTPAttributes"
    ],
    "paramiko.sftp_client": [
        "paramiko.sftp_client.SFTPClient",
        "paramiko.sftp_attr",
        "paramiko.sftp_client.SFTP",
        "paramiko.sftp",
        "paramiko.sftp_file"
    ],
    "paramiko.sftp_file": [
        "paramiko.sftp_file.SFTPFile"
    ],
    "paramiko.sftp_handle": [
        "paramiko.sftp_handle.SFTPHandle"
    ],
    "paramiko.sftp_server": [
        "paramiko.sftp_handle",
        "paramiko.sftp_si",
        "paramiko.sftp_server.SFTPServer"
    ],
    "paramiko.sftp_si": [
        "paramiko.sftp_si.SFTPServerInterface"
    ],
    "paramiko.ssh_exception": [],
    "paramiko.ssh_gss": [
        "<builtin>.hasattr",
        "paramiko.ssh_gss._SSH_GSSAuth",
        "paramiko.ssh_gss._SSH_GSSAPI_OLD",
        "paramiko.ssh_gss._SSH_GSSAPI_NEW",
        "paramiko.ssh_gss._SSH_SSPI"
    ],
    "paramiko.transport": [
        "cryptography.hazmat.primitives.ciphers.algorithms",
        "paramiko.primes",
        "cryptography.hazmat.backends",
        "paramiko.kex_group16",
        "paramiko.packet",
        "paramiko.kex_ecdh_nist",
        "paramiko.dsskey",
        "paramiko.channel",
        "paramiko.transport.ChannelMap",
        "paramiko.transport.SecurityOptions",
        "paramiko.compress",
        "paramiko.ed25519key",
        "paramiko.transport.Transport",
        "paramiko.kex_group1",
        "paramiko.kex_group14",
        "paramiko.rsakey",
        "paramiko.util",
        "paramiko.kex_gss",
        "paramiko.ecdsakey",
        "paramiko.kex_curve25519",
        "paramiko.auth_handler",
        "paramiko.kex_gex",
        "paramiko.sftp_client"
    ],
    "paramiko.transport.ChannelMap.__init__": [
        "weakref.WeakValueDictionary.__init__"
    ],
    "paramiko.transport.ChannelMap.get": [
        "weakref.WeakValueDictionary.get"
    ],
    "paramiko.transport.ChannelMap.put": [
        "weakref.WeakValueDictionary.__setitem__"
    ],
    "paramiko.transport.ChannelMap.values": [
        "weakref.WeakValueDictionary.values",
        "<builtin>.list"
    ],
    "paramiko.transport.Transport": [
        "<builtin>.object",
        "<builtin>.staticmethod",
        "paramiko.kex_curve25519.is_available",
        "<builtin>.property",
        "cryptography.utils._ModuleWithDeprecations.__getattr__"
    ],
    "paramiko.transport.Transport.__init__": [
        "socket.getaddrinfo",
        "paramiko.ssh_gss.GSSAuth",
        "threading.Condition.__init__",
        "paramiko.packet.Packetizer.set_log",
        "paramiko.util.retry_on_signal",
        "threading.Thread.__init__",
        "socket.socket.__init__",
        "threading.Thread.daemon",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.str",
        "paramiko.transport.ChannelMap.__init__",
        "paramiko.packet.Packetizer.__init__",
        "<builtin>.int",
        "threading.Event.__init__",
        "<builtin>.tuple",
        "paramiko.util.get_logger"
    ],
    "paramiko.transport.Transport._activate_inbound": [
        "paramiko.transport.Transport._get_cipher",
        "paramiko.transport.Transport._compute_key",
        "paramiko.packet.Packetizer.set_inbound_cipher"
    ],
    "paramiko.transport.Transport._activate_outbound": [
        "paramiko.packet.Packetizer.set_outbound_cipher",
        "<builtin>.sorted",
        "paramiko.transport.Transport._expect_packet",
        "paramiko.transport.Transport._compute_key",
        "paramiko.transport.Transport._get_cipher",
        "paramiko.transport.Transport._send_message",
        "paramiko.packet.Packetizer.need_rekey",
        "paramiko.message.Message.__init__",
        "<builtin>.len",
        "paramiko.message.Message.add_byte"
    ],
    "paramiko.transport.Transport._check_banner": [
        "paramiko.transport.Transport._log",
        "<builtin>.str",
        "<builtin>.range",
        "paramiko.packet.Packetizer.readline",
        "<builtin>.len"
    ],
    "paramiko.transport.Transport._compute_key": [
        "<builtin>.hasattr",
        "paramiko.transport.Transport._log",
        "paramiko.message.Message.add_mpint",
        "paramiko.message.Message.__init__",
        "<builtin>.setattr",
        "paramiko.message.Message.asbytes",
        "<builtin>.getattr",
        "paramiko.message.Message.add_bytes",
        "paramiko.py3compat.b",
        "<builtin>.len",
        "paramiko.message.Message.add_byte"
    ],
    "paramiko.transport.Transport._filter_algorithm": [
        "paramiko.transport.<genexpr>",
        "<builtin>.tuple",
        "<builtin>.getattr"
    ],
    "paramiko.transport.Transport._get_cipher": [
        "__init__.default_backend",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES.__init__",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.__init__",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.decryptor",
        "cryptography.hazmat.primitives.ciphers.modes.CTR.__init__",
        "typing.__new__",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.encryptor"
    ],
    "paramiko.transport.Transport._log": [
        "<builtin>.issubclass",
        "logging.Logger.log",
        "<builtin>.type"
    ],
    "paramiko.transport.Transport._log_agreement": [
        "paramiko.transport.Transport._log"
    ],
    "paramiko.transport.Transport._next_channel": [
        "paramiko.transport.ChannelMap.get"
    ],
    "paramiko.transport.Transport._parse_debug": [
        "paramiko.util.safe_string",
        "paramiko.transport.Transport._log",
        "paramiko.message.Message.get_string",
        "paramiko.message.Message.get_boolean"
    ],
    "paramiko.transport.Transport._parse_kex_init": [
        "paramiko.kex_curve25519.KexCurve25519.__init__",
        "<builtin>.list",
        "<builtin>.filter",
        "<builtin>.len"
    ],
    "paramiko.transport.Transport._really_parse_kex_init": [
        "paramiko.message.Message.get_bytes",
        "paramiko.message.Message.get_int",
        "paramiko.message.Message.get_list",
        "paramiko.message.Message.get_boolean"
    ],
    "paramiko.transport.Transport._sanitize_packet_size": [
        "paramiko.util.clamp_value"
    ],
    "paramiko.transport.Transport._sanitize_window_size": [
        "paramiko.util.clamp_value"
    ],
    "paramiko.transport.Transport._send_kex_init": [
        "paramiko.transport.preferred_macs",
        "paramiko.transport.preferred_ciphers",
        "paramiko.message.Message.asbytes",
        "paramiko.message.Message.add_int",
        "<builtin>.filter",
        "paramiko.transport.preferred_keys",
        "threading.Event.clear",
        "paramiko.message.Message.add_string",
        "<builtin>.list",
        "paramiko.message.Message.add_list",
        "paramiko.transport.preferred_kex",
        "<builtin>.len",
        "paramiko.message.Message.add_bytes",
        "paramiko.message.Message.add_byte",
        "paramiko.transport.preferred_compression",
        "paramiko.message.Message.add_boolean",
        "paramiko.transport.Transport._send_message",
        "<builtin>.bytes",
        "paramiko.message.Message.__init__"
    ],
    "paramiko.transport.Transport._send_message": [
        "paramiko.packet.Packetizer.send_message"
    ],
    "paramiko.transport.Transport._send_user_message": [
        "paramiko.transport.Transport._log",
        "threading.Event.wait",
        "threading.Event.is_set",
        "paramiko.transport.Transport._send_message"
    ],
    "paramiko.transport.Transport._verify_key": [
        "paramiko.ed25519key.Ed25519Key.verify_ssh_sig",
        "paramiko.message.Message.__init__",
        "paramiko.ed25519key.Ed25519Key.__init__"
    ],
    "paramiko.transport.Transport.auth_gssapi_keyex": [
        "paramiko.auth_handler.AuthHandler.auth_gssapi_keyex",
        "threading.Event.__init__",
        "paramiko.auth_handler.AuthHandler.__init__",
        "paramiko.auth_handler.AuthHandler.wait_for_response"
    ],
    "paramiko.transport.Transport.auth_gssapi_with_mic": [
        "paramiko.auth_handler.AuthHandler.__init__",
        "threading.Event.__init__",
        "paramiko.auth_handler.AuthHandler.auth_gssapi_with_mic",
        "paramiko.auth_handler.AuthHandler.wait_for_response"
    ],
    "paramiko.transport.Transport.auth_interactive": [
        "paramiko.auth_handler.AuthHandler.__init__",
        "paramiko.auth_handler.AuthHandler.auth_interactive",
        "threading.Event.__init__",
        "paramiko.auth_handler.AuthHandler.wait_for_response"
    ],
    "paramiko.transport.Transport.auth_password": [
        "paramiko.auth_handler.AuthHandler.__init__",
        "threading.Event.__init__",
        "paramiko.transport.Transport.auth_interactive",
        "paramiko.auth_handler.AuthHandler.wait_for_response",
        "paramiko.auth_handler.AuthHandler.auth_password"
    ],
    "paramiko.transport.Transport.auth_publickey": [
        "paramiko.auth_handler.AuthHandler.auth_publickey",
        "threading.Event.__init__",
        "paramiko.auth_handler.AuthHandler.__init__",
        "paramiko.auth_handler.AuthHandler.wait_for_response"
    ],
    "paramiko.transport.Transport.close": [
        "<builtin>.list",
        "paramiko.transport.ChannelMap.values",
        "paramiko.channel.Channel._unlink",
        "socket.socket.close",
        "paramiko.transport.Transport.stop_thread"
    ],
    "paramiko.transport.Transport.connect": [
        "paramiko.transport.Transport.set_gss_host",
        "paramiko.transport.Transport._log",
        "paramiko.transport.Transport.auth_password",
        "<builtin>.isinstance",
        "paramiko.transport.Transport.auth_gssapi_keyex",
        "paramiko.transport.Transport.get_remote_server_key",
        "paramiko.transport.Transport.auth_gssapi_with_mic",
        "paramiko.transport.Transport.start_client",
        "paramiko.transport.Transport.auth_publickey",
        "<builtin>.repr"
    ],
    "paramiko.transport.Transport.global_request": [
        "paramiko.transport.Transport._log",
        "paramiko.message.Message.add_string",
        "paramiko.message.Message.add_boolean",
        "paramiko.message.Message.__init__",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.add_byte"
    ],
    "paramiko.transport.Transport.open_channel": [
        "paramiko.transport.Transport._sanitize_packet_size",
        "paramiko.transport.ChannelMap.get",
        "threading.Event.is_set",
        "paramiko.transport.ChannelMap.put",
        "paramiko.transport.Transport._next_channel",
        "paramiko.message.Message.add_string",
        "threading.Event.wait",
        "threading.Event.__init__",
        "paramiko.channel.Channel._set_window",
        "paramiko.message.Message.add_int",
        "paramiko.channel.Channel.__init__",
        "paramiko.message.Message.__init__",
        "paramiko.channel.Channel._set_transport",
        "paramiko.transport.Transport._sanitize_window_size",
        "paramiko.transport.Transport._send_user_message",
        "paramiko.message.Message.add_byte"
    ],
    "paramiko.transport.Transport.run": [
        "paramiko.packet.Packetizer.read_message",
        "paramiko.transport.Transport._log",
        "<builtin>.hex",
        "paramiko.transport.Transport._parse_debug",
        "paramiko.transport.Transport._send_kex_init",
        "paramiko.channel.Channel._unlink",
        "paramiko.py3compat.b",
        "paramiko.transport.Transport._expect_packet",
        "paramiko.kex_curve25519.KexCurve25519.parse_next",
        "<builtin>.list",
        "paramiko.packet.Packetizer.write_all",
        "<builtin>.type",
        "paramiko.packet.Packetizer.need_rekey",
        "<builtin>.len",
        "paramiko.transport._parse_newkeys",
        "<builtin>.repr",
        "paramiko.auth_handler._handler_table",
        "<builtin>.str",
        "paramiko.transport._parse_channel_open_success",
        "paramiko.transport._negotiate_keys",
        "paramiko.transport.ChannelMap.values",
        "paramiko.transport._parse_ext_info",
        "paramiko.auth_handler._parse_service_accept",
        "paramiko.transport._parse_global_request",
        "socket.socket.close",
        "<builtin>.id",
        "paramiko.transport.Transport._check_banner",
        "paramiko.packet.Packetizer.complete_handshake",
        "paramiko.auth_handler._parse_userauth_success",
        "<builtin>.tuple",
        "paramiko.transport.Transport._ensure_authed",
        "paramiko.packet.Packetizer.start_handshake"
    ],
    "paramiko.transport.Transport.set_keepalive": [
        "paramiko.packet.Packetizer.set_keepalive",
        "_weakref.proxy"
    ],
    "paramiko.transport.Transport.start_client": [
        "paramiko.transport.Transport.get_exception",
        "threading.Event.is_set",
        "threading.Event.wait",
        "threading.Event.__init__",
        "threading.Thread.start"
    ],
    "paramiko.transport.Transport.stop_thread": [
        "threading.current_thread",
        "threading.Thread.is_alive",
        "paramiko.packet.Packetizer.close",
        "threading.Thread.join"
    ],
    "paramiko.transport._negotiate_keys": [
        "paramiko.kex_curve25519.KexCurve25519.start_kex",
        "paramiko.transport.Transport._parse_kex_init",
        "threading.Event.clear"
    ],
    "paramiko.transport._parse_channel_open_success": [
        "paramiko.transport.ChannelMap.get",
        "paramiko.transport.Transport._log",
        "paramiko.message.Message.get_int",
        "paramiko.channel.Channel._set_remote_channel",
        "threading.Event.set"
    ],
    "paramiko.transport._parse_ext_info": [
        "paramiko.message.Message.get_text",
        "paramiko.message.Message.get_string",
        "paramiko.transport.Transport._log",
        "paramiko.message.Message.get_int"
    ],
    "paramiko.transport._parse_global_request": [
        "paramiko.message.Message.get_text",
        "paramiko.transport.Transport._log",
        "paramiko.message.Message.get_boolean"
    ],
    "paramiko.transport._parse_newkeys": [
        "paramiko.transport.Transport._log",
        "paramiko.transport.Transport._activate_inbound",
        "threading.Event.set",
        "paramiko.packet.Packetizer.need_rekey"
    ],
    "paramiko.transport._request": [
        "paramiko.transport.Transport.global_request"
    ],
    "paramiko.transport.preferred_ciphers": [
        "paramiko.transport.Transport._filter_algorithm"
    ],
    "paramiko.transport.preferred_compression": [
        "paramiko.transport.Transport._filter_algorithm"
    ],
    "paramiko.transport.preferred_kex": [
        "paramiko.transport.Transport._filter_algorithm"
    ],
    "paramiko.transport.preferred_keys": [
        "paramiko.transport.Transport._filter_algorithm"
    ],
    "paramiko.transport.preferred_macs": [
        "paramiko.transport.Transport._filter_algorithm"
    ],
    "paramiko.transport.preferred_pubkeys": [
        "paramiko.transport.Transport._filter_algorithm"
    ],
    "paramiko.util": [
        "paramiko.util.PFilter",
        "paramiko.util.ClosingContextManager",
        "paramiko.common",
        "paramiko.config",
        "_thread._local"
    ],
    "paramiko.util.constant_time_bytes_eq": [
        "paramiko.py3compat.byte_ord",
        "<builtin>.len"
    ],
    "paramiko.util.deflate_long": [
        "<builtin>.enumerate",
        "paramiko.py3compat.byte_ord",
        "<builtin>.bytes"
    ],
    "paramiko.util.get_logger": [
        "logging.Filterer.addFilter",
        "logging.getLogger"
    ],
    "paramiko.util.retry_on_signal": [
        "paramiko.agent.<lambda>",
        "paramiko.agent.get_agent_connection.<lambda1>",
        "paramiko.transport.<lambda>",
        "paramiko.transport.Transport.__init__.<lambda1>",
        "paramiko.client.SSHClient.connect.<lambda1>"
    ],
    "paramiko.util.safe_string": [
        "paramiko.py3compat.byte_chr",
        "paramiko.py3compat.byte_ord"
    ],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "posixpath.abspath": [
        "posixpath.normpath",
        "<builtin>.isinstance",
        "posixpath.join",
        "posixpath.isabs",
        "os._fspath"
    ],
    "posixpath.basename": [
        "posixpath._get_sep",
        "<str>.rfind"
    ],
    "posixpath.dirname": [
        "<str>.rfind",
        "os._fspath",
        "posixpath._get_sep",
        "<builtin>.len"
    ],
    "posixpath.expanduser": [
        "<str>.startswith",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.isinstance",
        "_collections_abc.Mapping.__contains__",
        "<str>.find",
        "os._fspath",
        "os._fscodec.fsencode",
        "<str>.rstrip",
        "os._fscodec.fsdecode",
        "posixpath._get_sep",
        "os._Environ.__getitem__"
    ],
    "posixpath.isabs": [
        "posixpath._get_sep",
        "os._fspath",
        "<str>.startswith"
    ],
    "posixpath.join": [
        "os._fspath",
        "genericpath._check_arg_types",
        "<map>.endswith",
        "posixpath._get_sep",
        "<builtin>.map",
        "<str>.endswith"
    ],
    "posixpath.normcase": [
        "os._fspath"
    ],
    "posixpath.normpath": [
        "<list>.pop",
        "<builtin>.isinstance",
        "os._fspath",
        "<list>.append"
    ],
    "posixpath.splitext": [
        "genericpath._splitext",
        "<builtin>.isinstance"
    ],
    "queue": [
        "queue.Queue",
        "queue.LifoQueue",
        "queue.Full",
        "queue.PriorityQueue",
        "queue._PySimpleQueue"
    ],
    "queue.Queue.__init__": [
        "threading.Condition.__init__",
        "queue.Queue._init"
    ],
    "queue.Queue.get": [
        "threading.Condition.wait",
        "threading.Condition.__exit__",
        "<builtin>.ValueError",
        "threading.Condition.__enter__",
        "queue.Queue._qsize"
    ],
    "queue.Queue.put": [
        "threading.Condition.__exit__",
        "<builtin>.ValueError",
        "threading.Condition.__enter__",
        "queue.Queue._qsize",
        "threading.Condition.notify",
        "queue.Queue._put"
    ],
    "random": [
        "<builtin>.hasattr",
        "random.Random.__init__",
        "random.Random",
        "random.__init_subclass__",
        "random.SystemRandom"
    ],
    "random.Random.__init__": [
        "random.Random.seed"
    ],
    "random.Random.seed": [
        "<builtin>.isinstance",
        "<builtin>.ord",
        "<builtin>.super",
        "<builtin>.map",
        "<builtin>.len"
    ],
    "re": [
        "functools._lru_cache_wrapper.wrapper",
        "<builtin>.chr",
        "functools.lru_cache",
        "functools",
        "<builtin>.type",
        "enum",
        "functools.lru_cache.decorating_function",
        "copyreg",
        "copyreg.pickle",
        "<builtin>.globals",
        "sre_compile",
        "sre_compile.compile"
    ],
    "re._compile": [
        "<builtin>.TypeError",
        "<builtin>.next",
        "<builtin>.isinstance",
        "<builtin>.type",
        "sre_compile.isstring",
        "<builtin>.ValueError",
        "<builtin>.iter",
        "<builtin>.len",
        "sre_compile.compile"
    ],
    "re.compile": [
        "re._compile"
    ],
    "re.escape": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "re.match": [
        "re._compile",
        "<str>.match"
    ],
    "selectors": [
        "<builtin>.hasattr",
        "selectors.SelectSelector",
        "collections.namedtuple",
        "selectors._BaseSelectorImpl",
        "selectors._SelectorMapping",
        "selectors.BaseSelector",
        "<builtin>.globals",
        "selectors.PollSelector",
        "selectors._PollLikeSelector",
        "abc.__new__",
        "selectors.KqueueSelector"
    ],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors.BaseSelector.__exit__": [
        "selectors._BaseSelectorImpl.close"
    ],
    "selectors._BaseSelectorImpl.__init__": [
        "selectors._SelectorMapping.__init__"
    ],
    "selectors._BaseSelectorImpl._fileobj_lookup": [
        "selectors._fileobj_to_fd"
    ],
    "selectors._BaseSelectorImpl.register": [
        "selectors._BaseSelectorImpl._fileobj_lookup",
        "<builtin>.ValueError",
        "<builtin>.KeyError"
    ],
    "selectors._PollLikeSelector.__init__": [
        "selectors._BaseSelectorImpl.__init__",
        "<builtin>.super"
    ],
    "selectors._PollLikeSelector.register": [
        "selectors._BaseSelectorImpl.register",
        "<builtin>.super"
    ],
    "selectors._PollLikeSelector.select": [
        "selectors._BaseSelectorImpl._key_from_fd"
    ],
    "selectors._fileobj_to_fd": [
        "socketserver.TCPServer.fileno",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.int"
    ],
    "shlex": [
        "shlex._print_tokens",
        "shlex.shlex.__init__",
        "<builtin>.open",
        "<builtin>.len"
    ],
    "shlex.shlex.__next__": [
        "shlex.shlex.get_token"
    ],
    "shlex.shlex.get_token": [
        "<builtin>.print",
        "shlex.shlex.pop_source",
        "shlex.shlex.push_source",
        "shlex.shlex.get_token",
        "shlex.shlex.sourcehook",
        "shlex.shlex.read_token",
        "<builtin>.repr"
    ],
    "shlex.shlex.read_token": [
        "codecs.StreamRecoder.readline",
        "<builtin>.print",
        "codecs.StreamRecoder.read",
        "<builtin>.ValueError",
        "shlex.punctuation_chars",
        "<builtin>.repr"
    ],
    "shlex.shlex.sourcehook": [
        "posixpath.dirname",
        "ntpath.isabs",
        "<builtin>.isinstance",
        "ntpath.join",
        "posixpath.join",
        "posixpath.isabs",
        "ntpath.dirname",
        "<builtin>.open"
    ],
    "shlex.split": [
        "shlex.shlex.__init__",
        "<builtin>.list",
        "shlex.shlex.__iter__",
        "shlex.shlex.__next__"
    ],
    "shutil.get_terminal_size": [
        "os._Environ.__getitem__",
        "<builtin>.int"
    ],
    "signal": [
        "functools.update_wrapper",
        "functools.wraps",
        "<builtin>.globals"
    ],
    "six": [
        "six._LazyModule.__init__",
        "six.MovedAttribute.__init__",
        "<builtin>.getattr",
        "operator.itemgetter.__init__",
        "six._SixMetaPathImporter.__init__",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.globals",
        "six._MovedItems",
        "<builtin>.len",
        "six._SixMetaPathImporter._add_module",
        "operator.attrgetter.__init__",
        "operator.methodcaller.__init__",
        "<builtin>.enumerate",
        "six._add_doc",
        "<builtin>.int",
        "six._LazyDescr.__get__",
        "<builtin>.setattr",
        "six.MovedModule.__init__"
    ],
    "six.Module_six_moves_urllib": [
        "six._SixMetaPathImporter._get_module"
    ],
    "six.MovedAttribute.__init__": [
        "<builtin>.super",
        "six._LazyDescr.__init__"
    ],
    "six.MovedModule.__init__": [
        "<builtin>.super",
        "six._LazyDescr.__init__"
    ],
    "six.MovedModule._resolve": [
        "six._import_module"
    ],
    "six._LazyDescr.__get__": [
        "<builtin>.delattr",
        "six.MovedModule._resolve",
        "<builtin>.setattr"
    ],
    "socket": [
        "<builtin>.hasattr",
        "socket._GiveupOnSendfile",
        "io",
        "os._get_exports_list",
        "socket.SocketIO",
        "enum.EnumMeta._convert_",
        "socket.socket",
        "<list>.extend",
        "<list>.append",
        "<builtin>.getattr",
        "<builtin>.object"
    ],
    "socket.SocketIO": [
        "<builtin>.property"
    ],
    "socket._intenum_converter": [
        "enum.EnumMeta.__call__"
    ],
    "socket.getaddrinfo": [
        "encodings.search_function",
        "socket._intenum_converter",
        "encodings.idna.Codec.encode"
    ],
    "socket.socket": [
        "<builtin>.hasattr",
        "<builtin>.property"
    ],
    "socket.socket.__repr__": [
        "socket.socket.type",
        "<builtin>.str",
        "socket.socket.family",
        "enum.Enum.__str__",
        "<builtin>.getattr"
    ],
    "socket.socket.accept": [
        "socket.socket.__init__",
        "socket.socket.type",
        "socket.socket.family"
    ],
    "socket.socket.close": [
        "socket.socket._real_close"
    ],
    "socket.socket.family": [
        "socket._intenum_converter",
        "<builtin>.super"
    ],
    "socket.socket.type": [
        "socket._intenum_converter",
        "<builtin>.super"
    ],
    "socketserver": [
        "<builtin>.hasattr",
        "socketserver.ForkingTCPServer",
        "socketserver.ThreadingUDPServer",
        "socketserver.StreamRequestHandler",
        "<list>.extend",
        "socketserver.ThreadingMixIn",
        "socketserver.ForkingMixIn",
        "socketserver._NoThreads",
        "socketserver.BaseServer",
        "socketserver.ThreadingUnixDatagramServer",
        "socketserver.ForkingUDPServer",
        "socketserver.ThreadingUnixStreamServer",
        "socketserver.DatagramRequestHandler",
        "socketserver.ThreadingTCPServer",
        "socketserver.BaseRequestHandler",
        "socketserver.UnixStreamServer",
        "socketserver.TCPServer",
        "socketserver._Threads",
        "socketserver._SocketWriter",
        "socketserver.UDPServer",
        "socketserver.UnixDatagramServer"
    ],
    "socketserver.BaseRequestHandler.__init__": [
        "socketserver.BaseRequestHandler.finish",
        "socketserver.BaseRequestHandler.setup",
        "weakref.remove",
        "sshtunnel._ForwardHandler.handle",
        "paramiko.channel.Channel.__del__"
    ],
    "socketserver.BaseServer.__init__": [
        "threading.Event.__init__"
    ],
    "socketserver.BaseServer._handle_request_noblock": [
        "socketserver.BaseServer.verify_request",
        "socketserver.BaseServer.process_request",
        "socketserver.TCPServer.get_request",
        "socketserver.TCPServer.shutdown_request",
        "sshtunnel._ForwardServer.handle_error"
    ],
    "socketserver.BaseServer.finish_request": [
        "socketserver.BaseRequestHandler.__init__"
    ],
    "socketserver.BaseServer.process_request": [
        "socketserver.TCPServer.shutdown_request",
        "socketserver.BaseServer.finish_request"
    ],
    "socketserver.BaseServer.serve_forever": [
        "socketserver.BaseServer.service_actions",
        "socketserver.BaseServer._handle_request_noblock",
        "selectors._PollLikeSelector.register",
        "selectors._PollLikeSelector.select",
        "selectors.BaseSelector.__enter__",
        "selectors._PollLikeSelector.__init__",
        "threading.Event.set",
        "selectors.BaseSelector.__exit__",
        "threading.Event.clear"
    ],
    "socketserver.BaseServer.shutdown": [
        "threading.Event.wait"
    ],
    "socketserver.TCPServer.__init__": [
        "socketserver.TCPServer.server_activate",
        "socket.socket.__init__",
        "socketserver.BaseServer.__init__",
        "socketserver.TCPServer.server_bind"
    ],
    "socketserver.TCPServer.close_request": [
        "socket.socket.close"
    ],
    "socketserver.TCPServer.get_request": [
        "socket.socket.accept"
    ],
    "socketserver.TCPServer.server_close": [
        "socket.socket.close"
    ],
    "socketserver.TCPServer.shutdown_request": [
        "socketserver.TCPServer.close_request"
    ],
    "sre_compile": [
        "sre_parse",
        "<builtin>.tuple"
    ],
    "sre_compile._code": [
        "sre_compile._compile",
        "sre_compile._compile_info",
        "<list>.append"
    ],
    "sre_compile._compile": [
        "sre_compile._compile",
        "sre_parse.SubPattern.__getitem__",
        "sre_compile._simple",
        "sre_compile._combine_flags",
        "sre_compile._compile_charset",
        "sre_compile._optimize_charset",
        "<map>.get",
        "sre_constants.error.__init__"
    ],
    "sre_compile._compile_info": [
        "sre_parse.SubPattern.getwidth",
        "<str>.getwidth",
        "sre_compile._get_charset_prefix",
        "<builtin>.min",
        "sre_compile._compile_charset",
        "sre_compile._optimize_charset",
        "<list>.extend",
        "sre_compile._get_literal_prefix",
        "<builtin>.len",
        "sre_compile._generate_overlap_table"
    ],
    "sre_compile._get_charset_prefix": [
        "sre_parse.SubPattern.__getitem__",
        "sre_compile._get_iscased",
        "<builtin>.range",
        "sre_parse.SubPattern.__len__",
        "sre_compile._combine_flags",
        "<builtin>.any",
        "<builtin>.map"
    ],
    "sre_compile._get_literal_prefix": [
        "sre_compile._get_iscased",
        "sre_compile._combine_flags",
        "<list>.extend",
        "sre_compile._get_literal_prefix",
        "<builtin>.len"
    ],
    "sre_compile._mk_bitmap": [
        "<builtin>.range",
        "<builtin>.len",
        "sre_compile.<listcomp>"
    ],
    "sre_compile._optimize_charset": [
        "sre_compile._bytes_to_codes",
        "<builtin>.range",
        "<builtin>.bytearray",
        "<builtin>.any",
        "<builtin>.bytes",
        "<list>.append",
        "<builtin>.map",
        "<builtin>.len",
        "sre_compile._mk_bitmap"
    ],
    "sre_compile._simple": [
        "sre_compile._simple",
        "<builtin>.len"
    ],
    "sre_compile.compile": [
        "<str>.items",
        "sre_parse.parse",
        "sre_compile._code",
        "<builtin>.print",
        "sre_compile.isstring",
        "sre_parse.groups",
        "<builtin>.tuple",
        "<map>.items"
    ],
    "sre_parse.State.closegroup": [
        "sre_parse.SubPattern.getwidth"
    ],
    "sre_parse.State.opengroup": [
        "sre_parse.groups"
    ],
    "sre_parse.SubPattern.__getitem__": [
        "<builtin>.isinstance",
        "sre_parse.SubPattern.__init__"
    ],
    "sre_parse.SubPattern.__setitem__": [
        "sre_parse.SubPattern.__len__",
        "sre_parse.SubPattern.__getitem__"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.min",
        "sre_parse.SubPattern.getwidth",
        "<builtin>.max"
    ],
    "sre_parse.Tokenizer.__init__": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.Tokenizer.get": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.getuntil": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.len"
    ],
    "sre_parse.Tokenizer.getwhile": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.range"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse._class_escape": [
        "<builtin>.chr",
        "sre_parse.Tokenizer.getwhile",
        "<builtin>.ord",
        "<builtin>.int",
        "<builtin>.len"
    ],
    "sre_parse._parse": [
        "sre_parse.Tokenizer.seek",
        "sre_parse._parse_flags",
        "sre_parse.State.opengroup",
        "sre_parse.SubPattern.__init__",
        "sre_parse.SubPattern.__len__",
        "sre_parse.Tokenizer.get",
        "<builtin>.len",
        "sre_parse._uniq",
        "sre_parse.SubPattern.__getitem__",
        "<builtin>.int",
        "<builtin>.OverflowError",
        "sre_parse._parse_sub",
        "sre_parse.Tokenizer.tell",
        "sre_parse._escape",
        "<builtin>.AssertionError",
        "sre_parse.State.closegroup",
        "sre_parse.SubPattern.append",
        "<builtin>.range",
        "sre_parse._class_escape",
        "sre_parse.Tokenizer.getuntil",
        "sre_parse.Tokenizer.match",
        "sre_parse.SubPattern.__setitem__"
    ],
    "sre_parse._parse_flags": [
        "<builtin>.len",
        "sre_parse.Tokenizer.get"
    ],
    "sre_parse._parse_sub": [
        "sre_parse.SubPattern.__getitem__",
        "sre_parse.SubPattern.__init__",
        "sre_parse.SubPattern.append",
        "sre_parse.SubPattern.__len__",
        "sre_parse.Tokenizer.match",
        "sre_parse._parse",
        "<list>.extend",
        "<list>.append",
        "sre_parse.Tokenizer.tell",
        "<builtin>.len"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "sre_parse.parse": [
        "sre_parse.SubPattern.dump",
        "sre_parse.State.__init__",
        "sre_parse.fix_flags",
        "sre_parse.Tokenizer.error",
        "sre_parse._parse_sub",
        "sre_parse.Tokenizer.__init__"
    ],
    "sshtunnel": [
        "socket",
        "queue",
        "sshtunnel._cli_main",
        "sshtunnel.BaseSSHTunnelForwarderError",
        "argparse",
        "sshtunnel.HandlerSSHTunnelForwarderError",
        "sshtunnel.SSHTunnelForwarder",
        "ntpath.join",
        "posixpath.join",
        "sshtunnel._ForwardServer",
        "sshtunnel._ThreadingForwardServer",
        "logging.addLevelName",
        "paramiko",
        "sshtunnel._StreamForwardServer",
        "sshtunnel._ThreadingStreamForwardServer",
        "socketserver",
        "os",
        "sshtunnel.SSHTunnelForwarder.__del__",
        "getpass",
        "sshtunnel._ForwardHandler",
        "logging"
    ],
    "sshtunnel.SSHTunnelForwarder": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "sshtunnel.SSHTunnelForwarder.__del__": [
        "logging.Logger.warning",
        "sshtunnel.SSHTunnelForwarder.stop",
        "sshtunnel.SSHTunnelForwarder.is_active"
    ],
    "sshtunnel.SSHTunnelForwarder.__enter__": [
        "sshtunnel.SSHTunnelForwarder.start",
        "sshtunnel.SSHTunnelForwarder.__exit__"
    ],
    "sshtunnel.SSHTunnelForwarder.__exit__": [
        "sshtunnel.SSHTunnelForwarder.stop"
    ],
    "sshtunnel.SSHTunnelForwarder.__init__": [
        "sshtunnel._check_paramiko_handlers",
        "sshtunnel.SSHTunnelForwarder._consolidate_auth",
        "sshtunnel.SSHTunnelForwarder._consolidate_binds",
        "sshtunnel.SSHTunnelForwarder._process_deprecated",
        "sshtunnel.SSHTunnelForwarder._get_binds",
        "sshtunnel.check_host",
        "sshtunnel.check_port",
        "<builtin>.isinstance",
        "sshtunnel.create_logger",
        "<builtin>.ValueError",
        "logging.Logger.debug",
        "sshtunnel.check_address",
        "logging.Logger.info",
        "sshtunnel.SSHTunnelForwarder._read_ssh_config"
    ],
    "sshtunnel.SSHTunnelForwarder.__repr__": [
        "sshtunnel.SSHTunnelForwarder.__str__"
    ],
    "sshtunnel.SSHTunnelForwarder.__str__": [
        "binascii.hexlify",
        "sshtunnel._remove_none_values",
        "<builtin>.any"
    ],
    "sshtunnel.SSHTunnelForwarder._check_is_started": [
        "sshtunnel.HandlerSSHTunnelForwarderError.__init__",
        "sshtunnel.BaseSSHTunnelForwarderError.__init__",
        "sshtunnel.SSHTunnelForwarder.is_active"
    ],
    "sshtunnel.SSHTunnelForwarder._check_tunnel": [
        "sshtunnel.local_address",
        "socket.socket.__init__",
        "<builtin>.isinstance",
        "sshtunnel._ForwardServer.local_port",
        "logging.Logger.debug",
        "logging.Logger.info",
        "socket.socket.close",
        "sshtunnel._ForwardServer.local_host",
        "sshtunnel._ForwardServer.remote_address",
        "queue.Queue.get"
    ],
    "sshtunnel.SSHTunnelForwarder._connect_to_gateway": [
        "threading.Thread.is_alive",
        "paramiko.pkey.PKey.get_fingerprint",
        "sshtunnel.SSHTunnelForwarder._stop_transport",
        "sshtunnel.SSHTunnelForwarder._get_transport",
        "logging.Logger.debug",
        "paramiko.transport.Transport.connect",
        "<builtin>.len"
    ],
    "sshtunnel.SSHTunnelForwarder._consolidate_auth": [
        "posixpath.expanduser",
        "sshtunnel.SSHTunnelForwarder.read_private_key_file",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "sshtunnel.SSHTunnelForwarder.get_keys",
        "logging.Logger.warning",
        "genericpath.exists"
    ],
    "sshtunnel.SSHTunnelForwarder._consolidate_binds": [
        "<builtin>.range",
        "<builtin>.ValueError",
        "<builtin>.len",
        "<list>.extend"
    ],
    "sshtunnel.SSHTunnelForwarder._create_tunnels": [
        "sshtunnel.SSHTunnelForwarder._make_ssh_forward_server",
        "sshtunnel.SSHTunnelForwarder.is_active",
        "<builtin>.zip",
        "sshtunnel.SSHTunnelForwarder._connect_to_gateway",
        "logging.Logger.error"
    ],
    "sshtunnel.SSHTunnelForwarder._get_binds": [
        "<builtin>.isinstance",
        "sshtunnel.check_addresses",
        "<builtin>.enumerate",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "sshtunnel.SSHTunnelForwarder._get_transport": [
        "enum.__repr__",
        "socket.socket.type",
        "paramiko.transport.Transport.__init__",
        "threading.Thread.daemon",
        "<builtin>.isinstance",
        "socket.socket.family",
        "logging.Logger.debug",
        "paramiko.transport.Transport.use_compression",
        "paramiko.transport.Transport.set_keepalive",
        "<builtin>.repr"
    ],
    "sshtunnel.SSHTunnelForwarder._make_ssh_forward_handler_class": [
        "sshtunnel.SSHTunnelForwarder._make_ssh_forward_handler_class.Handler"
    ],
    "sshtunnel.SSHTunnelForwarder._make_ssh_forward_server": [
        "sshtunnel.address_to_str",
        "sshtunnel.SSHTunnelForwarder._make_ssh_forward_handler_class",
        "sshtunnel.SSHTunnelForwarder._raise",
        "<builtin>.isinstance",
        "<list>.append",
        "sshtunnel.SSHTunnelForwarder._make_ssh_forward_server_class",
        "sshtunnel._ForwardServer.__init__"
    ],
    "sshtunnel.SSHTunnelForwarder._process_deprecated": [
        "warnings.warn",
        "<builtin>.ValueError",
        "warnings._showwarnmsg",
        "warnings.WarningMessage.__init__",
        "<str>.format"
    ],
    "sshtunnel.SSHTunnelForwarder._raise": [
        "sshtunnel.BaseSSHTunnelForwarderError.__init__",
        "<builtin>.repr"
    ],
    "sshtunnel.SSHTunnelForwarder._read_ssh_config": [
        "posixpath.expanduser",
        "_bootlocale.getpreferredencoding",
        "paramiko.config.SSHConfig.__init__",
        "paramiko.config.SSHConfig.parse",
        "codecs.BufferedIncrementalDecoder.__init__",
        "logging.Logger.warning",
        "<builtin>.int",
        "paramiko.config.SSHConfig.lookup",
        "logging.Logger.info",
        "<builtin>.open",
        "paramiko.proxy.ProxyCommand.__init__",
        "getpass.getuser"
    ],
    "sshtunnel.SSHTunnelForwarder._serve_forever_wrapper": [
        "socketserver.BaseServer.serve_forever",
        "sshtunnel.address_to_str",
        "sshtunnel._ForwardServer.local_address",
        "logging.Logger.info",
        "sshtunnel._ForwardServer.remote_address"
    ],
    "sshtunnel.SSHTunnelForwarder._stop_transport": [
        "socketserver.BaseServer.shutdown",
        "sshtunnel.SSHTunnelForwarder.is_active",
        "sshtunnel.address_to_str",
        "<builtin>.isinstance",
        "paramiko.transport.Transport.close",
        "os.unlink",
        "sshtunnel.SSHTunnelForwarder._check_is_started",
        "paramiko.transport.Transport.stop_thread",
        "logging.Logger.debug",
        "sshtunnel._ForwardServer.local_address",
        "socketserver.TCPServer.server_close",
        "logging.Logger.info",
        "sshtunnel._ForwardServer.remote_address",
        "logging.Logger.error",
        "<builtin>.repr"
    ],
    "sshtunnel.SSHTunnelForwarder.check_tunnels": [
        "sshtunnel.SSHTunnelForwarder._check_tunnel"
    ],
    "sshtunnel.SSHTunnelForwarder.close": [
        "sshtunnel.SSHTunnelForwarder.stop"
    ],
    "sshtunnel.SSHTunnelForwarder.get_agent_keys": [
        "<builtin>.list",
        "paramiko.agent.AgentSSH.get_keys",
        "logging.Logger.info",
        "<builtin>.len",
        "paramiko.agent.Agent.__init__"
    ],
    "sshtunnel.SSHTunnelForwarder.get_keys": [
        "posixpath.expanduser",
        "<builtin>.hasattr",
        "sshtunnel.SSHTunnelForwarder.read_private_key_file",
        "sshtunnel.SSHTunnelForwarder.get_agent_keys",
        "socket.socket.__repr__",
        "posixpath.join",
        "logging.Logger.warning",
        "logging.Logger.info",
        "genericpath.isfile",
        "<builtin>.len",
        "<map>.keys"
    ],
    "sshtunnel.SSHTunnelForwarder.is_active": [
        "paramiko.transport.Transport.is_active"
    ],
    "sshtunnel.SSHTunnelForwarder.local_bind_address": [
        "<builtin>.len",
        "sshtunnel.BaseSSHTunnelForwarderError.__init__",
        "sshtunnel.SSHTunnelForwarder._check_is_started"
    ],
    "sshtunnel.SSHTunnelForwarder.local_bind_addresses": [
        "sshtunnel.SSHTunnelForwarder._check_is_started"
    ],
    "sshtunnel.SSHTunnelForwarder.local_bind_host": [
        "<builtin>.len",
        "sshtunnel.BaseSSHTunnelForwarderError.__init__",
        "sshtunnel.SSHTunnelForwarder._check_is_started"
    ],
    "sshtunnel.SSHTunnelForwarder.local_bind_hosts": [
        "sshtunnel.SSHTunnelForwarder._check_is_started"
    ],
    "sshtunnel.SSHTunnelForwarder.local_bind_port": [
        "<builtin>.len",
        "sshtunnel.BaseSSHTunnelForwarderError.__init__",
        "sshtunnel.SSHTunnelForwarder._check_is_started"
    ],
    "sshtunnel.SSHTunnelForwarder.local_bind_ports": [
        "sshtunnel.SSHTunnelForwarder._check_is_started"
    ],
    "sshtunnel.SSHTunnelForwarder.local_is_up": [
        "sshtunnel.check_address",
        "sshtunnel.SSHTunnelForwarder.check_tunnels",
        "<map>.get"
    ],
    "sshtunnel.SSHTunnelForwarder.read_private_key_file": [
        "paramiko.pkey.from_private_key_file",
        "<builtin>.hasattr",
        "logging.Logger.debug",
        "logging.Logger.error"
    ],
    "sshtunnel.SSHTunnelForwarder.restart": [
        "sshtunnel.SSHTunnelForwarder.start",
        "sshtunnel.SSHTunnelForwarder.stop"
    ],
    "sshtunnel.SSHTunnelForwarder.start": [
        "<map>.values",
        "sshtunnel.SSHTunnelForwarder.is_active",
        "threading.Thread.daemon",
        "threading.Thread.__init__",
        "sshtunnel.address_to_str",
        "sshtunnel.SSHTunnelForwarder._raise",
        "sshtunnel.SSHTunnelForwarder.stop",
        "threading.Thread.start",
        "logging.Logger.warning",
        "sshtunnel._ForwardServer.local_port",
        "<builtin>.any",
        "sshtunnel.SSHTunnelForwarder._check_tunnel",
        "sshtunnel.SSHTunnelForwarder._create_tunnels"
    ],
    "sshtunnel.SSHTunnelForwarder.stop": [
        "sshtunnel.address_to_str",
        "logging.Logger.info",
        "logging.Logger.debug",
        "sshtunnel.SSHTunnelForwarder._stop_transport",
        "<str>.join"
    ],
    "sshtunnel.SSHTunnelForwarder.tunnel_bindings": [
        "<builtin>.dict"
    ],
    "sshtunnel._ForwardHandler._redirect": [
        "logging.Logger.log",
        "paramiko.channel.Channel.recv",
        "paramiko.channel.Channel.sendall",
        "paramiko.channel.Channel.recv_ready",
        "paramiko.channel.Channel.fileno"
    ],
    "sshtunnel._ForwardHandler.handle": [
        "sshtunnel._ForwardHandler._redirect",
        "<builtin>.isinstance",
        "logging.Logger.log",
        "paramiko.transport.Transport.open_channel",
        "paramiko.channel.Channel.close",
        "sshtunnel.get_connection_id",
        "socket.socket.close",
        "sshtunnel.BaseSSHTunnelForwarderError.__init__",
        "paramiko.channel.Channel.getpeername",
        "<builtin>.repr"
    ],
    "sshtunnel._ForwardServer": [
        "<builtin>.property"
    ],
    "sshtunnel._ForwardServer.__init__": [
        "queue.Queue.__init__",
        "socketserver.TCPServer.__init__",
        "sshtunnel.create_logger"
    ],
    "sshtunnel._ForwardServer.handle_error": [
        "sshtunnel.remote_address",
        "queue.Queue.put",
        "logging.Logger.error",
        "sys.exc_info"
    ],
    "sshtunnel._StreamForwardServer": [
        "<builtin>.property"
    ],
    "sshtunnel._StreamForwardServer.__init__": [
        "sshtunnel.create_logger"
    ],
    "sshtunnel._add_handler": [
        "logging.Logger.addHandler",
        "logging.Handler.setLevel",
        "logging.Handler.setFormatter",
        "logging.Formatter.__init__"
    ],
    "sshtunnel._bindlist": [
        "<builtin>.len",
        "<builtin>.int"
    ],
    "sshtunnel._check_paramiko_handlers": [
        "logging.Formatter.__init__",
        "logging.Logger.addHandler",
        "logging.getLogger",
        "logging.StreamHandler.__init__",
        "logging.Handler.setFormatter"
    ],
    "sshtunnel._cli_main": [
        "sshtunnel.SSHTunnelForwarder.__enter__",
        "codecs.BufferedIncrementalDecoder.getstate",
        "sshtunnel.open_tunnel",
        "codecs.BufferedIncrementalDecoder.decode",
        "<builtin>.min",
        "sshtunnel._parse_arguments",
        "sshtunnel._remove_none_values",
        "sshtunnel.SSHTunnelForwarder.__exit__"
    ],
    "sshtunnel._parse_arguments": [
        "argparse.ArgumentParser.parse_args",
        "<builtin>.vars",
        "<str>.format",
        "argparse._ActionsContainer.add_argument",
        "logging.getLevelName",
        "argparse.ArgumentParser.__init__"
    ],
    "sshtunnel._remove_none_values": [
        "<builtin>.map",
        "<builtin>.list"
    ],
    "sshtunnel.address_to_str": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "sshtunnel.check_address": [
        "posixpath.dirname",
        "sshtunnel.check_host",
        "sshtunnel.check_port",
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.ValueError",
        "os.access",
        "genericpath.exists"
    ],
    "sshtunnel.check_addresses": [
        "<builtin>.AssertionError",
        "<builtin>.all",
        "<builtin>.isinstance",
        "<builtin>.any",
        "sshtunnel.check_address"
    ],
    "sshtunnel.check_host": [
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "sshtunnel.check_port": [
        "<builtin>.isinstance"
    ],
    "sshtunnel.create_logger": [
        "sshtunnel._check_paramiko_handlers",
        "logging.Handler.setLevel",
        "<builtin>.isinstance",
        "__init__.captureWarnings",
        "logging.Logger.setLevel",
        "sshtunnel._add_handler",
        "<builtin>.any",
        "logging.getLogger",
        "logging.StreamHandler.__init__"
    ],
    "sshtunnel.get_connection_id": [],
    "sshtunnel.open_tunnel": [
        "sshtunnel.SSHTunnelForwarder._process_deprecated",
        "sshtunnel.SSHTunnelForwarder.__init__",
        "<builtin>.isinstance",
        "sshtunnel.create_logger",
        "warnings.warn"
    ],
    "string": [
        "string._TemplateMetaclass.__init__",
        "string._TemplateMetaclass",
        "string.Formatter",
        "string.Template"
    ],
    "string._TemplateMetaclass.__init__": [
        "re.escape",
        "<builtin>.super",
        "re.compile",
        "enum.IntFlag.__or__"
    ],
    "subprocess": [
        "<builtin>.hasattr",
        "subprocess.Popen",
        "subprocess.SubprocessError",
        "signal",
        "subprocess.CalledProcessError",
        "subprocess.TimeoutExpired",
        "subprocess._use_posix_spawn",
        "subprocess.CompletedProcess",
        "<builtin>.getattr"
    ],
    "subprocess.Popen.__init__": [
        "<builtin>.hasattr",
        "<builtin>.bool",
        "subprocess.Popen._get_handles",
        "<builtin>.TypeError",
        "_io.open",
        "<builtin>.isinstance",
        "subprocess.Popen._execute_child",
        "<builtin>.ValueError",
        "<list>.append",
        "subprocess._cleanup",
        "<builtin>.filter",
        "_io.TextIOWrapper",
        "warnings.warn"
    ],
    "subprocess.Popen._execute_child": [
        "<builtin>.hasattr",
        "<builtin>.bool",
        "<builtin>.getattr",
        "os._fscodec.fsdecode",
        "<builtin>.set",
        "<builtin>.issubclass",
        "subprocess.Popen._handle_exitstatus",
        "<builtin>.isinstance",
        "<builtin>.list",
        "<builtin>.bytearray",
        "os._fscodec.fsencode",
        "<list>.append",
        "<builtin>.len",
        "posixpath.dirname",
        "<builtin>.TypeError",
        "subprocess.Popen._posix_spawn",
        "<builtin>.int",
        "<builtin>.map",
        "<builtin>.sorted",
        "<builtin>.ValueError",
        "<builtin>.bytes",
        "<builtin>.tuple",
        "subprocess.Popen._close_pipe_fds"
    ],
    "tempfile._RandomNameSequence": [
        "<builtin>.property"
    ],
    "tempfile": [
        "<builtin>.hasattr",
        "tempfile._RandomNameSequence",
        "tempfile.SpooledTemporaryFile",
        "tempfile._TemporaryFileCloser",
        "tempfile.TemporaryDirectory",
        "tempfile._TemporaryFileWrapper"
    ],
    "threading": [
        "<builtin>.hasattr",
        "traceback",
        "<builtin>.set",
        "_threading_local",
        "_weakrefset.WeakSet.__init__",
        "itertools.count",
        "<list>.append",
        "threading._MainThread.__init__"
    ],
    "threading.Condition.__init__": [
        "_collections.deque",
        "threading.RLock"
    ],
    "threading.Condition.notify": [
        "threading.Condition._is_owned",
        "<builtin>.RuntimeError"
    ],
    "threading.Condition.notify_all": [
        "threading.Condition.notify",
        "<builtin>.len"
    ],
    "threading.Condition.wait": [
        "threading.Condition._is_owned",
        "threading.Condition._release_save",
        "<builtin>.RuntimeError",
        "threading.Condition._acquire_restore"
    ],
    "threading.Event.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Event.clear": [
        "threading.Condition.__enter__",
        "threading.Condition.__exit__"
    ],
    "threading.Event.set": [
        "threading.Condition.__enter__",
        "threading.Condition.notify_all",
        "threading.Condition.__exit__"
    ],
    "threading.Event.wait": [
        "threading.Condition.wait",
        "threading.Condition.__enter__",
        "threading.Condition.__exit__"
    ],
    "threading.RLock": [
        "threading._RLock.__init__",
        "_thread.RLock"
    ],
    "threading.Thread.__init__": [
        "threading.current_thread",
        "<builtin>.str",
        "threading.Thread.daemon",
        "threading.Event.__init__",
        "_weakrefset.WeakSet.add",
        "threading._newname",
        "threading._make_invoke_excepthook"
    ],
    "threading.Thread._stop": [
        "threading.Thread.daemon"
    ],
    "threading.Thread._wait_for_tstate_lock": [
        "threading.Thread._stop",
        "threading._DummyThread._stop"
    ],
    "threading.Thread.daemon": [
        "threading.Event.is_set",
        "<builtin>.RuntimeError"
    ],
    "threading.Thread.is_alive": [
        "threading.Thread._wait_for_tstate_lock",
        "threading.Event.is_set"
    ],
    "threading.Thread.join": [
        "threading.current_thread",
        "threading.Event.is_set",
        "<builtin>.RuntimeError",
        "<builtin>.max",
        "threading.Thread._wait_for_tstate_lock"
    ],
    "threading.Thread.run": [
        "sshtunnel.SSHTunnelForwarder._serve_forever_wrapper"
    ],
    "threading.Thread.start": [
        "threading.Event.wait",
        "threading.Event.is_set",
        "<builtin>.RuntimeError"
    ],
    "threading.Timer.__init__": [
        "threading.Thread.__init__",
        "threading.Event.__init__"
    ],
    "threading.Timer.cancel": [
        "threading.Event.set"
    ],
    "threading.Timer.run": [
        "threading.Event.wait",
        "threading.Event.is_set",
        "threading.Event.set"
    ],
    "threading._DummyThread.__init__": [
        "threading.Thread.__init__",
        "threading._newname",
        "threading.Thread._set_ident",
        "threading.Thread._set_native_id"
    ],
    "threading._DummyThread._stop": [],
    "threading._MainThread.__init__": [
        "threading.Thread.__init__",
        "threading.Thread._set_native_id",
        "threading.Thread._set_ident",
        "threading.Thread._set_tstate_lock",
        "threading.Event.set"
    ],
    "threading.current_thread": [
        "threading._DummyThread.__init__",
        "_thread.get_ident"
    ],
    "tokenize": [
        "<builtin>.sorted",
        "<builtin>.set",
        "re.compile",
        "tokenize.group",
        "codecs",
        "tokenize.main",
        "token",
        "tokenize._all_string_prefixes",
        "tokenize.maybe",
        "<builtin>.any",
        "<builtin>.map"
    ],
    "tokenize.TokenInfo": [
        "<builtin>.property"
    ],
    "tokenize._all_string_prefixes": [],
    "tokenize.detect_encoding": [
        "tokenize.find_cookie",
        "tokenize.read_or_stop"
    ],
    "tokenize.find_cookie": [
        "tokenize._get_normal_name"
    ],
    "tokenize.group": [],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.open": [
        "tokenize.detect_encoding",
        "codecs.BufferedIncrementalDecoder.__init__"
    ],
    "traceback": [
        "traceback.TracebackException",
        "traceback.FrameSummary",
        "traceback.StackSummary"
    ],
    "types.DynamicClassAttribute.__get__": [
        "<builtin>.AttributeError",
        "enum.value",
        "enum.name"
    ],
    "typing": [
        "typing.SupportsRound",
        "typing.TextIO",
        "typing.IO",
        "typing.SupportsAbs",
        "typing.Generic",
        "typing.TypedDict",
        "typing._alias",
        "typing.TypeVar",
        "typing._Immutable",
        "typing.re",
        "typing._Final",
        "typing.Protocol",
        "typing.SupportsBytes",
        "typing.BinaryIO",
        "typing.inner",
        "typing.SupportsFloat",
        "typing._TypingEmpty",
        "typing.TypeVar.__init__",
        "typing._SpecialForm",
        "typing.__new__",
        "typing._GenericAlias",
        "typing.SupportsIndex",
        "typing._SpecialForm.__init__",
        "typing._TypingEllipsis",
        "typing.NamedTuple",
        "typing._GenericAlias.__mro_entries__",
        "typing.NamedTupleMeta",
        "typing._VariadicGenericAlias",
        "typing.ForwardRef",
        "typing.io",
        "typing._ProtocolMeta",
        "typing.SupportsInt",
        "typing.SupportsComplex",
        "typing._GenericAlias.__setattr__",
        "typing.runtime_checkable",
        "typing.__init_subclass__",
        "typing._TypedDictMeta",
        "typing._GenericAlias.__init__"
    ],
    "typing.BinaryIO": [
        "typing.inner",
        "abc.abstractmethod"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing.IO": [
        "typing.inner",
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.TextIO": [
        "typing.inner",
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "typing.TypeVar.__init__": [
        "<builtin>.bool",
        "<builtin>.TypeError",
        "<builtin>.ValueError",
        "<builtin>.tuple",
        "typing._type_check",
        "<builtin>.len"
    ],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._GenericAlias.__hash__": [
        "<builtin>.hash",
        "typing._SpecialForm.__hash__",
        "typing._GenericAlias.__hash__",
        "typing.ForwardRef.__hash__",
        "<builtin>.frozenset"
    ],
    "typing._GenericAlias.__init__": [
        "<builtin>.isinstance",
        "typing._GenericAlias.__setattr__",
        "typing._collect_type_vars",
        "<builtin>.tuple",
        "<map>.get"
    ],
    "typing._GenericAlias.__mro_entries__": [
        "<builtin>.issubclass",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<builtin>.any",
        "typing._GenericAlias.__eq__"
    ],
    "typing._GenericAlias.__setattr__": [
        "<builtin>.super",
        "typing._is_dunder",
        "<builtin>.setattr"
    ],
    "typing._GenericAlias.copy_with": [
        "typing._GenericAlias.__init__"
    ],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._VariadicGenericAlias": [
        "typing._tp_cache"
    ],
    "typing._VariadicGenericAlias.__getitem__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "typing.inner",
        "<builtin>.len"
    ],
    "typing.__class_getitem__": [
        "typing._check_generic",
        "typing._GenericAlias.__init__"
    ],
    "typing.__getitem__": [
        "typing._subs_tvars",
        "typing.inner",
        "typing._remove_dups_flatten",
        "typing._check_generic",
        "typing._type_check",
        "typing._GenericAlias.__init__"
    ],
    "typing.__getitem_inner__": [
        "typing._type_check",
        "typing._GenericAlias.copy_with"
    ],
    "typing.__init_subclass__": [
        "typing.__init_subclass__",
        "typing._GenericAlias.__eq__",
        "typing._collect_type_vars"
    ],
    "typing.__new__": [
        "typing._make_nmtuple"
    ],
    "typing._alias": [
        "typing._GenericAlias.__init__"
    ],
    "typing._make_nmtuple": [
        "<builtin>.dict",
        "collections.namedtuple"
    ],
    "typing._remove_dups_flatten": [
        "<builtin>.set",
        "<builtin>.isinstance",
        "typing._GenericAlias.__hash__",
        "typing.ForwardRef.__hash__",
        "<builtin>.tuple",
        "<builtin>.len"
    ],
    "typing._subs_tvars": [
        "<builtin>.isinstance",
        "<builtin>.list",
        "<builtin>.enumerate",
        "<builtin>.tuple",
        "typing._GenericAlias.copy_with"
    ],
    "typing._tp_cache": [
        "functools.update_wrapper",
        "functools.lru_cache",
        "functools.wraps",
        "functools.decorating_function",
        "<list>.append"
    ],
    "typing._type_check": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "typing.ForwardRef.__eq__",
        "<builtin>.isinstance",
        "<builtin>.type",
        "typing.ForwardRef.__init__",
        "typing._GenericAlias.__eq__",
        "typing._SpecialForm.__eq__"
    ],
    "typing.inner": [
        "typing._SpecialForm.__hash__",
        "typing.__getitem__",
        "typing._GenericAlias.__hash__",
        "typing.ForwardRef.__hash__",
        "typing.__getitem_inner__",
        "typing.__class_getitem__"
    ],
    "urllib.parse": [
        "urllib.parse.DefragResultBytes",
        "urllib.parse.ParseResult",
        "re.compile",
        "urllib.parse.DefragResult",
        "collections.namedtuple",
        "urllib.parse.ParseResultBytes",
        "urllib.parse._fix_result_transcoding",
        "urllib.parse._NetlocResultMixinBase",
        "urllib.parse.SplitResultBytes",
        "urllib.parse.Quoter",
        "<builtin>.bytes",
        "urllib.parse._NetlocResultMixinStr",
        "<builtin>.frozenset",
        "urllib.parse._ResultMixinBytes",
        "urllib.parse._ResultMixinStr",
        "urllib.parse._NetlocResultMixinBytes",
        "urllib.parse.SplitResult"
    ],
    "warnings": [
        "<builtin>.hasattr",
        "warnings._processoptions",
        "warnings.filterwarnings",
        "warnings.simplefilter"
    ],
    "warnings.WarningMessage.__init__": [],
    "warnings._add_filter": [
        "<list>.remove",
        "<list>.append",
        "warnings._filters_mutated",
        "<list>.insert"
    ],
    "warnings._filters_mutated": [],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "<str>.strip",
        "linecache.getline",
        "tracemalloc"
    ],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.issubclass",
        "<builtin>.__import__",
        "<builtin>.getattr"
    ],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings._processoptions": [
        "<builtin>.print",
        "warnings._setoption"
    ],
    "warnings._setoption": [
        "warnings._getcategory",
        "<builtin>.int",
        "re.escape",
        "warnings.filterwarnings",
        "<builtin>.len",
        "warnings._getaction"
    ],
    "warnings._showwarnmsg": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "logging._showwarning"
    ],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg"
    ],
    "warnings.catch_warnings.__init__": [],
    "warnings.filterwarnings": [
        "<builtin>.issubclass",
        "warnings._add_filter",
        "re.compile",
        "<builtin>.isinstance"
    ],
    "warnings.formatwarning": [
        "warnings.WarningMessage.__init__",
        "warnings._formatwarnmsg_impl"
    ],
    "warnings.simplefilter": [
        "warnings._add_filter",
        "<builtin>.isinstance"
    ],
    "warnings.warn": [
        "warnings._is_internal_frame",
        "<builtin>.TypeError",
        "warnings.warn_explicit",
        "<builtin>.issubclass",
        "<builtin>.range",
        "<builtin>.isinstance",
        "warnings._next_external_frame",
        "<builtin>.type"
    ],
    "warnings.warn_explicit": [
        "<builtin>.str",
        "warnings._showwarnmsg",
        "<builtin>.issubclass",
        "<builtin>.isinstance",
        "<map>.clear",
        "<map>.get",
        "<builtin>.RuntimeError",
        "<builtin>.int",
        "linecache.getlines",
        "warnings.WarningMessage.__init__"
    ],
    "weakref": [],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "weakref.WeakValueDictionary.__init__": [
        "weakref.WeakValueDictionary.update",
        "<builtin>.set",
        "_weakref.ref"
    ],
    "weakref.WeakValueDictionary.__setitem__": [
        "weakref.__new__",
        "weakref.KeyedRef.__init__"
    ],
    "weakref.WeakValueDictionary.update": [
        "<builtin>.hasattr",
        "<builtin>.dict",
        "weakref.WeakValueDictionary._commit_removals",
        "weakref.KeyedRef.__init__"
    ],
    "weakref.WeakValueDictionary.values": [
        "_weakrefset._IterationGuard.__exit__",
        "_weakrefset._IterationGuard.__init__",
        "_weakrefset._IterationGuard.__enter__"
    ],
    "weakref.finalize": [
        "cryptography.x509.extensions.ExtensionType",
        "argparse.ArgumentParser._get_nargs_pattern",
        "paramiko.pkey.PKey.get_fingerprint",
        "cryptography.hazmat.backends.openssl.backend.Backend.create_symmetric_encryption_ctx",
        "threading.Timer.__init__",
        "sre_compile.compile",
        "paramiko.rsakey.RSAKey.sign_ssh_data",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers",
        "cryptography.x509.extensions.CertificatePolicies",
        "paramiko.buffered_pipe.BufferedPipe",
        "six._MovedItems",
        "cryptography.hazmat.primitives._serialization.PBES",
        "threading.Condition.notify_all",
        "cryptography.hazmat.primitives.hashes.SHAKE256",
        "socketserver.UnixStreamServer",
        "cryptography.utils._ModuleWithDeprecations.__init__",
        "logging.LogRecord.getMessage",
        "sre_parse._escape",
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.public_bytes",
        "cryptography.hazmat.primitives.hashes.BLAKE2b",
        "paramiko.util.clamp_value",
        "cryptography.hazmat.primitives.hashes.SHA512_256",
        "cryptography.hazmat.primitives.ciphers.modes.CTR.validate_for_algorithm",
        "socketserver.BaseRequestHandler.finish",
        "paramiko.channel.Channel.recv",
        "weakref.WeakValueDictionary.__setitem__",
        "logging.Logger.isEnabledFor",
        "paramiko.pipe.make_pipe",
        "cryptography.hazmat._oid.SignatureAlgorithmOID",
        "cryptography.hazmat.primitives._serialization.PublicFormat",
        "paramiko.transport.preferred_keys",
        "cryptography.hazmat.primitives.asymmetric.x25519.from_public_bytes",
        "cryptography.utils.InterfaceNotImplemented",
        "nacl.signing.SignedMessage",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_mem_bio_gc",
        "argparse._StoreFalseAction.__init__",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.__init__",
        "enum.EnumMeta.__call__",
        "cryptography.hazmat.bindings.openssl.binding.Binding.__init__",
        "argparse.Action.__init__",
        "sre_parse.State.__init__",
        "calendar._localized_month.__init__",
        "codecs.BufferedIncrementalDecoder.__init__",
        "enum.Enum.__str__",
        "cryptography.hazmat.backends.openssl.dsa._DSAPrivateKey",
        "paramiko.transport.Transport.set_keepalive",
        "typing.ForwardRef",
        "cryptography.hazmat.backends.openssl.dh._DHPublicKey",
        "paramiko.message.Message",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithAuthenticationTag",
        "paramiko.transport.<genexpr>",
        "paramiko.transport.Transport._log",
        "paramiko.ssh_exception.ConfigParseError",
        "datetime.timedelta.__neg__",
        "six.MovedModule",
        "typing.Protocol",
        "enum.name",
        "paramiko.channel.Channel._close_internal",
        "email.errors.StartBoundaryNotFoundDefect",
        "cryptography.x509.extensions.AccessDescription",
        "cryptography.hazmat.backends.openssl.backend.Backend.__init__",
        "cryptography.hazmat.bindings.openssl.binding._openssl_assert",
        "email.errors.CloseBoundaryNotFoundDefect",
        "logging.Handler.acquire",
        "paramiko.transport._request",
        "paramiko.channel.open_only",
        "nacl.exceptions.InvalidKey",
        "ipaddress._BaseNetwork",
        "selectors.KqueueSelector",
        "cryptography.hazmat.primitives.asymmetric.padding.OAEP",
        "logging.Logger.callHandlers",
        "cryptography.x509.base.CertificateRevocationListBuilder",
        "cryptography.hazmat.primitives.ciphers.base._AEADEncryptionContext",
        "nacl.signing.VerifyKey.verify",
        "paramiko.transport.Transport._get_cipher",
        "cryptography.utils._ModuleWithDeprecations.__setattr__",
        "paramiko.channel.Channel._set_window",
        "cryptography.x509.extensions.AuthorityKeyIdentifier",
        "logging.Formatter.__init__",
        "typing.runtime_checkable",
        "paramiko.hostkeys.HostKeyEntry",
        "ipaddress._prefix_from_prefix_string",
        "cryptography.hazmat.primitives.hashes.SHA3_512",
        "base64._input_type_check",
        "socketserver.BaseServer.serve_forever",
        "sre_parse.SubPattern.__init__",
        "typing._SpecialForm.__hash__",
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext",
        "shlex.punctuation_chars",
        "urllib.parse.SplitResult",
        "typing._make_nmtuple",
        "cryptography.utils.deprecated",
        "paramiko.config.SSHConfigDict.__init__",
        "encodings.search_function",
        "logging.Logger.findCaller",
        "socketserver.BaseRequestHandler",
        "cryptography.hazmat.backends.openssl.hashes._HashContext.__init__",
        "cryptography.x509.extensions.TLSFeature",
        "paramiko.transport.Transport._send_message",
        "cryptography.hazmat.backends.openssl.backend.Backend._bytes_to_bio",
        "sre_parse.Tokenizer.__init__",
        "socketserver.BaseServer.__init__",
        "genericpath.exists",
        "threading.current_thread",
        "paramiko.kex_gex.KexGex",
        "cryptography.hazmat.primitives.hashes.Hash",
        "paramiko.server.SubsystemHandler",
        "cryptography.hazmat.backends.openssl.backend.GetCipherByName",
        "socketserver.TCPServer.fileno",
        "cryptography.hazmat.primitives.ciphers.algorithms.IDEA",
        "sshtunnel.SSHTunnelForwarder._raise",
        "cryptography.hazmat.primitives.asymmetric.dh.DHParameters",
        "six._LazyModule",
        "paramiko.ssh_gss._SSH_SSPI",
        "cryptography.hazmat.primitives.ciphers.base._CipherContext.__init__",
        "queue.Queue.get",
        "_collections_abc.Mapping.__contains__",
        "socketserver.BaseServer.process_request",
        "cryptography.x509.certificate_transparency.SignedCertificateTimestamp",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithTweak",
        "urllib.parse.ParseResultBytes",
        "<builtin>.classmethod",
        "sshtunnel.SSHTunnelForwarder._get_transport",
        "queue.Queue._put",
        "_bootlocale.getpreferredencoding",
        "logging.Manager._clear_cache",
        "ed448._Ed448PrivateKey",
        "paramiko.kex_gss.KexGSSGroup14",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES",
        "ipaddress.IPv6Address.__init__",
        "cryptography.hazmat.backends.openssl.dsa._DSAPublicKey",
        "typing.SupportsFloat",
        "threading.Thread.is_alive",
        "functools.total_ordering",
        "enum._find_data_type",
        "cryptography.hazmat.primitives._serialization.Encoding",
        "sshtunnel._ThreadingStreamForwardServer",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers",
        "logging.NullHandler",
        "linecache.getlines",
        "socket.socket._real_close",
        "paramiko.transport.Transport.__init__",
        "sre_parse._parse",
        "cryptography.hazmat.primitives.constant_time.bytes_eq",
        "paramiko.auth_handler.AuthHandler.wait_for_response",
        "paramiko.ssh_exception.NoValidConnectionsError",
        "socketserver.BaseRequestHandler.__init__",
        "ipaddress._parse_hextet",
        "paramiko.message.Message.add_mpint",
        "calendar._localized_month",
        "weakref.__new__",
        "hmac.HMAC.update",
        "paramiko.util.retry_on_signal",
        "argparse.ArgumentParser._check_value",
        "paramiko.kex_ecdh_nist.KexNistp256",
        "cryptography.hazmat.backends.openssl.rsa.RSAPublicNumbers.__init__",
        "paramiko.kex_curve25519.is_available",
        "socketserver.BaseServer.service_actions",
        "six.MovedModule._resolve",
        "typing._subs_tvars",
        "logging._register_at_fork_reinit_lock",
        "socketserver.BaseRequestHandler.setup",
        "threading.Condition._release_save",
        "paramiko.auth_handler.AuthHandler._finalize_pubkey_algorithm",
        "threading.RLock",
        "paramiko.kex_curve25519.KexCurve25519._parse_kexecdh_reply",
        "typing._ProtocolMeta",
        "datetime.timezone",
        "typing.ForwardRef.__hash__",
        "cryptography.hazmat.primitives.ciphers.base._AEADDecryptionContext",
        "logging.Handler.setFormatter",
        "weakref.WeakValueDictionary.values",
        "logging.Manager.getLogger",
        "paramiko.kex_curve25519.KexCurve25519.parse_next",
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7SignatureBuilder",
        "paramiko.primes.ModulusPack",
        "enum._missing_",
        "cryptography.hazmat.primitives.ciphers.modes.ECB",
        "paramiko.ssh_exception.BadAuthenticationType",
        "ipaddress.IPv4Address",
        "hmac.HMAC._current",
        "cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm",
        "paramiko.packet.compute_hmac",
        "cryptography.x509.extensions.AuthorityInformationAccess",
        "nacl.exceptions.InvalidTag",
        "weakref.remove",
        "paramiko.channel.Channel.recv_ready",
        "cryptography.x509.base.Version",
        "paramiko.packet.Packetizer._check_keepalive",
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12KeyAndCertificates",
        "paramiko.auth_handler.GssapiWithMicAuthHandler",
        "sshtunnel._parse_arguments",
        "sshtunnel.SSHTunnelForwarder._consolidate_binds",
        "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__init__",
        "paramiko.pkey.PublicBlob",
        "cryptography.hazmat.primitives.ciphers.algorithms.key_size",
        "logging._StderrHandler",
        "paramiko.transport.Transport.stop_thread",
        "enum.__repr__",
        "cryptography.hazmat.backends.openssl.backend.Backend._create_evp_pkey_gc",
        "socket.socket.family",
        "paramiko.server.ServerInterface",
        "logging.PercentStyle.usesTime",
        "paramiko.ssh_exception.AuthenticationException",
        "typing.SupportsInt",
        "nacl.bindings.sodium_core._sodium_init",
        "nacl.public.Box",
        "enum.<lambda>",
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey",
        "argparse.consume_optional",
        "email.errors.UndecodableBytesDefect",
        "paramiko.config.SSHConfig._get_hosts",
        "paramiko.pipe.PosixPipe.__init__",
        "logging.Logger.error",
        "ed448.Ed448PrivateKey",
        "cryptography.hazmat.primitives.ciphers.algorithms.SM4",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey",
        "paramiko.channel.Channel.close",
        "paramiko.ed25519key.Ed25519Key",
        "enum.EnumMeta._create_",
        "fnmatch._compile_pattern",
        "threading.name",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.encryptor",
        "cryptography.utils._ModuleWithDeprecations",
        "ipaddress._parse_octet",
        "urllib.parse.DefragResult",
        "cryptography.utils.Enum",
        "paramiko.util.ClosingContextManager",
        "sshtunnel.check_addresses",
        "paramiko.kex_gss.KexGSSGex",
        "sre_compile._get_literal_prefix",
        "paramiko.rsakey.RSAKey._from_private_key_file",
        "paramiko.message.Message.get_byte",
        "enum.Enum.__hash__",
        "nacl.encoding._Encoder",
        "linecache.getline",
        "paramiko.agent.AgentLocalProxy",
        "cryptography.x509.base.RevokedCertificate",
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey",
        "paramiko.transport.preferred_macs",
        "paramiko.client.AutoAddPolicy",
        "sshtunnel.SSHTunnelForwarder._serve_forever_wrapper",
        "typing._alias",
        "paramiko.transport.Transport._auth_trigger",
        "paramiko.rsakey.RSAKey.asbytes",
        "typing._GenericAlias",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey",
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_setup",
        "datetime.__new__",
        "threading.Condition.__exit__",
        "socketserver.ThreadingTCPServer",
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey.__init__",
        "nacl.signing.VerifyKey",
        "cryptography.hazmat.backends.openssl.hashes._HashContext",
        "cryptography.x509.extensions.InhibitAnyPolicy",
        "weakref.WeakValueDictionary.update",
        "datetime._create",
        "sshtunnel.SSHTunnelForwarder._process_deprecated",
        "logging.PercentStyle.__init__",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1",
        "sshtunnel._cli_main",
        "cryptography.x509.extensions.NoticeReference",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatRSA",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey",
        "paramiko.py3compat.byte_ord",
        "logging.Logger.addHandler",
        "cryptography.hazmat.primitives._serialization.BestAvailableEncryption",
        "paramiko.auth_handler.AuthHandler.is_authenticated",
        "paramiko.transport.ChannelMap.get",
        "traceback.StackSummary",
        "email.errors.MessageError",
        "cryptography.x509.extensions.DuplicateExtension",
        "paramiko.transport.Transport._check_banner",
        "sre_parse.Tokenizer.match",
        "socketserver._Threads",
        "ipaddress._split_addr_prefix",
        "cryptography.x509.general_name.GeneralName",
        "paramiko.packet.Packetizer.set_inbound_cipher",
        "paramiko.sftp.SFTPError",
        "sshtunnel.local_address",
        "paramiko.kex_gss.NullHostKey",
        "nacl.encoding.decode",
        "socketserver.ThreadingMixIn",
        "argparse._Section.__init__",
        "paramiko.agent.AgentKey",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP384R1",
        "argparse.consume_positionals",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey",
        "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey._raw_public_bytes",
        "paramiko.pipe.PosixPipe.close",
        "sre_parse.Tokenizer.seek",
        "six._LazyModule.__init__",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce.nonce",
        "paramiko.transport.Transport._sanitize_window_size",
        "paramiko.channel.Channel.getpeername",
        "typing._SpecialForm.__eq__",
        "cryptography.hazmat.bindings.openssl.binding.init_static_locks",
        "argparse._StoreConstAction.__init__",
        "paramiko.packet.Packetizer.set_log",
        "functools.cached_property.__set_name__",
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_sign",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey",
        "tokenize._get_normal_name",
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "paramiko.agent.AgentSSH._connect",
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.__init__",
        "sshtunnel.SSHTunnelForwarder.__del__",
        "sre_parse._parse_sub",
        "sshtunnel.SSHTunnelForwarder._make_ssh_forward_server_class",
        "paramiko.channel.Channel._set_transport",
        "cryptography.x509.extensions.PolicyInformation",
        "enum.value",
        "paramiko.config.SSHConfig._tokenize",
        "cryptography.x509.name.RelativeDistinguishedName",
        "paramiko.packet.Packetizer.complete_handshake",
        "cryptography.hazmat.backends.openssl.backend.Backend.activate_osrandom_engine",
        "paramiko.agent.AgentSSH",
        "cryptography.x509.extensions.SignedCertificateTimestamps",
        "socketserver.BaseServer.finish_request",
        "datetime._days_before_year",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey",
        "paramiko.transport.preferred_ciphers",
        "socket.socket.accept",
        "genericpath.isfile",
        "paramiko.transport.Transport._sanitize_packet_size",
        "logging.Handler.handle",
        "sre_compile._simple",
        "sshtunnel._ForwardServer",
        "cryptography.hazmat.backends.openssl.backend.Backend.register_cipher_adapter",
        "enum._EnumDict.__setitem__",
        "six.Module_six_moves_urllib_request",
        "paramiko.transport.Transport._activate_inbound",
        "argparse._ActionsContainer._registry_get",
        "paramiko.config.SSHConfig",
        "paramiko.transport._parse_ext_info",
        "paramiko.channel.Channel.sendall",
        "re.escape",
        "hmac.HMAC.__init__",
        "socket.socket.__repr__",
        "sshtunnel.address_to_str",
        "sre_parse.Tokenizer.getuntil",
        "ipaddress.IPv6Network",
        "logging.Logger.__init__",
        "sshtunnel.open_tunnel",
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.update",
        "subprocess.Popen",
        "paramiko.transport.Transport._compute_key",
        "paramiko.transport.Transport._send_kex_init",
        "nacl.exceptions._Reasons",
        "paramiko.sftp_server.SFTPServer",
        "six._LazyDescr",
        "ed25519._Ed25519PublicKey",
        "argparse._VersionAction.__init__",
        "enum.EnumMeta._convert_",
        "typing._TypingEmpty",
        "typing._remove_dups_flatten",
        "enum.IntFlag.__or__",
        "encodings.idna.StreamWriter",
        "paramiko.kex_group16.KexGroup16SHA512",
        "re.compile",
        "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey",
        "socket.socket",
        "email.errors.NoBoundaryInMultipartDefect",
        "paramiko.packet.Packetizer.handshake_timed_out",
        "logging.Formatter.formatMessage",
        "cryptography.x509.extensions.UserNotice",
        "selectors._PollLikeSelector.select",
        "cryptography.x509.base.Attributes",
        "ipaddress.IPv4Network.__init__",
        "sre_parse._parse_flags",
        "selectors._SelectorMapping",
        "enum._high_bit",
        "logging.getLevelName",
        "__future__._Feature.__init__",
        "threading.Thread.__init__",
        "paramiko.transport.Transport._next_channel",
        "cryptography.hazmat.primitives.asymmetric.ec.ECDH",
        "paramiko.compress.ZlibDecompressor",
        "argparse.format",
        "typing.TypeVar.__init__",
        "warnings._showwarnmsg",
        "cryptography.x509.base.InvalidVersion",
        "cryptography.hazmat.bindings.openssl.binding._OpenSSLError",
        "threading.Timer.run",
        "sshtunnel._ForwardServer.local_host",
        "cryptography.x509.name.NameAttribute",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES128",
        "logging.Manager.__init__",
        "paramiko.py3compat.long",
        "paramiko.transport.<lambda>",
        "logging.Logger.warning",
        "cryptography.x509.extensions.KeyUsage",
        "cryptography.hazmat.primitives.ciphers.modes.Mode",
        "sshtunnel.SSHTunnelForwarder.__init__",
        "cryptography.hazmat.primitives.ciphers.base._CipherContext",
        "cryptography.hazmat.bindings.openssl.binding._ensure_ffi_initialized",
        "crypto_secretstream.crypto_secretstream_xchacha20poly1305_state",
        "getpass.getuser",
        "_collections_abc.__subclasshook__",
        "paramiko.pipe.OrPipe.set",
        "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_fips",
        "typing._check_generic",
        "paramiko.channel.ChannelFile",
        "paramiko.packet.Packetizer.need_rekey",
        "paramiko.util.constant_time_bytes_eq",
        "ipaddress.IPv4Interface",
        "sre_compile._compile",
        "paramiko.server.InteractiveQuery",
        "cryptography.hazmat.primitives.ciphers.base.CipherContext",
        "cryptography.hazmat.backends.openssl.ciphers.update_into",
        "logging._StderrHandler.__init__",
        "enum.EnumMeta.__getattr__",
        "cryptography.hazmat.primitives.ciphers.algorithms.TripleDES",
        "email.errors.MultipartInvariantViolationDefect",
        "cryptography.x509.extensions.NameConstraints",
        "cryptography.hazmat.bindings.openssl.binding._verify_package_version",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1",
        "logging.Formatter.formatTime",
        "cryptography.hazmat.bindings.openssl.binding._register_osrandom_engine",
        "logging.Handler.setLevel",
        "paramiko.config.SSHConfig._allowed_tokens",
        "weakref.WeakValueDictionary._commit_removals",
        "logging.Logger.setLevel",
        "string.Formatter",
        "string.Template",
        "nacl.encoding.Base32Encoder",
        "selectors._BaseSelectorImpl.__init__",
        "typing._GenericAlias.__setattr__",
        "six._import_module",
        "nacl.exceptions.UnsupportedAlgorithm",
        "paramiko.transport.Transport._log_agreement",
        "sshtunnel._ForwardServer.handle_error",
        "typing._GenericAlias.__init__",
        "paramiko.transport.Transport.run",
        "paramiko.ssh_gss._SSH_GSSAuth",
        "logging._showwarning",
        "__init__.captureWarnings",
        "nacl.exceptions.CryptPrefixError",
        "shlex.split",
        "ipaddress.IPv6Network.__init__",
        "typing._SpecialForm.__init__",
        "typing.__getitem_inner__",
        "nacl.exceptions.InvalidkeyError",
        "typing.NamedTupleMeta",
        "paramiko.sftp_attr.SFTPAttributes",
        "paramiko.config.SSHConfigDict",
        "calendar.TextCalendar",
        "socket.SocketIO",
        "six.MovedModule.__init__",
        "selectors._BaseSelectorImpl._fileobj_lookup",
        "crypto_sign.crypto_sign_ed25519ph_state",
        "threading.Thread._stop",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithInitializationVector",
        "cryptography.hazmat.primitives.ciphers.algorithms.Camellia",
        "posixpath.join",
        "paramiko.rsakey.public_numbers",
        "_distutils_hack.<lambda>",
        "cryptography.hazmat.primitives.hashes.SHA384",
        "genericpath._splitext",
        "paramiko.transport.Transport._filter_algorithm",
        "selectors.BaseSelector",
        "enum._find_new_",
        "paramiko.rsakey.RSAKey.get_name",
        "<builtin>.property",
        "paramiko.file.BufferedFile",
        "cryptography.hazmat.primitives.hashes.SHAKE128",
        "nacl.exceptions.ensure",
        "paramiko.hostkeys.HostKeys",
        "typing._collect_type_vars",
        "sshtunnel._bindlist",
        "cryptography.utils._check_byteslike",
        "socketserver.ThreadingUDPServer",
        "os._get_exports_list",
        "cryptography.hazmat.primitives.ciphers.modes.OFB",
        "calendar.IllegalMonthError",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT283K1",
        "paramiko.buffered_pipe.BufferedPipe.close",
        "paramiko.common.asbytes",
        "email.errors.InvalidHeaderDefect",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_supported",
        "cryptography.hazmat.primitives.ciphers.modes.CFB",
        "cryptography.x509.extensions.CertificateIssuer",
        "paramiko.channel.Channel._set_remote_channel",
        "nacl.exceptions.InvalidSignature",
        "logging.Logger.makeRecord",
        "sre_compile.<listcomp>",
        "paramiko.agent.AgentSSH._send_message",
        "sshtunnel._StreamForwardServer",
        "__future__._Feature",
        "logging.LogRecord",
        "paramiko.packet.Packetizer.read_all",
        "cryptography.hazmat.primitives._serialization.ParameterFormat",
        "ipaddress.AddressValueError",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1",
        "logging.Formatter.usesTime",
        "posixpath.expanduser",
        "sshtunnel.create_logger",
        "paramiko.message.Message.add_int",
        "posixpath._get_sep",
        "datetime._check_date_fields",
        "datetime.timedelta",
        "socketserver.BaseServer.shutdown",
        "sshtunnel.SSHTunnelForwarder._get_binds",
        "paramiko.agent.<lambda>",
        "cryptography.x509.base.RevokedCertificateBuilder",
        "paramiko.client.MissingHostKeyPolicy",
        "sre_parse._uniq",
        "queue.Queue._init",
        "paramiko.sftp_si.SFTPServerInterface",
        "_weakrefset._IterationGuard.__exit__",
        "paramiko.ber.BER",
        "paramiko.client.RejectPolicy",
        "paramiko.sftp.BaseSFTP",
        "sre_parse.SubPattern.__setitem__",
        "six.Module_six_moves_urllib",
        "logging.Formatter",
        "selectors.SelectSelector",
        "cryptography.x509.base.CertificateSigningRequest",
        "__init__.default_backend",
        "paramiko.message.Message.asbytes",
        "encodings.normalize_encoding",
        "nacl.public.PrivateKey",
        "enum._get_mixins_",
        "enum.__new__",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers",
        "email.errors.MessageDefect",
        "sshtunnel.SSHTunnelForwarder.__enter__",
        "sre_compile.isstring",
        "selectors._PollLikeSelector.__init__",
        "tokenize.read_or_stop",
        "cryptography.hazmat.backends.openssl.rsa.RSAPrivateNumbers.__init__",
        "shlex.shlex.read_token",
        "sre_parse._class_escape",
        "cryptography.x509.general_name.RegisteredID",
        "nacl.encoding.Base64Encoder",
        "email.errors.NonPrintableDefect",
        "paramiko.ssh_exception.PasswordRequiredException",
        "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15",
        "paramiko.packet.Packetizer.start_handshake",
        "selectors._PollLikeSelector",
        "_weakrefset._IterationGuard.__init__",
        "sshtunnel.get_connection_id",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_from_algorithm",
        "paramiko.py3compat.b",
        "paramiko.transport.Transport._set_K_H",
        "paramiko.packet.Packetizer.write_all",
        "cryptography.hazmat.primitives.ciphers.modes.CFB8",
        "subprocess.CompletedProcess",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA",
        "argparse._ActionsContainer.register",
        "shlex.shlex",
        "paramiko.pipe.OrPipe",
        "socketserver.BaseServer._handle_request_noblock",
        "paramiko.pipe.PosixPipe.fileno",
        "warnings.formatwarning",
        "sre_parse.SubPattern.getwidth",
        "cryptography.hazmat.backends.openssl.rsa.public_numbers",
        "gettext._expand_lang",
        "contextlib.contextmanager",
        "cryptography.hazmat.backends.openssl.backend.Backend",
        "paramiko.util.get_logger",
        "cryptography.x509.extensions.InvalidityDate",
        "paramiko.packet.Packetizer.read_message",
        "cryptography.hazmat._oid.CertificatePoliciesOID",
        "argparse.HelpFormatter._format_args",
        "selectors._BaseSelectorImpl.register",
        "threading.Timer.cancel",
        "cryptography.x509.extensions.SubjectAlternativeName",
        "socketserver.StreamRequestHandler",
        "cryptography.hazmat.backends.openssl.backend.Backend._consume_errors",
        "sshtunnel.SSHTunnelForwarder._check_tunnel",
        "nacl.utils.EncryptedMessage",
        "cryptography.hazmat.backends.openssl.ciphers._CipherContext.update_into",
        "collections.namedtuple",
        "argparse._ActionsContainer._add_action",
        "calendar._localized_day.__init__",
        "sshtunnel._add_handler",
        "paramiko.channel.Channel._log",
        "paramiko.agent.AgentServerProxy",
        "cryptography.hazmat.backends.openssl.backend.Backend.create_symmetric_decryption_ctx",
        "urllib.parse.DefragResultBytes",
        "urllib.parse.ParseResult",
        "cryptography.hazmat.bindings.openssl.binding._verify_openssl_version",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1",
        "enum.__prepare__",
        "nacl.signing.VerifyKey.__init__",
        "cryptography.x509.base.CertificateSigningRequestBuilder",
        "paramiko.packet.Packetizer._read_timeout",
        "cryptography.hazmat.primitives.ciphers.base.AEADEncryptionContext",
        "socketserver.BaseServer",
        "paramiko.auth_handler._handler_table",
        "email.errors.InvalidMultipartContentTransferEncodingDefect",
        "sshtunnel.SSHTunnelForwarder._make_ssh_forward_server",
        "socketserver.ForkingUDPServer",
        "queue.Queue.put",
        "socketserver.DatagramRequestHandler",
        "sshtunnel.SSHTunnelForwarder._read_ssh_config",
        "urllib.parse.Quoter",
        "cryptography.hazmat.primitives.asymmetric.padding._MaxLength",
        "logging.Formatter.format",
        "cryptography.hazmat.backends.openssl.rsa.n",
        "paramiko.ed25519key.Ed25519Key.__init__",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers",
        "paramiko.config.SSHConfig.parse",
        "cryptography.x509.extensions._make_sequence_methods",
        "argparse._ActionsContainer.add_argument_group",
        "ipaddress._IPv6Constants",
        "typing.ForwardRef.__eq__",
        "paramiko.transport.Transport.is_active",
        "six._SixMetaPathImporter._get_module",
        "cryptography.x509.name.Name",
        "selectors.PollSelector",
        "cryptography.hazmat.backends.openssl.utils._calculate_digest_and_algorithm",
        "cryptography.hazmat.backends.openssl.backend.Backend._bn_to_int",
        "paramiko.config.LazyFqdn",
        "datetime.datetime",
        "logging.StreamHandler.flush",
        "enum.EnumMeta.__iter__",
        "cryptography.hazmat.backends.openssl.x448._X448PublicKey",
        "calendar.IllegalWeekdayError",
        "email.errors.HeaderDefect",
        "paramiko.buffered_pipe.BufferedPipe.set_event",
        "cryptography.hazmat.backends.openssl.hashes._HashContext.update",
        "paramiko.kex_curve25519.KexCurve25519._perform_exchange",
        "posixpath.normcase",
        "paramiko.auth_handler.AuthHandler.__init__",
        "typing.TextIO",
        "argparse.ArgumentParser._parse_known_args",
        "paramiko.pipe.OrPipe.__init__",
        "email._parseaddr.AddrlistClass",
        "logging.LoggerAdapter",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_from_der_traditional_key",
        "cryptography.x509.extensions.ReasonFlags",
        "typing.SupportsBytes",
        "types.DynamicClassAttribute.__get__",
        "posixpath.dirname",
        "paramiko.client.SSHClient",
        "logging._checkLevel",
        "typing.SupportsIndex",
        "cryptography.hazmat.primitives.asymmetric.padding._Auto",
        "hmac.HMAC",
        "gettext.dgettext",
        "tokenize.find_cookie",
        "email.errors.HeaderMissingRequiredValue",
        "argparse.ArgumentParser._parse_optional",
        "logging.Manager._fixupParents",
        "socket._intenum_converter",
        "nacl.public.PublicKey",
        "selectors.BaseSelector.__enter__",
        "encodings.idna.Codec.encode",
        "cryptography.hazmat.backends.openssl.backend._RC2",
        "cryptography.hazmat.backends.openssl.hashes._HashContext.finalize",
        "logging.getLogger",
        "cryptography.hazmat._oid.SubjectInformationAccessOID",
        "six._SixMetaPathImporter.__init__",
        "logging.BufferingFormatter",
        "paramiko.kex_group1.KexGroup1",
        "paramiko.kex_gex.KexGexSHA256",
        "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps",
        "subprocess.SubprocessError",
        "socketserver.TCPServer.server_activate",
        "typing._GenericAlias.copy_with",
        "paramiko.rsakey.RSAKey._decode_key",
        "cryptography.hazmat.primitives.hashes.SHA256",
        "os._Environ.__getitem__",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_load_public_bytes",
        "cryptography.x509.name._RFC4514NameParser",
        "sshtunnel._ForwardHandler",
        "email.errors.MultipartConversionError",
        "paramiko.agent.AgentSSH.__init__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers",
        "cryptography.x509.certificate_transparency.LogEntryType",
        "sre_parse.Tokenizer.getwhile",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryptionBuilder",
        "paramiko.transport.preferred_kex",
        "cryptography.hazmat.primitives.asymmetric.x25519.generate",
        "argparse._ActionsContainer._get_handler",
        "posixpath.basename",
        "paramiko.transport.ChannelMap.__init__",
        "nacl.bindings.crypto_generichash.Blake2State",
        "calendar.LocaleTextCalendar",
        "ipaddress._BaseAddress",
        "paramiko.transport._parse_global_request",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers",
        "sshtunnel._ForwardServer.local_port",
        "typing.__class_getitem__",
        "enum.IntFlag.__and__",
        "cryptography.x509.base.AttributeNotFound",
        "paramiko.transport.Transport.auth_publickey",
        "six.Module_six_moves_urllib_error",
        "logging.Logger.getEffectiveLevel",
        "nacl.exceptions.TypeError",
        "cryptography.hazmat.primitives.serialization.base.load_der_private_key",
        "paramiko.compress.ZlibCompressor",
        "paramiko.ssh_exception.BadHostKeyException",
        "email.errors.CharsetError",
        "paramiko.channel.Channel.fileno",
        "paramiko.transport.Transport.set_gss_host",
        "socketserver.ForkingMixIn",
        "cryptography.hazmat.backends.openssl.utils._evp_pkey_derive",
        "argparse._ActionsContainer._get_optional_kwargs",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve",
        "cryptography.hazmat.primitives._asymmetric.AsymmetricPadding",
        "typing.SupportsComplex",
        "paramiko.message.Message.add_boolean",
        "locale.normalize",
        "sre_compile._compile_info",
        "sshtunnel.check_address",
        "logging.RootLogger",
        "typing.SupportsRound",
        "socketserver.ForkingTCPServer",
        "random.__init_subclass__",
        "cryptography.x509.base.Attribute",
        "paramiko.ecdsakey._ECDSACurve.__init__",
        "paramiko.auth_handler.AuthHandler._get_key_type_and_bits",
        "cryptography.hazmat.primitives.ciphers.modes.XTS",
        "cryptography.x509.extensions.PolicyConstraints",
        "tempfile._RandomNameSequence",
        "cryptography.hazmat.primitives.hashes.SM3",
        "paramiko.kex_ecdh_nist.KexNistp384",
        "paramiko.message.Message.get_string",
        "paramiko.auth_handler._parse_service_accept",
        "queue.PriorityQueue",
        "queue.Queue",
        "cryptography.hazmat.primitives.hashes.SHA3_384",
        "paramiko.auth_handler._parse_userauth_success",
        "sre_compile._compile_charset",
        "tokenize.open",
        "paramiko.agent.get_agent_connection",
        "paramiko.pipe.PosixPipe.set",
        "paramiko.message.Message.get_int",
        "cryptography.hazmat.primitives.hashes.Hash.__init__",
        "cryptography.hazmat.primitives.asymmetric.padding.MGF1",
        "paramiko.packet.Packetizer.send_message",
        "paramiko.message.Message.get_text",
        "argparse.ArgumentParser._get_value",
        "cryptography.hazmat.primitives.serialization.ssh._FragList",
        "email.errors.BoundaryError",
        "nacl.exceptions.RuntimeError",
        "encodings.idna.StreamReader",
        "sre_parse.SubPattern.__len__",
        "tempfile._TemporaryFileCloser",
        "paramiko.packet.Packetizer.set_keepalive",
        "logging.StreamHandler",
        "paramiko.kex_ecdh_nist.KexNistp521",
        "nacl.signing.SigningKey",
        "datetime._check_time_fields",
        "_weakrefset.WeakSet.__init__",
        "cryptography.hazmat.primitives.hashes.Hash.update",
        "nacl.exceptions.AlreadyFinalized",
        "paramiko.channel.ChannelStderrFile",
        "cryptography.x509.certificate_transparency.SignatureAlgorithm",
        "cryptography.hazmat.backends.openssl.backend.Backend._is_fips_enabled",
        "paramiko.transport.ChannelMap.put",
        "paramiko.packet.Packetizer",
        "logging.Handler",
        "sre_compile._get_charset_prefix",
        "cryptography.hazmat._oid.AuthorityInformationAccessOID",
        "paramiko.pkey.PKey._read_private_key",
        "cryptography.hazmat.primitives.ciphers.algorithms.CAST5",
        "selectors._BaseSelectorImpl.close",
        "logging.Logger.log",
        "paramiko.ssh_gss._SSH_GSSAPI_NEW",
        "typing.IO",
        "tempfile.TemporaryDirectory",
        "logging.Filterer.filter",
        "cryptography.hazmat.primitives._serialization.NoEncryption",
        "sshtunnel._remove_none_values",
        "sshtunnel._ForwardServer.__init__",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.__init__",
        "paramiko.packet.Packetizer.__init__",
        "datetime._check_int_field",
        "paramiko.ssh_exception.PartialAuthentication",
        "paramiko.proxy.ProxyCommand.__init__",
        "logging.PercentStyle",
        "logging.Handler.createLock",
        "paramiko.config.SSHConfig._lookup",
        "cryptography.hazmat.primitives._serialization.KeySerializationEncryption",
        "cryptography.hazmat.bindings.openssl.binding._consume_errors",
        "typing.__init_subclass__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey",
        "logging.Handler.release",
        "logging.FileHandler",
        "socketserver.TCPServer.server_bind",
        "sshtunnel.SSHTunnelForwarder.read_private_key_file",
        "paramiko.transport.Transport.global_request",
        "urllib.parse._fix_result_transcoding",
        "paramiko.channel.Channel._send_eof",
        "paramiko.auth_handler.AuthHandler",
        "warnings.WarningMessage.__init__",
        "cryptography.hazmat.primitives._serialization.PrivateFormat",
        "sshtunnel.SSHTunnelForwarder.start",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1",
        "cryptography.hazmat.primitives.ciphers.base._AEADCipherContext",
        "six.Module_six_moves_urllib_response",
        "sre_parse.groups",
        "paramiko.channel.Channel._set_closed",
        "sshtunnel.SSHTunnelForwarder.get_agent_keys",
        "calendar.Calendar",
        "logging.Logger.handle",
        "threading.Condition.__init__",
        "typing._Immutable",
        "nacl.utils.StringFixer",
        "selectors._fileobj_to_fd",
        "cryptography.hazmat.primitives.ciphers.modes._check_nonce_length",
        "paramiko.pipe.OrPipe.clear",
        "paramiko.ssh_exception.SSHException",
        "hmac.HMAC.digest",
        "cryptography.utils._DeprecatedValue.__init__",
        "cryptography.x509.certificate_transparency.Version",
        "cryptography.hazmat._oid.AttributeOID",
        "nacl.encoding.HexEncoder",
        "sys.exc_info",
        "paramiko.transport.Transport.use_compression",
        "hmac._HMACContext",
        "codecs.IncrementalDecoder.__init__",
        "sshtunnel.SSHTunnelForwarder._consolidate_auth",
        "argparse._CountAction.__init__",
        "paramiko.transport.Transport.close",
        "cryptography.utils._ModuleWithDeprecations.__getattr__",
        "paramiko.packet.Packetizer.set_outbound_cipher",
        "traceback.FrameSummary",
        "cryptography.x509.extensions.IssuerAlternativeName",
        "six.Module_six_moves_urllib_parse",
        "datetime._check_tzinfo_arg",
        "paramiko.util.PFilter",
        "paramiko.config.SSHConfig.__init__",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.__init__",
        "six.MovedAttribute",
        "socketserver.TCPServer",
        "cryptography.x509.extensions.ExtendedKeyUsage",
        "sre_parse.parse",
        "sre_compile._code",
        "cryptography.hazmat.primitives.ciphers.base.Cipher._wrap_ctx",
        "paramiko.pkey.PKey._read_private_key_pem",
        "crypto_sign.crypto_sign_open",
        "sre_parse.Tokenizer.get",
        "six._SixMetaPathImporter",
        "re.match",
        "paramiko.packet.first_arg",
        "nacl.exceptions.InternalError",
        "cryptography.hazmat.primitives.ciphers.algorithms._verify_key_size",
        "paramiko.ssh_exception.ProxyCommandFailure",
        "paramiko.config.SSHConfig._expand_variables",
        "nacl.encoding.URLSafeBase64Encoder",
        "socketserver._SocketWriter",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1",
        "email.charset.Charset",
        "sshtunnel.remote_address",
        "paramiko.py3compat.u",
        "selectors._BaseSelectorImpl._key_from_fd",
        "six.MovedAttribute.__init__",
        "nacl.exceptions.UnavailableError",
        "cryptography.hazmat.backends.openssl.backend.Backend.create_hash_ctx",
        "paramiko.config.SSHConfig._pattern_matches",
        "functools.lru_cache",
        "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers",
        "cryptography.x509.extensions.PrecertPoison",
        "socket.socket.__init__",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm",
        "weakref.WeakValueDictionary.get",
        "sshtunnel.SSHTunnelForwarder.get_keys",
        "nacl.exceptions.AssertionError",
        "paramiko.pipe.PosixPipe.clear",
        "shlex.shlex.__iter__",
        "paramiko.transport.Transport",
        "cryptography.hazmat.primitives.ciphers.base.AEADCipherContext",
        "gettext.find",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameters",
        "six._add_doc",
        "email._parseaddr.AddressList",
        "urllib.parse._ResultMixinBytes",
        "typing._VariadicGenericAlias",
        "paramiko.transport.Transport.open_channel",
        "paramiko.transport.Transport.start_client",
        "cryptography.hazmat.backends.openssl.rsa.e",
        "calendar.HTMLCalendar",
        "email.errors.HeaderParseError",
        "ed25519.Ed25519PublicKey",
        "paramiko.packet.Packetizer.readline",
        "logging.Manager",
        "logging.Filter",
        "paramiko.message.Message.__repr__",
        "ed25519.Ed25519PrivateKey",
        "random.Random.__init__",
        "cryptography.x509.base.Certificate",
        "sshtunnel.SSHTunnelForwarder.stop",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey",
        "shlex.shlex.__init__",
        "posixpath.splitext",
        "sre_parse.Tokenizer.tell",
        "gettext.gettext",
        "threading.Condition.__enter__",
        "sshtunnel._ForwardServer.local_address",
        "argparse.Namespace.__init__",
        "sshtunnel._check_paramiko_handlers",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey._non_threadsafe_enable_blinding",
        "hashlib.__get_builtin_constructor",
        "paramiko.transport.Transport.connect",
        "paramiko.message.Message.get_list",
        "sshtunnel.SSHTunnelForwarder.__exit__",
        "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20",
        "nacl.public.SealedBox",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.sign",
        "sre_parse.Tokenizer.__next",
        "urllib.parse._NetlocResultMixinBytes",
        "ipaddress._BaseV6",
        "cryptography.x509.general_name.DNSName",
        "argparse.ArgumentParser.parse_known_args",
        "cryptography.x509.extensions.TLSFeatureType",
        "paramiko.sftp_client.SFTPClient",
        "email.errors.InvalidBase64CharactersDefect",
        "cryptography.x509.general_name.DirectoryName",
        "cryptography.x509.general_name.UniformResourceIdentifier",
        "traceback.TracebackException",
        "logging._addHandlerRef",
        "sre_parse.fix_flags",
        "selectors._BaseSelectorImpl",
        "typing.TypedDict",
        "datetime.date",
        "paramiko.sftp_client.SFTP",
        "paramiko.auth_handler.AuthHandler.auth_publickey",
        "cryptography.x509.extensions.GeneralNames",
        "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__call__",
        "sshtunnel.HandlerSSHTunnelForwarderError.__init__",
        "sshtunnel.SSHTunnelForwarder.is_active",
        "paramiko.util.safe_string",
        "sre_parse.SubPattern.append",
        "sshtunnel.SSHTunnelForwarder._check_is_started",
        "cryptography.hazmat.primitives.hashes.HashContext",
        "paramiko.agent.AgentClientProxy",
        "paramiko.message.Message.get_so_far",
        "paramiko.message.Message.get_boolean",
        "abc.__new__",
        "functools.update_wrapper",
        "cryptography.hazmat.primitives.hashes.HashAlgorithm",
        "cryptography.x509.extensions.OCSPNoCheck",
        "fnmatch.fnmatch",
        "paramiko.ber.BERException",
        "cryptography.hazmat.backends.openssl.rsa._rsa_sig_determine_padding",
        "sre_compile._generate_overlap_table",
        "socketserver.BaseServer.verify_request",
        "logging.StrFormatStyle",
        "string._TemplateMetaclass.__init__",
        "datetime.tzinfo",
        "logging.Logger.debug",
        "typing._SpecialForm",
        "tempfile._TemporaryFileWrapper",
        "selectors.BaseSelector.__exit__",
        "tempfile.SpooledTemporaryFile",
        "paramiko.transport._parse_channel_open_success",
        "calendar.different_locale",
        "cryptography.x509.extensions.SubjectInformationAccess",
        "threading.Event.__init__",
        "cryptography.hazmat.primitives.hashes.MD5",
        "threading._newname",
        "logging.Handler.__init__",
        "calendar.Calendar.__init__",
        "fnmatch.translate",
        "typing.SupportsAbs",
        "argparse._ActionsContainer.__init__",
        "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish",
        "paramiko.message.Message.rewind",
        "typing.TypeVar",
        "paramiko.pkey.PKey._check_type_and_load_cert",
        "cryptography.x509.extensions.Extension",
        "logging.LogRecord.__init__",
        "ipaddress._IPAddressBase",
        "paramiko.transport.Transport._really_parse_kex_init",
        "paramiko.transport.SecurityOptions",
        "weakref.WeakValueDictionary.__init__",
        "paramiko.pipe.WindowsPipe",
        "argparse._ArgumentGroup.__init__",
        "paramiko.auth_handler.AuthHandler._request_auth",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES256",
        "paramiko.kex_group14.KexGroup14",
        "logging.PercentStyle.format",
        "functools.wraps",
        "six._LazyDescr.__init__",
        "logging.RootLogger.__init__",
        "cryptography.hazmat.primitives.ciphers.modes._check_aes_key_length",
        "cryptography.utils._DeprecatedValue",
        "cryptography.x509.extensions.ExtensionNotFound",
        "ipaddress.IPv6Interface",
        "ipaddress._IPAddressBase._check_int_address",
        "socketserver.TCPServer.get_request",
        "paramiko.message.Message.add_list",
        "sshtunnel._ThreadingForwardServer",
        "cryptography.x509.base.CertificateRevocationList",
        "paramiko.transport.Transport._send_user_message",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP512R1",
        "selectors._SelectorMapping.__init__",
        "cryptography.hazmat._oid.OCSPExtensionOID",
        "argparse._ActionsContainer._get_positional_kwargs",
        "socketserver.TCPServer.__init__",
        "nacl.encoding.RawEncoder",
        "paramiko.buffered_pipe.PipeTimeout",
        "cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm",
        "paramiko.transport.Transport._verify_key",
        "nacl.exceptions.BadSignatureError",
        "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_ssl_st",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.public_key",
        "logging.PlaceHolder.__init__",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatDSA",
        "typing.overload",
        "subprocess.TimeoutExpired",
        "argparse.ArgumentParser.__init__",
        "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers",
        "urllib.parse._ResultMixinStr",
        "paramiko.transport._negotiate_keys",
        "argparse._ActionsContainer.add_argument",
        "subprocess._use_posix_spawn",
        "urllib.parse._NetlocResultMixinStr",
        "paramiko.buffered_pipe.BufferedPipe.__init__",
        "linecache.updatecache",
        "functools.cached_property.__init__",
        "ipaddress._ip_int_from_string",
        "logging.StreamHandler.emit",
        "sshtunnel.check_port",
        "cryptography.hazmat.primitives.asymmetric.dh.DHParameterNumbers",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT163R2",
        "enum._create_pseudo_member_",
        "fnmatch.fnmatchcase",
        "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey",
        "cryptography.hazmat.backends.openssl.dh._DHParameters",
        "six.Module_six_moves_urllib_robotparser",
        "shlex.shlex.get_token",
        "cryptography.hazmat.primitives.serialization.pkcs12.PKCS12Certificate",
        "ipaddress._IPv4Constants",
        "cryptography.hazmat.primitives.ciphers.algorithms.AES.__init__",
        "cryptography.hazmat.primitives.ciphers.base.AEADDecryptionContext",
        "typing.ForwardRef.__init__",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers",
        "paramiko.agent.AgentProxyThread",
        "paramiko.transport.preferred_compression",
        "paramiko.kex_curve25519.KexCurve25519.__init__",
        "queue.Queue._qsize",
        "paramiko.transport.Transport._activate_outbound",
        "cryptography.hazmat.primitives.ciphers.modes.CBC",
        "socketserver.TCPServer.close_request",
        "paramiko.message.Message.add_string",
        "cryptography.x509.extensions.Extensions",
        "paramiko.ecdsakey._ECDSACurveSet.__init__",
        "paramiko.channel.Channel.__init__",
        "cryptography.hazmat._oid.CRLEntryExtensionOID",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1",
        "nacl.encoding.Base16Encoder",
        "cryptography.hazmat.primitives.asymmetric.padding.MGF",
        "codecs.BufferedIncrementalDecoder.decode",
        "cryptography.hazmat._oid.ExtendedKeyUsageOID",
        "queue._PySimpleQueue",
        "shutil.get_terminal_size",
        "paramiko.packet.Packetizer._build_packet",
        "threading.Thread._wait_for_tstate_lock",
        "cryptography.hazmat.primitives.kdf.scrypt.Scrypt",
        "sshtunnel._ForwardServer.remote_address",
        "cryptography.x509.base._RawRevokedCertificate",
        "enum._decompose",
        "hashlib.__get_openssl_constructor",
        "paramiko.transport.ChannelMap",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey.private_numbers",
        "random.SystemRandom",
        "cryptography.hazmat.primitives.ciphers.modes.GCM",
        "six._SixMetaPathImporter._add_module",
        "paramiko.pkey.from_private_key_file",
        "paramiko.hostkeys.InvalidHostKey",
        "cryptography.x509.extensions.IssuingDistributionPoint",
        "cryptography.x509.general_name.RFC822Name",
        "typing.io",
        "cryptography.x509.base.CertificateBuilder",
        "string._TemplateMetaclass",
        "paramiko.message.Message.__init__",
        "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context",
        "paramiko.transport.Transport._ensure_authed",
        "sshtunnel.SSHTunnelForwarder._create_tunnels",
        "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.__init__",
        "argparse._ActionsContainer._check_conflict",
        "sshtunnel.SSHTunnelForwarder",
        "paramiko.packet.NeedRekeyException",
        "abc.ABCMeta.__subclasscheck__",
        "typing.inner",
        "cryptography.hazmat.backends.openssl.backend.Backend.load_der_private_key",
        "typing.__new__",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_md_non_null_from_algorithm",
        "sre_compile._get_iscased",
        "argparse.ArgumentParser._add_action",
        "paramiko.transport.ChannelMap.values",
        "email.errors.MessageParseError",
        "paramiko.transport.Transport.get_log_channel",
        "logging.StringTemplateStyle",
        "paramiko.message.Message.add_bytes",
        "cryptography.x509.extensions.FreshestCRL",
        "typing._VariadicGenericAlias.__getitem__",
        "email.errors.MissingHeaderBodySeparatorDefect",
        "cryptography.hazmat.primitives._serialization._KeySerializationEncryption",
        "cryptography.hazmat.primitives.hashes.SHA3_256",
        "datetime._days_in_month",
        "sre_compile._mk_bitmap",
        "logging.Logger._log",
        "paramiko.config.LazyFqdn.__init__",
        "threading.Condition._is_owned",
        "getpass.GetPassWarning",
        "paramiko.config.SSHConfig.lookup",
        "paramiko.pipe.PosixPipe",
        "cryptography.hazmat.backends.openssl.dsa._DSAParameters",
        "socketserver._NoThreads",
        "random.Random",
        "threading.Condition.notify",
        "logging.Filterer.addFilter",
        "socket.socket.close",
        "sshtunnel.BaseSSHTunnelForwarderError.__init__",
        "cryptography.x509.extensions.OCSPNonce",
        "cryptography.x509.general_name.UnsupportedGeneralNameType",
        "paramiko.kex_gss.KexGSSGroup1",
        "ed448._Ed448PublicKey",
        "argparse.HelpFormatter.__init__",
        "argparse._HelpAction.__init__",
        "logging.Filterer.__init__",
        "ipaddress._BaseV4",
        "paramiko.auth_handler.AuthHandler._get_session_blob",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1",
        "base64.decodebytes",
        "cryptography.hazmat.primitives.asymmetric.padding.PSS",
        "cryptography.x509.name._ASN1Type",
        "socket.socket.type",
        "threading.Condition._acquire_restore",
        "encodings.idna.IncrementalDecoder",
        "threading.Event.set",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatEd25519",
        "argparse.ArgumentParser.parse_args",
        "ipaddress.IPv4Address.__init__",
        "sshtunnel.check_host",
        "cryptography.hazmat.primitives.hashes.BLAKE2s",
        "cryptography.hazmat.primitives.ciphers.base.Cipher.decryptor",
        "paramiko.kex_group14.KexGroup14SHA256",
        "argparse._ArgumentGroup._add_action",
        "_collections_abc.Mapping.get",
        "cryptography.hazmat.primitives.ciphers.algorithms.SEED",
        "paramiko.message.Message.add_byte",
        "ipaddress._ip_int_from_prefix",
        "calendar._localized_day",
        "paramiko.pkey.PKey._read_private_key_file",
        "os.unlink",
        "email.errors.FirstHeaderLineIsContinuationDefect",
        "cryptography.hazmat.primitives.hashes.SHA512",
        "paramiko.util.deflate_long",
        "typing.__getitem__",
        "socketserver.TCPServer.shutdown_request",
        "_weakrefset.WeakSet.add",
        "ipaddress.NetmaskValueError",
        "argparse._ActionsContainer._pop_action_class",
        "cryptography.hazmat._oid.NameOID",
        "logging.PercentStyle._format",
        "encodings.idna.Codec",
        "selectors._PollLikeSelector.register",
        "paramiko.auth_handler.AuthHandler._log",
        "email.errors.InvalidBase64PaddingDefect",
        "ipaddress.IPv4Network",
        "nacl.exceptions.CryptoError",
        "paramiko.agent.Agent",
        "cryptography.hazmat.primitives.hashes.Hash.finalize",
        "cryptography.hazmat.primitives.hashes.ExtendableOutputFunction",
        "abc.ABCMeta.register",
        "cryptography.hazmat.primitives.hashes.SHA1",
        "logging.Logger.info",
        "paramiko.agent.Agent.__init__",
        "cryptography.hazmat.backends.openssl.dh._DHPrivateKey",
        "threading.Thread.run",
        "logging._releaseLock",
        "codecs.BufferedIncrementalDecoder.getstate",
        "cryptography.hazmat.primitives.asymmetric.padding._DigestLength",
        "sshtunnel",
        "typing._GenericAlias.__hash__",
        "paramiko.ssh_exception.IncompatiblePeer",
        "socketserver.TCPServer.server_close",
        "paramiko.message.Message.add",
        "socketserver.ThreadingUnixDatagramServer",
        "paramiko.auth_handler.<listcomp>",
        "calendar.LocaleHTMLCalendar",
        "functools.decorating_function",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1",
        "paramiko.rsakey.RSAKey",
        "paramiko.ecdsakey._ECDSACurveSet",
        "sre_parse.State.closegroup",
        "cryptography.hazmat.backends.openssl.backend.Backend._register_default_ciphers",
        "logging.Filterer",
        "ed448.Ed448PublicKey",
        "socketserver.UDPServer",
        "cryptography.x509.extensions.UnrecognizedExtension",
        "paramiko.channel.ChannelStdinFile",
        "paramiko.ssh_exception.CouldNotCanonicalize",
        "weakref.KeyedRef.__init__",
        "cryptography.hazmat.backends.openssl.hashes.algorithm",
        "paramiko.channel.Channel",
        "encodings.idna.IncrementalEncoder",
        "threading.Event.is_set",
        "typing._Final",
        "threading.Event.wait",
        "paramiko.rsakey.RSAKey.__init__",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey._enable_blinding",
        "cryptography.x509.extensions.DeltaCRLIndicator",
        "cryptography.hazmat.primitives.kdf.KeyDerivationFunction",
        "logging.Logger",
        "typing._TypedDictMeta",
        "socketserver.UnixDatagramServer",
        "paramiko.sftp_handle.SFTPHandle",
        "logging.PercentStyle.validate",
        "logging.StreamHandler.__init__",
        "random.Random.seed",
        "paramiko.transport.preferred_pubkeys",
        "ryptography.hazmat.primitives.asymmetric.utils.Prehashed",
        "nacl.exceptions.ValueError",
        "email.errors.MisplacedEnvelopeHeaderDefect",
        "abc.ABCMeta.__instancecheck__",
        "sre_parse.SubPattern.__getitem__",
        "paramiko.message.Message._add",
        "logging.disable",
        "typing._TypingEllipsis",
        "cryptography.hazmat.primitives.ciphers.base._CipherContext.update",
        "cryptography.x509.extensions.DistributionPoint",
        "logging.PlaceHolder",
        "cryptography.hazmat.bindings.openssl.binding.buildcryptography.hazmat.bindings.openssl._conditional_library",
        "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.exchange",
        "email.errors.NonASCIILocalPartDefect",
        "logging._acquireLock",
        "threading._make_invoke_excepthook",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_generate_key",
        "sshtunnel.SSHTunnelForwarder._stop_transport",
        "paramiko.transport.Transport._parse_debug",
        "socket.getaddrinfo",
        "cryptography.hazmat.primitives.serialization.pkcs7.PKCS7Options",
        "typing._GenericAlias.__eq__",
        "paramiko.proxy.ProxyCommand",
        "ipaddress._make_netmask",
        "paramiko.channel.Channel.__del__",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT571R1",
        "sshtunnel.SSHTunnelForwarder._make_ssh_forward_handler_class",
        "nacl.exceptions.NotYetFinalized",
        "sre_compile._combine_flags",
        "encodings.idna.getregentry",
        "sshtunnel.SSHTunnelForwarder._connect_to_gateway",
        "six._LazyDescr.__get__",
        "re._compile",
        "cryptography.hazmat.primitives.ciphers.modes.CTR",
        "paramiko.message.Message.get_bytes",
        "cryptography.hazmat.primitives.hashes.SHA224",
        "paramiko.kex_curve25519.KexCurve25519.start_kex",
        "sshtunnel.BaseSSHTunnelForwarderError",
        "sre_parse.State.opengroup",
        "urllib.parse.SplitResultBytes",
        "typing.re",
        "cryptography.hazmat.backends.openssl.x448._X448PrivateKey",
        "typing._type_check",
        "paramiko.transport._parse_newkeys",
        "cryptography.x509.general_name.IPAddress",
        "paramiko.pipe.make_or_pipe",
        "paramiko.agent.AgentSSH._read_all",
        "cryptography.hazmat.primitives.asymmetric.ec.SECP256K1",
        "paramiko.py3compat.byte_chr",
        "threading.Condition.wait",
        "paramiko.ssh_gss._SSH_GSSAPI_OLD",
        "cryptography.x509.extensions.CRLReason",
        "cryptography.hazmat.primitives.hashes.SHA3_224",
        "argparse._StoreAction.__init__",
        "typing.Generic",
        "cryptography.hazmat.bindings.openssl._conditional.cryptography_has_ssl3_method",
        "cryptography.hazmat.primitives.ciphers.base.Cipher",
        "cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey",
        "nacl.exceptions.AlreadyUpdated",
        "sshtunnel.Handler",
        "typing._is_dunder",
        "socket._GiveupOnSendfile",
        "paramiko.transport.Transport._parse_kex_init",
        "cryptography.hazmat.backends.openssl.rsa._RSAPublicKey",
        "datetime.time",
        "queue.Queue.__init__",
        "cryptography.hazmat.primitives.hashes.algorithm",
        "paramiko.kex_curve25519.KexCurve25519",
        "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey",
        "ipaddress._BaseAddress.__int__",
        "paramiko.agent.AgentRemoteProxy",
        "paramiko.ecdsakey._ECDSACurve",
        "cryptography.hazmat.bindings.openssl.binding.Binding",
        "sre_compile._bytes_to_codes",
        "argparse.ArgumentParser._get_formatter",
        "paramiko.client.WarningPolicy",
        "cryptography.hazmat.backends.openssl.cmac._CMACContext",
        "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce",
        "urllib.parse._NetlocResultMixinBase",
        "email.errors.ObsoleteHeaderDefect",
        "enum.EnumMeta.__setattr__",
        "paramiko.dsskey.DSSKey",
        "cryptography.x509.extensions.BasicConstraints",
        "logging.<lambda>",
        "nacl.encoding.Encodable",
        "cryptography.hazmat.primitives.ciphers.modes.CTR.__init__",
        "argparse.<listcomp>",
        "paramiko.transport.Transport._expect_packet",
        "threading.Thread.daemon",
        "typing.BinaryIO",
        "typing._tp_cache",
        "logging.addLevelName",
        "abc.abstractmethod",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_keygen_gc",
        "cryptography.x509.extensions.CRLNumber",
        "typing.NamedTuple",
        "ed25519._Ed25519PrivateKey",
        "paramiko.agent.AgentRequestHandler",
        "queue.Full",
        "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1",
        "ipaddress.IPv6Address",
        "cryptography.hazmat._oid.ExtensionOID",
        "gettext.translation",
        "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP256R1",
        "paramiko.sftp_file.SFTPFile",
        "os.access",
        "paramiko.channel.Channel._unlink",
        "cryptography.hazmat.primitives.asymmetric.ec.ECDSA",
        "paramiko.packet.Packetizer.close",
        "shlex.shlex.__next__",
        "codecs.__new__",
        "cryptography.x509.extensions.CRLDistributionPoints",
        "cryptography.hazmat.primitives.ciphers.algorithms.ARC4",
        "argparse._StoreTrueAction.__init__",
        "socketserver.ThreadingUnixStreamServer",
        "cryptography.hazmat.backends.openssl.backend.Backend._evp_pkey_to_private_key",
        "paramiko.agent.AgentSSH.get_keys",
        "paramiko.ed25519key.Ed25519Key.verify_ssh_sig",
        "_weakrefset._IterationGuard.__enter__",
        "nacl.bindings.sodium_core.sodium_init",
        "queue.LifoQueue",
        "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey",
        "sshtunnel._ForwardHandler._redirect",
        "subprocess.CalledProcessError",
        "paramiko.pkey.PKey",
        "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID",
        "sre_compile._optimize_charset",
        "cryptography.utils.CryptographyDeprecationWarning",
        "email.errors.InvalidBase64LengthDefect",
        "calendar.Calendar.setfirstweekday",
        "cryptography.hazmat.primitives.hashes.SHA512_224",
        "argparse.HelpFormatter._metavar_formatter",
        "argparse.ArgumentParser._get_positional_actions",
        "sshtunnel._ForwardHandler.handle",
        "sshtunnel.HandlerSSHTunnelForwarderError",
        "threading.Event.clear",
        "warnings._formatwarnmsg_impl",
        "paramiko.message.Message.get_binary",
        "tokenize.detect_encoding",
        "logging.Handler.format",
        "paramiko.ecdsakey.ECDSAKey",
        "ipaddress._split_optional_netmask",
        "paramiko.buffered_pipe.BufferedPipe.read_ready",
        "cryptography.x509.general_name.OtherName",
        "typing._GenericAlias.__mro_entries__",
        "paramiko.ssh_exception.ChannelException",
        "threading.Thread.start",
        "enum.__members__",
        "cryptography.x509.extensions.SubjectKeyIdentifier"
    ],
    "sre_compile._compile_charset": [
        "<list>.extend",
        "sre_constants.error.__init__"
    ],
    "calendar.IllegalMonthError": [],
    "argparse._AppendAction": [],
    "token": [
        "<builtin>.isinstance",
        "<builtin>.globals",
        "<list>.extend"
    ],
    "logging.LoggerAdapter": [
        "<builtin>.property"
    ],
    "paramiko.ecdsakey._ECDSACurveSet.__init__": [],
    "logging.Formatter.formatStack": [],
    "email.errors.HeaderDefect": [],
    "email.errors.NonPrintableDefect": [],
    "email.errors.MessageParseError": [],
    "os._fspath": [
        "<builtin>.hasattr",
        "<builtin>.TypeError",
        "<str>.format",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "cryptography.utils._DeprecatedValue": [],
    "cryptography.hazmat.primitives.ciphers.modes.CFB8": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP384R1": [],
    "paramiko.packet.Packetizer.set_log": [],
    "argparse._ActionsContainer": [],
    "cryptography.hazmat.primitives.hashes.SHA224": [],
    "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "paramiko.ssh_exception.NoValidConnectionsError": [],
    "cryptography.x509.extensions.Extension": [
        "<builtin>.property"
    ],
    "datetime.datetime.date": [
        "datetime.datetime.date"
    ],
    "email.errors.BoundaryError": [],
    "cryptography.hazmat.bindings.openssl.binding._verify_package_version": [
        "<str>.encode",
        "<builtin>.ImportError"
    ],
    "nacl.encoding.Encodable": [],
    "paramiko.config.LazyFqdn.__init__": [],
    "socketserver.TCPServer": [],
    "socketserver.UnixStreamServer": [],
    "argparse._AppendConstAction": [],
    "cryptography.hazmat.primitives.ciphers.aead": [
        "cryptography.hazmat.primitives.ciphers.aead.AESOCB3",
        "cryptography.hazmat.primitives.ciphers.aead.AESGCM",
        "cryptography.hazmat.primitives.ciphers.aead.ChaCha20Poly1305",
        "cryptography.hazmat.primitives.ciphers.aead.AESCCM",
        "cryptography.hazmat.primitives.ciphers.aead.AESSIV"
    ],
    "urllib.parse._ResultMixinBytes": [],
    "urllib.parse.ParseResult": [],
    "sshtunnel._ThreadingStreamForwardServer": [],
    "gettext.NullTranslations.ngettext": [],
    "paramiko.ssh_exception.PartialAuthentication": [],
    "calendar._localized_month.__init__": [],
    "logging.Filterer.addFilter": [
        "<list>.append"
    ],
    "heapq": [
        "<builtin>.print"
    ],
    "email._parseaddr.AddressList": [],
    "selectors._BaseSelectorImpl": [],
    "contextlib._RedirectStream": [],
    "bcrypt.__about__": [],
    "argparse.ArgumentParser": [],
    "urllib.parse._NetlocResultMixinBytes": [
        "<builtin>.property"
    ],
    "subprocess._cleanup": [
        "<list>.remove"
    ],
    "cryptography.x509.extensions.PrecertPoison": [],
    "sre_compile._combine_flags": [],
    "ipaddress._BaseV4": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.SHA1": [],
    "cryptography.hazmat.backends.openssl.backend.Backend._is_fips_enabled": [
        "<builtin>.bool",
        "<builtin>.getattr"
    ],
    "paramiko.compress.ZlibDecompressor": [],
    "<str>.format": [],
    "logging.exception": [
        "logging.error"
    ],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "cryptography.utils.CryptographyDeprecationWarning": [],
    "subprocess.Popen._posix_spawn": [
        "subprocess.Popen._close_pipe_fds",
        "<list>.append",
        "<builtin>.getattr"
    ],
    "contextlib.ContextDecorator": [],
    "argparse.RawDescriptionHelpFormatter": [],
    "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP512R1": [],
    "functools": [
        "collections.namedtuple",
        "functools.singledispatchmethod",
        "functools.cached_property",
        "functools.partialmethod",
        "functools.partial",
        "<builtin>.object",
        "functools._HashedSeq"
    ],
    "typing.NamedTupleMeta": [],
    "cryptography.hazmat.primitives.ciphers.algorithms.TripleDES": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "argparse._ActionsContainer._get_positional_kwargs": [
        "<builtin>.dict",
        "<builtin>.TypeError",
        "gettext.gettext"
    ],
    "logging.Handler.setFormatter": [],
    "nacl.signing.SignedMessage": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat._oid.ExtensionOID": [],
    "traceback.StackSummary": [
        "<builtin>.classmethod"
    ],
    "argparse._SubParsersAction": [
        "argparse._SubParsersAction._ChoicesPseudoAction"
    ],
    "cryptography.hazmat.backends.openssl.backend.Backend.x25519_supported": [],
    "paramiko.agent.AgentClientProxy": [],
    "paramiko.packet.Packetizer.set_keepalive": [],
    "paramiko.message.Message.add_int": [],
    "ipaddress.NetmaskValueError": [],
    "argparse.ArgumentDefaultsHelpFormatter": [],
    "paramiko.agent.AgentSSH._read_all": [
        "paramiko.win_pageant.PageantConnection.recv",
        "paramiko.win_openssh.OpenSSHAgentConnection.recv",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.hashes.SM3": [],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES256": [
        "<builtin>.frozenset"
    ],
    "paramiko.kex_gss.NullHostKey": [],
    "cryptography.hazmat.primitives.hashes.ExtendableOutputFunction": [],
    "typing._collect_type_vars": [
        "<builtin>.isinstance",
        "<list>.append",
        "<builtin>.tuple",
        "<list>.extend"
    ],
    "paramiko.sftp_si.SFTPServerInterface": [],
    "paramiko.auth_handler.AuthHandler.is_authenticated": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT163R2": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP521R1": [],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey.__init__": [],
    "paramiko.client.AutoAddPolicy": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP256K1": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT571K1": [],
    "logging._checkLevel": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.str"
    ],
    "paramiko.server.ServerInterface": [],
    "argparse.ArgumentParser._check_value": [
        "<builtin>.map",
        "argparse.ArgumentError.__init__",
        "gettext.gettext"
    ],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePrivateKey": [
        "<builtin>.property"
    ],
    "socketserver.UnixDatagramServer": [],
    "<str>.join": [],
    "cryptography.x509.general_name.OtherName": [
        "<builtin>.property"
    ],
    "six.MovedAttribute": [],
    "paramiko.kex_ecdh_nist.KexNistp256": [],
    "genericpath._check_arg_types": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "paramiko.kex_group1.KexGroup1": [],
    "contextlib._GeneratorContextManager": [],
    "queue.Queue": [],
    "ntpath.isabs": [
        "<str>.startswith",
        "ntpath.splitdrive",
        "<builtin>.isinstance",
        "ntpath._get_bothseps",
        "<str>.replace",
        "os._fspath",
        "<builtin>.len"
    ],
    "email.errors.CloseBoundaryNotFoundDefect": [],
    "paramiko.auth_handler.AuthHandler.auth_password": [
        "paramiko.auth_handler.AuthHandler._request_auth"
    ],
    "email.charset.Charset": [],
    "cryptography.hazmat.primitives.asymmetric.padding._MaxLength": [],
    "logging.Formatter.formatTime": [],
    "six.MovedModule": [],
    "argparse._get_action_name": [],
    "operator.attrgetter.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<str>.split",
        "<builtin>.tuple",
        "<builtin>.map"
    ],
    "importlib.machinery": [],
    "selectors._SelectorMapping": [],
    "cryptography.hazmat.primitives._asymmetric.AsymmetricPadding": [],
    "cryptography.x509.extensions.OCSPNonce": [
        "<builtin>.property"
    ],
    "sre_parse.SubPattern.dump": [
        "<builtin>.enumerate",
        "<builtin>.str",
        "<builtin>.print",
        "<builtin>.isinstance"
    ],
    "email.errors.MultipartConversionError": [],
    "cryptography.hazmat.backends.openssl.ec._EllipticCurvePublicKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15": [],
    "argparse._ActionsContainer.register": [],
    "threading.Thread._set_tstate_lock": [],
    "cryptography.hazmat.bindings.openssl.binding._OpenSSLError": [
        "<builtin>.property"
    ],
    "cryptography.utils._DeprecatedValue.__init__": [],
    "cryptography.x509.extensions.KeyUsage": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicNumbers": [
        "<builtin>.property"
    ],
    "paramiko.packet.NeedRekeyException": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicNumbers": [
        "<builtin>.property"
    ],
    "_io.open": [],
    "string.Template": [],
    "urllib.parse.ParseResultBytes": [],
    "selectors.PollSelector": [],
    "cryptography.hazmat.primitives.ciphers.modes.ECB": [],
    "cryptography.x509.extensions.SubjectKeyIdentifier": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "paramiko.client.MissingHostKeyPolicy": [],
    "typing.io": [],
    "logging.Filterer": [],
    "six._LazyDescr": [],
    "logging.FileHandler": [],
    "cryptography.hazmat.primitives.hashes.SHAKE128": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP384R1": [],
    "random.Random": [],
    "paramiko.agent.AgentLocalProxy": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP224R1": [],
    "collections.ChainMap": [
        "<builtin>.classmethod",
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.property",
        "reprlib.recursive_repr"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CTR": [
        "<builtin>.property"
    ],
    "email.errors.HeaderParseError": [],
    "tempfile.TemporaryDirectory": [
        "<builtin>.classmethod"
    ],
    "paramiko._version": [
        "<builtin>.map"
    ],
    "sre_parse": [
        "sre_parse.SubPattern",
        "sre_constants",
        "sre_parse.Tokenizer",
        "<builtin>.ord",
        "sre_parse.Verbose",
        "<builtin>.frozenset",
        "sre_parse.State"
    ],
    "nacl.exceptions.InvalidkeyError": [],
    "operator.methodcaller.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "sshtunnel._ThreadingForwardServer": [],
    "sre_parse.SubPattern.append": [
        "<list>.append"
    ],
    "paramiko.agent.AgentRemoteProxy": [],
    "logging.Filter": [],
    "cryptography.hazmat.backends.openssl.x448._X448PublicKey": [],
    "cryptography.hazmat._oid.AttributeOID": [],
    "argparse.Namespace": [],
    "gettext.NullTranslations.gettext": [],
    "sshtunnel.HandlerSSHTunnelForwarderError": [],
    "urllib.parse.SplitResultBytes": [],
    "argparse.ArgumentParser._read_args_from_files": [
        "<builtin>.str",
        "argparse.ArgumentParser.convert_arg_line_to_args",
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser._read_args_from_files",
        "<list>.extend",
        "<list>.append",
        "<builtin>.open"
    ],
    "nacl.encoding.Base64Encoder": [
        "<builtin>.staticmethod"
    ],
    "_thread.RLock": [],
    "shutil": [
        "<builtin>.hasattr",
        "shutil._GiveupOnFastCopy",
        "shutil.RegistryError",
        "shutil.SpecialFileError",
        "bz2",
        "collections.namedtuple",
        "lzma",
        "shutil.Error",
        "shutil.ReadError",
        "shutil.ExecError",
        "shutil.SameFileError",
        "fnmatch",
        "<list>.append"
    ],
    "copyreg": [],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "collections._OrderedDictKeysView": [],
    "_threading_local._localimpl": [],
    "cryptography.hazmat.primitives.hashes.SHAKE256": [
        "<builtin>.property"
    ],
    "six._SixMetaPathImporter._add_module": [],
    "cryptography.hazmat.primitives.asymmetric.padding.MGF": [],
    "cryptography.hazmat.primitives.hashes.SHA3_512": [],
    "cryptography.hazmat._oid.NameOID": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers": [
        "<builtin>.property"
    ],
    "reprlib": [
        "reprlib.Repr",
        "reprlib.Repr.__init__"
    ],
    "argparse._ActionsContainer._get_handler": [
        "<builtin>.ValueError",
        "gettext.gettext",
        "<builtin>.getattr"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SEED": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "nacl.encoding.Base16Encoder": [
        "<builtin>.staticmethod"
    ],
    "cryptography.utils._ModuleWithDeprecations.__init__": [
        "<builtin>.super"
    ],
    "urllib.parse._NetlocResultMixinBase": [
        "<builtin>.property"
    ],
    "traceback.TracebackException": [
        "<builtin>.classmethod"
    ],
    "calendar._localized_day.__init__": [],
    "cryptography.hazmat.primitives.hashes.SHA512_256": [],
    "cryptography.hazmat.primitives.hashes.BLAKE2s": [
        "<builtin>.property"
    ],
    "paramiko.kex_group14.KexGroup14SHA256": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateNumbers": [
        "<builtin>.property"
    ],
    "paramiko.kex_group14.KexGroup14": [],
    "cryptography.hazmat.primitives.ciphers.base._AEADEncryptionContext": [
        "<builtin>.property"
    ],
    "paramiko.ssh_gss._SSH_GSSAPI_NEW": [
        "<builtin>.property"
    ],
    "typing._ProtocolMeta": [],
    "typing.ForwardRef": [],
    "paramiko.ecdsakey._ECDSACurve": [],
    "cryptography.x509.extensions.AccessDescription": [
        "<builtin>.property"
    ],
    "collections._Link": [],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "paramiko.ssh_exception.PasswordRequiredException": [],
    "paramiko.auth_handler.AuthHandler.__init__": [
        "_weakref.proxy"
    ],
    "ipaddress._IPAddressBase": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.OCSPNoCheck": [],
    "cryptography.hazmat.primitives._serialization.KeySerializationEncryption": [],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "socketserver.TCPServer.server_activate": [],
    "argparse.Action": [],
    "cryptography.hazmat.primitives.ciphers.algorithms.Camellia": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "logging.StringTemplateStyle": [],
    "paramiko.kex_ecdh_nist.KexNistp521": [],
    "cryptography.hazmat.bindings.openssl.binding._consume_errors": [
        "<list>.append"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding._Auto": [],
    "paramiko.server.SubsystemHandler": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP192R1": [],
    "argparse.Namespace.__init__": [
        "<builtin>.setattr"
    ],
    "collections._OrderedDictValuesView": [],
    "cryptography.hazmat._oid.SubjectInformationAccessOID": [],
    "socketserver.ThreadingUnixDatagramServer": [],
    "traceback.FrameSummary": [
        "<builtin>.property"
    ],
    "paramiko.sftp_server.SFTPServer": [
        "<builtin>.staticmethod"
    ],
    "<builtin>.property": [],
    "copyreg.pickle": [
        "<builtin>.callable",
        "copyreg.constructor",
        "<builtin>.TypeError"
    ],
    "cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm": [],
    "tempfile._TemporaryFileWrapper": [],
    "paramiko.channel.ChannelStderrFile": [],
    "_weakrefset.WeakSet._commit_removals": [],
    "nacl.bindings.crypto_generichash.Blake2State": [],
    "paramiko.util.PFilter": [],
    "queue.LifoQueue": [],
    "_io.TextIOWrapper": [],
    "logging._acquireLock": [
        "threading._RLock.acquire"
    ],
    "paramiko.config.SSHConfig._get_matches": [
        "<builtin>.list",
        "<builtin>.filter",
        "<builtin>.any",
        "<list>.append"
    ],
    "paramiko.config.SSHConfigDict": [],
    "cryptography.hazmat.primitives.ciphers.modes.CFB": [
        "<builtin>.property"
    ],
    "nacl.exceptions.TypeError": [],
    "paramiko.config.SSHConfig.__init__": [],
    "paramiko.kex_gss.KexGSSGroup14": [],
    "cryptography.x509.general_name.UnsupportedGeneralNameType": [],
    "email.errors.InvalidBase64LengthDefect": [],
    "sre_parse.SubPattern.__init__": [],
    "cryptography.hazmat.primitives.hashes.SHA3_256": [],
    "ipaddress._BaseV4._make_netmask": [
        "ipaddress.IPv4Address.__init__",
        "ipaddress._IPAddressBase._prefix_from_ip_string",
        "ipaddress._IPAddressBase._report_invalid_netmask",
        "ipaddress._IPAddressBase._prefix_from_prefix_string",
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._ip_int_from_prefix"
    ],
    "cryptography.x509.extensions.CRLReason": [
        "<builtin>.property"
    ],
    "operator": [
        "operator.methodcaller",
        "operator.attrgetter",
        "operator.itemgetter"
    ],
    "typing._Immutable": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.register_cipher_adapter": [
        "<builtin>.ValueError"
    ],
    "contextlib.nullcontext": [],
    "tempfile.SpooledTemporaryFile": [
        "<builtin>.property"
    ],
    "socket._GiveupOnSendfile": [],
    "ipaddress._BaseV4._ip_int_from_string": [
        "<builtin>.map",
        "<builtin>.len"
    ],
    "nacl.encoding.Base32Encoder": [
        "<builtin>.staticmethod"
    ],
    "string._TemplateMetaclass": [],
    "subprocess.TimeoutExpired": [
        "<builtin>.property"
    ],
    "nacl.bindings.utils": [],
    "urllib.parse._fix_result_transcoding": [],
    "calendar.TextCalendar": [],
    "cryptography.x509.general_name.UniformResourceIdentifier": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "argparse.ArgumentParser._get_nargs_pattern": [
        "<str>.replace"
    ],
    "paramiko.kex_group16.KexGroup16SHA512": [],
    "paramiko.rsakey.RSAKey": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "cryptography.hazmat.backends": [
        "typing"
    ],
    "cryptography.x509.general_name.GeneralName": [],
    "six._MovedItems": [],
    "logging.RootLogger": [],
    "paramiko.ssh_exception.ProxyCommandFailure": [],
    "cryptography.hazmat.backends.openssl.x25519._X25519PublicKey": [],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Formatter.formatException": [
        "_io.StringIO",
        "traceback.print_exception"
    ],
    "ipaddress._BaseV6": [
        "<builtin>.classmethod",
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "string.Formatter": [],
    "itertools.count": [],
    "logging.getLevelName": [
        "<map>.get"
    ],
    "email.errors.MessageError": [],
    "paramiko.client.RejectPolicy": [],
    "paramiko.kex_gex.KexGex": [],
    "argparse.MetavarTypeHelpFormatter": [],
    "os._fscodec.fsdecode": [
        "<builtin>.isinstance",
        "<str>.decode",
        "os._fspath"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT163K1": [],
    "shlex.shlex": [
        "<builtin>.property"
    ],
    "paramiko.compress.ZlibCompressor": [],
    "contextlib.redirect_stderr": [],
    "urllib.parse.SplitResult": [],
    "email.errors.InvalidBase64PaddingDefect": [],
    "paramiko.ssh_exception.AuthenticationException": [],
    "cryptography.hazmat._oid.CertificatePoliciesOID": [],
    "logging.NullHandler": [],
    "cryptography.hazmat.primitives.ciphers.modes.CBC": [
        "<builtin>.property"
    ],
    "weakref.WeakValueDictionary._commit_removals": [
        "_weakref._remove_dead_weakref"
    ],
    "nacl.encoding.HexEncoder": [
        "<builtin>.staticmethod"
    ],
    "paramiko.auth_handler.AuthHandler.auth_gssapi_keyex": [
        "paramiko.auth_handler.AuthHandler._request_auth"
    ],
    "cryptography.hazmat.primitives.ciphers.base._AEADDecryptionContext": [],
    "paramiko.hostkeys.InvalidHostKey": [],
    "argparse._ActionsContainer._registry_get": [],
    "ipaddress.AddressValueError": [],
    "cryptography.hazmat._oid.ExtendedKeyUsageOID": [],
    "logging.Manager": [],
    "ipaddress._BaseAddress": [],
    "typing.Protocol": [],
    "paramiko.config.SSHConfig._allowed_tokens": [
        "<map>.get"
    ],
    "paramiko.ssh_exception.ConfigParseError": [],
    "cryptography.hazmat.primitives.hashes.SHA3_384": [],
    "paramiko.client.WarningPolicy": [],
    "selectors.SelectSelector": [],
    "genericpath.isfile": [
        "stat.S_ISREG"
    ],
    "socketserver.ThreadingUnixStreamServer": [],
    "socketserver.ThreadingUDPServer": [],
    "threading._newname": [],
    "paramiko.kex_ecdh_nist.KexNistp384": [],
    "paramiko.transport.ChannelMap": [],
    "paramiko.agent.AgentSSH": [],
    "paramiko.ssh_exception.IncompatiblePeer": [],
    "nacl.exceptions.BadSignatureError": [],
    "calendar.LocaleTextCalendar": [],
    "cryptography.utils.InterfaceNotImplemented": [],
    "six._add_doc": [],
    "paramiko.ssh_gss._SSH_SSPI": [
        "<builtin>.property"
    ],
    "paramiko.kex_gex.KexGexSHA256": [],
    "urllib.parse._NetlocResultMixinStr": [
        "<builtin>.property"
    ],
    "paramiko.client.SSHClient": [],
    "argparse.ArgumentParser._parse_optional": [
        "argparse.ArgumentParser.error",
        "<builtin>.len",
        "argparse.ArgumentParser._get_option_tuples",
        "gettext.gettext"
    ],
    "six.Module_six_moves_urllib_response": [],
    "datetime.timedelta": [
        "<builtin>.property"
    ],
    "ipaddress._IPAddressBase._split_addr_prefix": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "ipaddress._split_optional_netmask"
    ],
    "paramiko.message.Message.get_bytes": [
        "<builtin>.len"
    ],
    "ntpath.normcase": [
        "<builtin>.isinstance",
        "os._fspath"
    ],
    "genericpath.exists": [],
    "typing.TypeVar": [],
    "paramiko.message.Message.asbytes": [],
    "logging.StreamHandler": [],
    "paramiko.agent.AgentSSH.get_keys": [],
    "argparse._StoreAction": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPrivateKey": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.x448._X448PrivateKey": [],
    "argparse._StoreConstAction": [],
    "six._SixMetaPathImporter._get_module": [],
    "cryptography.hazmat.primitives.hashes.MD5": [],
    "paramiko.ssh_exception.BadAuthenticationType": [],
    "calendar.LocaleHTMLCalendar": [],
    "io": [
        "io.TextIOBase",
        "io.BufferedIOBase",
        "io.RawIOBase",
        "io.IOBase"
    ],
    "cryptography.hazmat.bindings.openssl.binding._openssl_assert": [
        "cryptography.hazmat.bindings.openssl.binding._errors_with_text",
        "cryptography.hazmat.bindings.openssl.binding._consume_errors",
        "cryptography.exceptions.InternalError.__init__"
    ],
    "reprlib.recursive_repr": [],
    "calendar.HTMLCalendar": [],
    "cryptography.__about__": [],
    "cryptography.hazmat.primitives.hashes.BLAKE2b": [
        "<builtin>.property"
    ],
    "paramiko.auth_handler.AuthHandler.auth_interactive": [
        "paramiko.auth_handler.AuthHandler._request_auth"
    ],
    "cryptography.x509.general_name.DirectoryName": [
        "<builtin>.property"
    ],
    "socketserver.ThreadingTCPServer": [],
    "cryptography.x509.extensions.CRLNumber": [
        "<builtin>.property"
    ],
    "socketserver.ForkingUDPServer": [],
    "logging.BufferingFormatter": [],
    "paramiko.ssh_exception.CouldNotCanonicalize": [],
    "typing.TypedDict": [],
    "__future__._Feature.__init__": [],
    "six._SixMetaPathImporter.__init__": [],
    "email.errors.MissingHeaderBodySeparatorDefect": [],
    "cryptography.hazmat.backends.openssl.x25519._X25519PrivateKey": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT409R1": [],
    "logging._StderrHandler": [
        "<builtin>.property"
    ],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "socketserver.DatagramRequestHandler": [],
    "_io.StringIO": [],
    "typing.NamedTuple": [],
    "email.errors.InvalidHeaderDefect": [],
    "contextlib.AbstractAsyncContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "paramiko.config.LazyFqdn": [],
    "queue._PySimpleQueue": [],
    "contextlib._AsyncGeneratorContextManager": [],
    "threading.Thread._set_ident": [
        "_thread.get_ident"
    ],
    "cryptography.hazmat._oid.SignatureAlgorithmOID": [],
    "selectors._PollLikeSelector": [],
    "cryptography.x509.general_name.RFC822Name": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "socketserver.ThreadingMixIn": [],
    "argparse.ArgumentError": [],
    "logging.Filterer.__init__": [],
    "tracemalloc": [
        "tracemalloc.Traceback",
        "tracemalloc._Traces",
        "tracemalloc.Filter",
        "tracemalloc.Snapshot",
        "pickle",
        "tracemalloc.Frame",
        "tracemalloc.DomainFilter",
        "tracemalloc.Trace",
        "tracemalloc.Statistic",
        "tracemalloc.StatisticDiff",
        "tracemalloc.BaseFilter"
    ],
    "six.Module_six_moves_urllib_parse": [],
    "queue.Queue._init": [
        "_collections.deque"
    ],
    "argparse.RawTextHelpFormatter": [],
    "ipaddress._BaseV6._make_netmask": [
        "ipaddress._IPAddressBase._prefix_from_prefix_string",
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._ip_int_from_prefix",
        "ipaddress.IPv6Address.__init__",
        "ipaddress._IPAddressBase._report_invalid_netmask"
    ],
    "typing._SpecialForm.__init__": [],
    "datetime.tzinfo": [],
    "subprocess.Popen._handle_exitstatus": [],
    "nacl.encoding.URLSafeBase64Encoder": [
        "<builtin>.staticmethod"
    ],
    "locale.normalize": [
        "locale._append_modifier",
        "locale._replace_encoding",
        "<str>.replace",
        "<map>.get"
    ],
    "selectors.KqueueSelector": [],
    "cryptography.x509.extensions.DeltaCRLIndicator": [
        "<builtin>.property"
    ],
    "calendar.different_locale": [],
    "six.Module_six_moves_urllib_error": [],
    "cryptography.hazmat.primitives.ciphers.base.AEADEncryptionContext": [],
    "contextlib.ExitStack": [],
    "socketserver._SocketWriter": [],
    "functools.wraps": [],
    "nacl.bindings.crypto_shorthash": [
        "<builtin>.bool"
    ],
    "argparse.HelpFormatter": [
        "argparse.HelpFormatter._Section"
    ],
    "six.Module_six_moves_urllib_request": [],
    "cryptography.hazmat._oid.CRLEntryExtensionOID": [],
    "calendar.IllegalWeekdayError": [],
    "cryptography.x509.extensions.DuplicateExtension": [],
    "paramiko.transport.Transport.get_exception": [],
    "paramiko.ssh_gss._SSH_GSSAuth": [],
    "argparse._StoreTrueAction": [],
    "_weakref.proxy": [],
    "paramiko.agent.get_agent_connection.<lambda1>": [],
    "sre_parse.State.__init__": [],
    "socketserver.BaseRequestHandler": [],
    "paramiko.ssh_gss.GSSAuth": [
        "<builtin>.ImportError",
        "paramiko.ssh_gss._SSH_GSSAPI_NEW.__init__",
        "paramiko.ssh_gss._SSH_GSSAPI_OLD.__init__",
        "paramiko.ssh_gss._SSH_SSPI.__init__"
    ],
    "sre_parse.Tokenizer.__next": [
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "linecache.clearcache": [],
    "paramiko.ssh_gss._SSH_GSSAPI_OLD": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.backends.openssl.dh._DHPublicKey": [
        "<builtin>.property"
    ],
    "socketserver.ForkingMixIn": [],
    "paramiko.util.ClosingContextManager": [],
    "paramiko.transport.Transport.use_compression": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers": [
        "<builtin>.property"
    ],
    "paramiko.sftp.BaseSFTP": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve": [],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithInitializationVector": [],
    "cryptography.hazmat.primitives.hashes.SHA512_224": [],
    "cryptography.x509.base._RawRevokedCertificate": [
        "<builtin>.property"
    ],
    "socketserver.StreamRequestHandler": [],
    "paramiko.transport.SecurityOptions": [
        "<builtin>.property"
    ],
    "_thread.get_ident": [],
    "subprocess.Popen._get_handles": [
        "subprocess.Popen._get_devnull",
        "<builtin>.isinstance"
    ],
    "paramiko.auth_handler.GssapiWithMicAuthHandler": [
        "<builtin>.property"
    ],
    "nacl.exceptions.CryptoError": [],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES128": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.backends.openssl.dsa._DSAParameters": [],
    "ipaddress._IPAddressBase._check_int_address": [],
    "cryptography.hazmat.primitives.asymmetric.padding.MGF1": [],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "ntpath.join": [
        "ntpath.splitdrive",
        "<str>.lower",
        "<builtin>.isinstance",
        "os._fspath",
        "genericpath._check_arg_types",
        "<builtin>.map"
    ],
    "paramiko.transport.Transport.get_remote_server_key": [],
    "_weakrefset.WeakSet": [],
    "cryptography.hazmat.primitives._serialization.NoEncryption": [],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "cryptography.x509.general_name.IPAddress": [
        "<builtin>.property"
    ],
    "email.errors.UndecodableBytesDefect": [],
    "socketserver.TCPServer.server_bind": [],
    "paramiko.py3compat.long": [],
    "cryptography.x509.base.InvalidVersion": [],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "nacl.signing.SigningKey": [
        "<builtin>.classmethod"
    ],
    "os._fscodec.fsencode": [
        "<builtin>.isinstance",
        "<str>.encode",
        "os._fspath"
    ],
    "traceback.print_exception": [
        "traceback.TracebackException.format",
        "<builtin>.type",
        "<builtin>.print",
        "traceback.TracebackException.__init__"
    ],
    "paramiko.transport.Transport.is_active": [],
    "hmac.HMAC": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.InhibitAnyPolicy": [
        "<builtin>.property"
    ],
    "nacl.exceptions.ValueError": [],
    "nacl.encoding.RawEncoder": [
        "<builtin>.staticmethod"
    ],
    "argparse._HelpAction": [],
    "nacl.exceptions.RuntimeError": [],
    "logging.Formatter": [],
    "abc.abstractmethod": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT233K1": [],
    "cryptography.hazmat.backends.openssl.backend.GetCipherByName": [],
    "argparse._StoreFalseAction": [],
    "logging.Handler.acquire": [
        "threading._RLock.acquire"
    ],
    "argparse.ArgumentTypeError": [],
    "cryptography.hazmat.primitives.asymmetric.ec.ECDH": [],
    "paramiko.ecdsakey._ECDSACurveSet": [],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "_weakrefset._IterationGuard": [],
    "cryptography.hazmat.primitives.kdf.scrypt.Scrypt": [],
    "cryptography.hazmat.primitives.hashes.SHA256": [],
    "ntpath.splitext": [
        "genericpath._splitext",
        "<builtin>.isinstance",
        "os._fspath"
    ],
    "logging.Logger": [],
    "nacl.exceptions.AssertionError": [],
    "encodings.normalize_encoding": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "<list>.append"
    ],
    "nacl.utils.StringFixer": [],
    "codecs": [
        "codecs.BufferedIncrementalDecoder",
        "codecs.BufferedIncrementalEncoder",
        "codecs.StreamReader",
        "codecs.IncrementalDecoder",
        "codecs.Codec",
        "encodings",
        "codecs.StreamReaderWriter",
        "codecs.StreamWriter",
        "<builtin>.SystemError",
        "codecs.IncrementalEncoder",
        "codecs.StreamRecoder",
        "codecs.CodecInfo"
    ],
    "enum": [
        "enum.IntFlag",
        "enum.Flag",
        "types",
        "enum.Enum",
        "enum.IntEnum",
        "enum._EnumDict",
        "enum.auto",
        "<builtin>.object",
        "enum.EnumMeta"
    ],
    "email.errors.ObsoleteHeaderDefect": [],
    "argparse._VersionAction": [],
    "cryptography.hazmat.primitives.hashes.SHA384": [],
    "random.SystemRandom": [],
    "cryptography.hazmat.primitives.ciphers.modes.OFB": [
        "<builtin>.property"
    ],
    "contextlib.closing": [],
    "sshtunnel.BaseSSHTunnelForwarderError": [],
    "collections.UserString": [],
    "email.errors.StartBoundaryNotFoundDefect": [],
    "paramiko.agent.AgentProxyThread": [],
    "paramiko.sftp_client.SFTPClient": [
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT409K1": [],
    "paramiko.sftp.SFTPError": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicNumbers": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "six.Module_six_moves_urllib_robotparser": [],
    "cryptography.hazmat.primitives.ciphers.algorithms.SM4": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "email.quoprimime": [
        "<str>.encode",
        "<builtin>.ord",
        "<builtin>.chr",
        "<builtin>.range"
    ],
    "email.errors.InvalidMultipartContentTransferEncodingDefect": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT283K1": [],
    "argparse.ArgumentError.__init__": [
        "argparse._get_action_name"
    ],
    "paramiko.agent.AgentSSH.__init__": [],
    "ipaddress._split_optional_netmask": [
        "<builtin>.str",
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT571R1": [],
    "paramiko.auth_handler.AuthHandler": [
        "<builtin>.property"
    ],
    "ipaddress._BaseV6._ip_int_from_string": [
        "<builtin>.range",
        "ipaddress._BaseV6._parse_hextet",
        "<builtin>.len",
        "ipaddress.IPv4Address.__init__"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Blowfish": [
        "<builtin>.range",
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "queue.Full": [],
    "subprocess.CalledProcessError": [
        "<builtin>.property"
    ],
    "email.errors.InvalidBase64CharactersDefect": [],
    "logging.PlaceHolder": [],
    "paramiko.channel.ChannelStdinFile": [],
    "subprocess.Popen._close_pipe_fds": [
        "contextlib._BaseExitStack.callback",
        "<builtin>.getattr"
    ],
    "paramiko.transport.Transport.set_gss_host": [],
    "getpass.GetPassWarning": [],
    "paramiko.message.Message.add_byte": [],
    "sre_compile._get_iscased": [],
    "paramiko.buffered_pipe.PipeTimeout": [],
    "argparse._MutuallyExclusiveGroup": [],
    "paramiko.kex_gss.KexGSSGex": [],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicNumbers": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT233R1": [],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.ARC4": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "os": [
        "ntpath",
        "os._Environ",
        "os._add",
        "posixpath",
        "<builtin>.set",
        "abc",
        "os._createenviron",
        "os._Environ.__init__",
        "os.PathLike",
        "<builtin>.ImportError",
        "os._fscodec",
        "os._wrap_close",
        "stat",
        "os._exists",
        "<builtin>.globals",
        "<list>.append",
        "<list>.extend",
        "os._AddedDllDirectory"
    ],
    "email.errors.MultipartInvariantViolationDefect": [],
    "threading.Thread._set_native_id": [],
    "sre_compile._bytes_to_codes": [
        "<builtin>.memoryview",
        "<builtin>.len"
    ],
    "email.errors.NonASCIILocalPartDefect": [],
    "_collections._tuplegetter": [],
    "_weakref.ref": [],
    "paramiko.proxy.ProxyCommand.__init__": [
        "subprocess.Popen.__init__"
    ],
    "cryptography.hazmat.primitives.hashes.SHA3_224": [],
    "ipaddress._IPAddressBase._check_packed_address": [
        "<builtin>.len"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding._DigestLength": [],
    "operator.itemgetter.__init__": [],
    "cryptography.x509.extensions.ExtensionNotFound": [],
    "argparse._ExtendAction": [],
    "contextlib.redirect_stdout": [],
    "paramiko.proxy.ProxyCommand": [
        "<builtin>.property"
    ],
    "threading.Event.is_set": [],
    "contextlib.AbstractContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "paramiko.ssh_exception.BadHostKeyException": [],
    "paramiko.transport.Transport.__init__.<lambda1>": [],
    "subprocess.Popen": [
        "<builtin>.property"
    ],
    "paramiko.sftp_file.SFTPFile": [],
    "contextlib._GeneratorContextManagerBase": [],
    "cryptography.hazmat.bindings.openssl.binding._verify_openssl_version": [
        "warnings.warn"
    ],
    "datetime._days_before_year": [],
    "socketserver.BaseServer": [],
    "sshtunnel._ForwardHandler": [],
    "paramiko.config.SSHConfigDict.__init__": [
        "<builtin>.super"
    ],
    "threading._RLock.__init__": [],
    "typing._TypedDictMeta": [],
    "argparse._AttributeHolder": [],
    "cryptography.x509.extensions._make_sequence_methods": [],
    "paramiko.sftp_client.SFTP": [],
    "collections.OrderedDict": [
        "<builtin>.classmethod",
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.object",
        "reprlib.recursive_repr"
    ],
    "argparse._CountAction": [],
    "paramiko.primes.ModulusPack": [],
    "paramiko.server.InteractiveQuery": [],
    "cryptography.x509.general_name.RegisteredID": [
        "<builtin>.property"
    ],
    "urllib.parse.DefragResultBytes": [],
    "nacl.exceptions.UnavailableError": [],
    "cryptography.hazmat.primitives._serialization.BestAvailableEncryption": [],
    "urllib.parse.DefragResult": [],
    "nacl.bindings.randombytes": [],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.__init__": [],
    "cryptography.hazmat.primitives.ciphers.algorithms.CAST5": [
        "<builtin>.range",
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "collections.<lambda1>": [
        "operator.itemgetter.__init__",
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.DNSName": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "six._LazyModule": [],
    "argparse._ArgumentGroup": [],
    "cryptography.hazmat.primitives.ciphers.modes.XTS": [
        "<builtin>.property"
    ],
    "email.errors.HeaderMissingRequiredValue": [],
    "nacl.bindings.crypto_aead": [
        "nacl.exceptions"
    ],
    "paramiko.ssh_exception.SSHException": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID": [],
    "paramiko.agent.AgentServerProxy": [],
    "cryptography.hazmat._oid.OCSPExtensionOID": [],
    "argparse.ArgumentParser.error": [
        "gettext.gettext",
        "argparse.ArgumentParser.print_usage",
        "argparse.ArgumentParser.exit"
    ],
    "queue.PriorityQueue": [],
    "cryptography.x509.extensions.UnrecognizedExtension": [
        "<builtin>.property"
    ],
    "paramiko.message.Message.__init__": [
        "_io.BytesIO"
    ],
    "cryptography.x509.certificate_transparency.SignedCertificateTimestamp": [],
    "cryptography.x509.base.AttributeNotFound": [],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "email.errors.MisplacedEnvelopeHeaderDefect": [],
    "paramiko.ber.BERException": [],
    "typing.ForwardRef.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.SyntaxError",
        "<builtin>.compile"
    ],
    "quopri": [],
    "typing._Final": [],
    "six._SixMetaPathImporter": [],
    "typing._TypingEmpty": [],
    "dis": [
        "dis.Instruction",
        "collections.namedtuple",
        "opcode",
        "dis.Bytecode"
    ],
    "gettext.NullTranslations._parse": [],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "typing._TypingEllipsis": [],
    "argparse._ActionsContainer._get_optional_kwargs": [
        "<builtin>.ValueError",
        "<list>.append",
        "<builtin>.dict",
        "<builtin>.len",
        "gettext.gettext"
    ],
    "sshtunnel.BaseSSHTunnelForwarderError.__init__": [],
    "paramiko.agent.Agent": [],
    "cryptography.hazmat.backends.openssl.dh._DHParameters": [],
    "collections.UserList": [],
    "email.errors.NoBoundaryInMultipartDefect": [],
    "paramiko.auth_handler.AuthHandler.auth_gssapi_with_mic": [
        "paramiko.auth_handler.AuthHandler._request_auth"
    ],
    "email.errors.MessageDefect": [],
    "cryptography.x509.base.RevokedCertificate": [],
    "cryptography.hazmat.backends.openssl.backend.Backend.activate_osrandom_engine": [
        "cryptography.hazmat.backends.openssl.backend.Backend.openssl_assert",
        "cryptography.hazmat.backends.openssl.backend.Backend._get_osurandom_engine",
        "cryptography.hazmat.backends.openssl.backend.Backend.activate_builtin_random"
    ],
    "logging.LogRecord.getMessage": [
        "<builtin>.str"
    ],
    "logging.FileHandler._open": [
        "<builtin>.open"
    ],
    "cryptography.hazmat.backends.openssl.backend.GetCipherByName.__init__": [],
    "cryptography.hazmat.primitives.hashes.SHA512": [],
    "sre_constants.error.__init__": [
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce": [],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey.generate": [
        "cryptography.exceptions.UnsupportedAlgorithm.__init__",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_supported",
        "cryptography.hazmat.backends.openssl.backend.Backend.x25519_generate_key"
    ],
    "locale": [
        "<builtin>.hasattr",
        "<builtin>.sorted",
        "re.compile",
        "<builtin>.print",
        "functools.wraps",
        "encodings.aliases",
        "<builtin>.globals",
        "<map>.setdefault",
        "<map>.items"
    ],
    "email._parseaddr.AddrlistClass": [],
    "_thread._local": [],
    "paramiko.agent.AgentKey": [
        "<builtin>.property"
    ],
    "paramiko.sftp_attr.SFTPAttributes": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "ipaddress.IPv6Network": [
        "<builtin>.property"
    ],
    "subprocess.SubprocessError": [],
    "cryptography.x509.extensions.InvalidityDate": [
        "<builtin>.property"
    ],
    "datetime.timezone._create": [],
    "socketserver.ForkingTCPServer": [],
    "paramiko.config._addressfamily_host_lookup": [],
    "typing.overload": [],
    "cryptography.hazmat.backends.openssl.poly1305._Poly1305Context": [],
    "_collections.deque": [],
    "urllib.parse.Quoter": [],
    "argparse.FileType": [],
    "paramiko.channel.ChannelFile": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameterNumbers": [
        "<builtin>.property"
    ],
    "paramiko.buffered_pipe.BufferedPipe": [],
    "email.errors.FirstHeaderLineIsContinuationDefect": [],
    "_threading_local.local": [],
    "nacl.exceptions.CryptPrefixError": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECP256R1": [],
    "cryptography.hazmat.backends.openssl.backend._RC2": [],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithTweak": [],
    "tempfile._TemporaryFileCloser": [],
    "cryptography.hazmat._oid.AuthorityInformationAccessOID": [],
    "__future__._Feature": [],
    "cryptography.hazmat.primitives.asymmetric.ec.SECT283R1": [],
    "email.errors.CharsetError": [],
    "cryptography.hazmat.backends.openssl.hashes._HashContext": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.bindings.openssl.binding.Binding": [
        "<builtin>.classmethod"
    ],
    "logging.LogRecord": [],
    "paramiko.pipe.PosixPipe": [],
    "cryptography.hazmat.backends.openssl.cmac._CMACContext": [],
    "contextlib.suppress": [],
    "email.base64mime": [],
    "collections._OrderedDictItemsView": [],
    "socketserver.UDPServer": [],
    "paramiko.config.SSHConfig._should_fail": [],
    "paramiko.agent.AgentRequestHandler": [],
    "genericpath._splitext": [
        "<str>.rfind",
        "<builtin>.max"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.IDEA": [
        "<builtin>.frozenset",
        "<builtin>.property"
    ],
    "paramiko.ssh_exception.ChannelException": [],
    "subprocess._use_posix_spawn": [
        "<builtin>.hasattr",
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.tuple"
    ],
    "paramiko.sftp_handle.SFTPHandle": [],
    "cryptography.hazmat.primitives.asymmetric.ec.BrainpoolP256R1": [],
    "paramiko.pkey.PublicBlob": [
        "<builtin>.classmethod"
    ],
    "paramiko.message.Message": [],
    "subprocess.CompletedProcess": [],
    "typing.re": [],
    "argparse._ActionsContainer._check_conflict": [
        "argparse._ActionsContainer._get_handler",
        "<list>.append"
    ],
    "paramiko.pipe.WindowsPipe": [],
    "urllib.parse._ResultMixinStr": [],
    "paramiko.pipe.OrPipe": []
}