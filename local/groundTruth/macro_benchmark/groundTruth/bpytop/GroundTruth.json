{
    "__future__": [
        "__future__._Feature.__init__",
        "__future__._Feature"
    ],
    "_collections_abc.ItemsView.__iter__": [
        "os._Environ.__getitem__",
        "os._Environ.__iter__"
    ],
    "_collections_abc.Mapping.__contains__": [
        "os._Environ.__getitem__"
    ],
    "_collections_abc.Mapping.get": [
        "os._Environ.__getitem__"
    ],
    "_collections_abc.Mapping.items": [
        "_collections_abc.MappingView.__init__"
    ],
    "_common.wrap_numbers": [
        "_common._WrapNumbers.run"
    ],
    "_distutils_hack.DistutilsMetaFinder.find_spec": [
        "_distutils_hack.<lambda>"
    ],
    "_pslinux.Process": [
        "_pslinux.wrap_exceptions",
        "re.compile",
        "genericpath.exists",
        "_common.memoize_when_activated"
    ],
    "_pslinux.Process.__init__": [
        "_common.get_procfs_path"
    ],
    "_pslinux.Process.oneshot_enter": [
        "_common.cache_activate"
    ],
    "_pslinux.Process.oneshot_exit": [
        "_common.cache_deactivate"
    ],
    "_pslinux.RootFsDeviceFinder.ask_proc_partitions": [
        "_common.get_procfs_path",
        "_common.open_text",
        "codecs.BufferedIncrementalDecoder.decode"
    ],
    "_pslinux.RootFsDeviceFinder.find": [
        "genericpath.exists",
        "_pslinux.RootFsDeviceFinder.ask_proc_partitions"
    ],
    "_pslinux._cpu_get_cpuinfo_freq": [
        "_common.get_procfs_path",
        "_common.open_binary"
    ],
    "_pslinux._parse_stat_file": [
        "_common.bcat"
    ],
    "_pslinux._read_status_file": [
        "_common.open_binary"
    ],
    "_pslinux.boot_time": [
        "_common.get_procfs_path",
        "_common.open_binary"
    ],
    "_pslinux.cmdline": [
        "_common.open_text",
        "codecs.BufferedIncrementalDecoder.decode"
    ],
    "_pslinux.cpu_count_cores": [
        "_common.open_binary",
        "glob.glob"
    ],
    "_pslinux.cpu_freq": [
        "_pslinux._cpu_get_cpuinfo_freq",
        "glob.glob",
        "_pslinux.<lambda>",
        "posixpath.join",
        "_common.bcat"
    ],
    "_pslinux.cpu_times": [
        "_pslinux.wrapper",
        "_common.get_procfs_path",
        "_common.wrapper",
        "_common.open_binary"
    ],
    "_pslinux.create_time": [
        "_pslinux.wrapper",
        "_pslinux.boot_time"
    ],
    "_pslinux.disk_io_counters": [
        "_pslinux.read_procfs",
        "_common.get_procfs_path",
        "genericpath.exists"
    ],
    "_pslinux.disk_partitions": [
        "_common.get_procfs_path",
        "genericpath.isfile",
        "codecs.BufferedIncrementalDecoder.decode",
        "_pslinux.RootFsDeviceFinder.__init__",
        "_pslinux.RootFsDeviceFinder.find",
        "posixpath.realpath",
        "_common.open_text"
    ],
    "_pslinux.memory_info": [
        "_common.open_binary"
    ],
    "_pslinux.name": [
        "_pslinux.wrapper",
        "_common.decode"
    ],
    "_pslinux.net_if_stats": [
        "_pslinux.net_io_counters"
    ],
    "_pslinux.net_io_counters": [
        "_common.get_procfs_path",
        "_common.open_text",
        "codecs.BufferedIncrementalDecoder.decode"
    ],
    "_pslinux.num_threads": [
        "_pslinux.wrapper"
    ],
    "_pslinux.per_cpu_times": [
        "_common.get_procfs_path",
        "_common.wrapper",
        "_common.open_binary"
    ],
    "_pslinux.pids": [
        "_common.get_procfs_path",
        "_compat.b"
    ],
    "_pslinux.read_procfs": [
        "_common.get_procfs_path",
        "_common.open_text",
        "codecs.BufferedIncrementalDecoder.decode"
    ],
    "_pslinux.sensors_battery": [],
    "_pslinux.sensors_temperatures": [
        "posixpath.dirname",
        "re.compile",
        "_common.cat",
        "glob.glob",
        "posixpath.join",
        "_common.bcat"
    ],
    "_pslinux.set_scputimes_ntuple": [
        "_common.open_binary",
        "__init__.namedtuple"
    ],
    "_pslinux.swap_memory": [
        "_common.get_procfs_path",
        "_common.open_binary",
        "_common.usage_percent"
    ],
    "_pslinux.uids": [
        "_pslinux.wrapper"
    ],
    "_pslinux.virtual_memory": [
        "_common.get_procfs_path",
        "_common.open_binary",
        "_common.usage_percent"
    ],
    "_pslinux.wrap_exceptions": [
        "functools.wraps",
        "functools.update_wrapper"
    ],
    "_pslinux.wrapper": [
        "_pslinux.name",
        "_pslinux.uids",
        "_pslinux.memory_info",
        "_common.wrapper",
        "_pslinux.cpu_times",
        "_pslinux.num_threads",
        "_pslinux.create_time",
        "_pslinux.cmdline",
        "genericpath.exists",
        "_common.NoSuchProcess.__init__"
    ],
    "_psposix.disk_usage": [
        "_common.usage_percent"
    ],
    "_weakrefset.WeakSet.__init__": [
        "<builtin>.set",
        "_weakrefset.WeakSet.update",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet.add",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "abc.ABCMeta.__subclasscheck__": [
        "os.__subclasshook__"
    ],
    "abc.__new__": [
        "typing.__init_subclass__"
    ],
    "argparse": [
        "gettext",
        "shutil"
    ],
    "argparse.ArgumentError.__init__": [
        "argparse._get_action_name"
    ],
    "argparse.ArgumentParser.__init__": [
        "posixpath.basename",
        "argparse._ActionsContainer.__init__",
        "argparse._ActionsContainer.register",
        "argparse._AttributeHolder.__init__",
        "gettext.gettext",
        "<builtin>.super",
        "argparse._ActionsContainer.add_argument",
        "argparse._ActionsContainer.add_argument_group"
    ],
    "argparse.ArgumentParser._add_action": [
        "argparse._ArgumentGroup._add_action"
    ],
    "argparse.ArgumentParser._check_value": [
        "<builtin>.map",
        "argparse.ArgumentError.__init__",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._get_formatter": [
        "argparse.HelpFormatter.__init__",
        "argparse.ArgumentParser.formatter_class"
    ],
    "argparse.ArgumentParser._get_nargs_pattern": [
        "<str>.replace"
    ],
    "argparse.ArgumentParser._get_option_tuples": [
        "<list>.append",
        "gettext.gettext",
        "argparse.ArgumentParser.error"
    ],
    "argparse.ArgumentParser._get_positional_actions": [],
    "argparse.ArgumentParser._get_value": [
        "<builtin>.getattr",
        "<builtin>.callable",
        "<builtin>.str",
        "argparse._ActionsContainer._registry_get",
        "argparse.ArgumentError.__init__",
        "gettext.gettext",
        "<builtin>.repr"
    ],
    "argparse.ArgumentParser._get_values": [
        "<list>.remove",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "argparse.ArgumentParser._match_argument": [
        "re.match",
        "<str>.group",
        "argparse.ArgumentParser._get_nargs_pattern",
        "<builtin>.len",
        "<map>.get"
    ],
    "argparse.ArgumentParser._match_arguments_partial": [
        "<builtin>.len",
        "<builtin>.range",
        "re.match",
        "<list>.extend"
    ],
    "argparse.ArgumentParser._parse_known_args": [
        "<builtin>.hasattr",
        "<builtin>.iter",
        "<list>.extend",
        "gettext.gettext",
        "argparse.ArgumentParser._parse_known_args.extras.extend",
        "argparse.ArgumentParser._get_value",
        "argparse.ArgumentParser._parse_known_args.arg_string_pattern_parts.append",
        "<builtin>.setattr",
        "argparse.ArgumentParser._parse_known_args.required_actions.append",
        "<map>.setdefault",
        "argparse.ArgumentParser._read_args_from_files",
        "<list>.append",
        "argparse.ArgumentParser._parse_known_args.action_conflicts.setdefault",
        "argparse.ArgumentParser._parse_known_args.consume_optional",
        "<builtin>.getattr",
        "argparse.ArgumentParser._get_positional_actions",
        "<builtin>.max",
        "argparse.ArgumentParser._parse_optional",
        "<builtin>.enumerate",
        "<builtin>.min",
        "argparse.ArgumentParser._parse_known_args.consume_positionals",
        "argparse.ArgumentParser.error",
        "argparse.consume_positionals",
        "<builtin>.set",
        "<builtin>.isinstance"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_optional": [
        "<list>.append",
        "argparse.take_action",
        "argparse.ArgumentParser._match_argument"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_positionals": [
        "<builtin>.len",
        "<builtin>.zip",
        "argparse.ArgumentParser._match_arguments_partial"
    ],
    "argparse.ArgumentParser._parse_known_args.take_action": [
        "argparse.ArgumentParser._get_values",
        "argparse._StoreConstAction.__call__",
        "<map>.get",
        "argparse._HelpAction.__call__"
    ],
    "argparse.ArgumentParser._parse_optional": [
        "<builtin>.len",
        "gettext.gettext",
        "argparse.ArgumentParser._get_option_tuples",
        "argparse.ArgumentParser.error"
    ],
    "argparse.ArgumentParser._print_message": [
        "codecs.StreamRecoder.write"
    ],
    "argparse.ArgumentParser._read_args_from_files": [
        "argparse.ArgumentParser._read_args_from_files",
        "argparse.ArgumentParser.error",
        "<builtin>.str",
        "<builtin>.open",
        "<list>.append"
    ],
    "argparse.ArgumentParser.error": [
        "argparse.ArgumentParser.print_usage",
        "gettext.gettext",
        "argparse.ArgumentParser.exit"
    ],
    "argparse.ArgumentParser.exit": [
        "argparse.ArgumentParser._print_message"
    ],
    "argparse.ArgumentParser.format_usage": [
        "argparse.ArgumentParser._get_formatter",
        "argparse.HelpFormatter.format_help",
        "argparse.HelpFormatter.add_usage"
    ],
    "argparse.ArgumentParser.parse_args": [
        "gettext.gettext",
        "argparse.ArgumentParser.parse_known_args",
        "argparse.ArgumentParser.error"
    ],
    "argparse.ArgumentParser.parse_known_args": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "sys.exc_info",
        "argparse.ArgumentParser.error",
        "<builtin>.delattr",
        "<builtin>.str",
        "<list>.extend",
        "argparse.Namespace.__init__",
        "<builtin>.list",
        "<builtin>.setattr",
        "argparse.ArgumentParser._parse_known_args"
    ],
    "argparse.ArgumentParser.print_usage": [
        "argparse.ArgumentParser.format_usage",
        "argparse.ArgumentParser._print_message"
    ],
    "argparse.HelpFormatter.__init__": [
        "<builtin>.min",
        "<builtin>.max",
        "argparse._Section.__init__",
        "re.compile",
        "shutil.get_terminal_size"
    ],
    "argparse.HelpFormatter._add_item": [],
    "argparse.HelpFormatter._dedent": [],
    "argparse.HelpFormatter._expand_help": [
        "<builtin>.dict",
        "<builtin>.hasattr",
        "argparse.HelpFormatter._get_help_string",
        "<builtin>.str",
        "<builtin>.list",
        "<builtin>.vars"
    ],
    "argparse.HelpFormatter._format_action": [
        "argparse.HelpFormatter._format_action_invocation",
        "<builtin>.min",
        "argparse.HelpFormatter._iter_indented_subactions",
        "argparse.HelpFormatter._expand_help",
        "argparse.HelpFormatter._join_parts",
        "<builtin>.max",
        "<builtin>.len",
        "argparse.HelpFormatter._split_lines"
    ],
    "argparse.HelpFormatter._format_action_invocation": [
        "argparse.HelpFormatter._get_default_metavar_for_optional",
        "argparse.HelpFormatter._format_args"
    ],
    "argparse.HelpFormatter._format_actions_usage": [
        "<builtin>.range",
        "argparse.HelpFormatter._format_args",
        "<builtin>.len",
        "<builtin>.set",
        "argparse.HelpFormatter._get_default_metavar_for_optional",
        "<builtin>.enumerate",
        "argparse.>",
        "re.sub",
        "<builtin>.sorted"
    ],
    "argparse.HelpFormatter._format_args": [
        "argparse.format",
        "<builtin>.ValueError",
        "<builtin>.range",
        "argparse.HelpFormatter._metavar_formatter"
    ],
    "argparse.HelpFormatter._format_usage": [
        "<builtin>.len",
        "gettext.gettext",
        "<builtin>.dict",
        "argparse.HelpFormatter._format_actions_usage"
    ],
    "argparse.HelpFormatter._indent": [],
    "argparse.HelpFormatter._join_parts": [],
    "argparse.HelpFormatter._metavar_formatter": [
        "<builtin>.str"
    ],
    "argparse.HelpFormatter._split_lines": [
        "_frozen_importlib._find_and_load",
        "textwrap.wrap"
    ],
    "argparse.HelpFormatter.add_argument": [
        "argparse.HelpFormatter._format_action_invocation",
        "argparse.HelpFormatter._iter_indented_subactions",
        "<builtin>.max",
        "<builtin>.len",
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter.add_arguments": [
        "argparse.HelpFormatter.add_argument"
    ],
    "argparse.HelpFormatter.add_text": [
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter.add_usage": [
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter.end_section": [
        "argparse.HelpFormatter._dedent"
    ],
    "argparse.HelpFormatter.format_help": [
        "argparse._Section.format_help"
    ],
    "argparse.HelpFormatter.start_section": [
        "argparse.HelpFormatter._indent",
        "argparse._Section.__init__",
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.Namespace.__init__": [
        "<builtin>.setattr"
    ],
    "argparse._ActionsContainer.__init__": [
        "argparse._ArgumentGroup.register",
        "argparse._ActionsContainer.register",
        "re.compile",
        "argparse.ArgumentParser.register",
        "argparse._ArgumentGroup._get_handler",
        "argparse._ActionsContainer._get_handler",
        "argparse.ArgumentParser._get_handler",
        "<builtin>.super"
    ],
    "argparse._ActionsContainer._add_action": [
        "argparse._ActionsContainer._check_conflict"
    ],
    "argparse._ActionsContainer._add_container_actions": [
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "<builtin>.ValueError",
        "<map>.get",
        "gettext.gettext",
        "argparse._ActionsContainer.add_argument_group"
    ],
    "argparse._ActionsContainer._check_conflict": [
        "<list>.append",
        "argparse._ActionsContainer._get_handler"
    ],
    "argparse._ActionsContainer._get_handler": [
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._get_optional_kwargs": [
        "<builtin>.dict",
        "<builtin>.len",
        "<builtin>.ValueError",
        "<list>.append",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._get_positional_kwargs": [
        "<builtin>.dict",
        "<builtin>.TypeError",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._pop_action_class": [
        "argparse._ActionsContainer._registry_get"
    ],
    "argparse._ActionsContainer._registry_get": [],
    "argparse._ActionsContainer.add_argument": [
        "argparse.ArgumentParser._get_formatter",
        "<builtin>.hasattr",
        "argparse._HelpAction.__init__",
        "argparse._ActionsContainer._pop_action_class",
        "<builtin>.callable",
        "argparse.HelpFormatter._format_args",
        "<builtin>.len",
        "argparse._ActionsContainer._registry_get",
        "<builtin>.ValueError",
        "argparse._StoreAction.__init__",
        "argparse.ArgumentParser._add_action",
        "argparse._ActionsContainer._get_optional_kwargs",
        "argparse._StoreTrueAction.__init__"
    ],
    "argparse._ActionsContainer.add_argument_group": [
        "argparse._ArgumentGroup.__init__"
    ],
    "argparse._ActionsContainer.add_mutually_exclusive_group": [
        "argparse._MutuallyExclusiveGroup.__init__"
    ],
    "argparse._ActionsContainer.register": [],
    "argparse._ArgumentGroup.__init__": [
        "argparse._ActionsContainer.__init__",
        "<builtin>.super"
    ],
    "argparse._ArgumentGroup._add_action": [
        "<builtin>.super",
        "argparse._ActionsContainer._add_action"
    ],
    "argparse._HelpAction.__call__": [
        "argparse.ArgumentParser.exit",
        "argparse.ArgumentParser.print_help"
    ],
    "argparse._HelpAction.__init__": [
        "<builtin>.super",
        "argparse.Action.__init__"
    ],
    "argparse._MutuallyExclusiveGroup.__init__": [
        "<builtin>.super"
    ],
    "argparse._Section.format_help": [
        "argparse.HelpFormatter._indent",
        "argparse.HelpFormatter._dedent",
        "argparse.HelpFormatter._join_parts"
    ],
    "argparse._StoreAction.__init__": [
        "<builtin>.ValueError",
        "<builtin>.super",
        "argparse.Action.__init__"
    ],
    "argparse._StoreConstAction.__init__": [
        "<builtin>.super",
        "argparse.Action.__init__"
    ],
    "argparse._StoreTrueAction.__init__": [
        "argparse._StoreConstAction.__init__",
        "<builtin>.super"
    ],
    "argparse._get_action_name": [],
    "base64": [
        "_frozen_importlib._find_and_load"
    ],
    "bisect": [
        "_frozen_importlib._find_and_load"
    ],
    "bpytop": [
        "<str>.join",
        "bpytop.Color",
        "bpytop.UpdateChecker",
        "bpytop.NetCollector",
        "bpytop.Fx",
        "bpytop.Meter",
        "logging.Formatter.__init__",
        "os.makedirs",
        "bpytop.Box",
        "logging.Logger.debug",
        "logging.Handler.setLevel",
        "logging.handlers.RotatingFileHandler.__init__",
        "<builtin>.str",
        "logging.Logger.addHandler",
        "bpytop.Menu",
        "time.time",
        "bpytop.ProcBox",
        "genericpath.isdir",
        "bpytop.Graphs",
        "argparse.ArgumentParser.__init__",
        "bpytop.Meters",
        "logging.getLogger",
        "string.Template.__init__",
        "bpytop.get_cpu_name",
        "bpytop.Symbol",
        "bpytop.TimeIt",
        "bpytop.ProcCollector",
        "bpytop.Mv",
        "bpytop.Collector",
        "logging.Handler.setFormatter",
        "os.path.expanduser",
        "<builtin>.SystemExit",
        "posixpath.expanduser",
        "bpytop.CpuCollector",
        "<builtin>.getattr",
        "bpytop.SubBox",
        "bpytop.Timer",
        "typing.inner",
        "bpytop.Key",
        "bpytop.Colors",
        "bpytop.MemBox",
        "<builtin>.print",
        "bpytop.Term",
        "os.mkdir",
        "bpytop.MemCollector",
        "bpytop.Init",
        "bpytop.Config.__init__",
        "argparse._ActionsContainer.add_argument",
        "logging.Logger.setLevel",
        "bpytop.Nonblocking",
        "posixpath.dirname",
        "bpytop.Config",
        "bpytop.Theme",
        "typing._VariadicGenericAlias.__getitem__",
        "bpytop.Banner",
        "os.getpid",
        "bpytop.Raw",
        "psutil.cpu_count",
        "bpytop.Draw",
        "bpytop.NetBox",
        "bpytop.main",
        "logging.Logger.info",
        "bpytop.CpuBox",
        "argparse.ArgumentParser.parse_args",
        "bpytop.get_cpu_core_mapping",
        "os.path.dirname",
        "bpytop.Graph"
    ],
    "bpytop.Banner": [
        "typing.inner",
        "<builtin>.classmethod",
        "bpytop.Color.fg",
        "<builtin>.len",
        "bpytop.Mv.right",
        "<builtin>.enumerate"
    ],
    "bpytop.Banner.draw": [
        "bpytop.Mv.to",
        "<builtin>.enumerate",
        "bpytop.Draw.out"
    ],
    "bpytop.Box": [
        "typing.inner",
        "<builtin>.classmethod",
        "_collections_abc.Mapping.get",
        "pwd.getpwuid",
        "os.uname",
        "<builtin>.sorted",
        "os.getuid"
    ],
    "bpytop.Box.calc_sizes": [
        "bpytop.Box._calc_size"
    ],
    "bpytop.Box.draw_bg": [
        "bpytop.Box.draw_update_ms",
        "bpytop.Box.draw_clock",
        "bpytop.Box.empty_bg",
        "bpytop.Draw.buffer"
    ],
    "bpytop.Box.draw_clock": [
        "time.strftime",
        "<builtin>.hasattr",
        "bpytop.Draw.buffer",
        "time.tzset",
        "<builtin>.len",
        "psutil.sensors_battery",
        "bpytop.Color.__str__",
        "bpytop.Draw.out",
        "bpytop.Mv.to",
        "bpytop.Color.__call__"
    ],
    "bpytop.Box.draw_update_ms": [
        "<builtin>.hasattr",
        "<builtin>.range",
        "bpytop.Draw.buffer",
        "<builtin>.len",
        "psutil.sensors_battery",
        "bpytop.Draw.out",
        "bpytop.Mv.to",
        "bpytop.Color.__call__",
        "bpytop.Draw.clear"
    ],
    "bpytop.Box.empty_bg": [
        "bpytop.Banner.draw",
        "bpytop.Mv.right",
        "bpytop.Mv.down",
        "bpytop.Mv.left"
    ],
    "bpytop.Collector": [
        "threading.Event.set",
        "threading.Event.__init__",
        "<builtin>.classmethod"
    ],
    "bpytop.Collector._runner": [
        "bpytop.TimeIt.stop",
        "bpytop.Draw.out",
        "threading.Event.set",
        "bpytop.draw_clock",
        "<list>.append",
        "<list>.pop",
        "bpytop.NetCollector._draw",
        "bpytop.ProcCollector._collect",
        "threading.Event.is_set",
        "bpytop.ProcCollector._draw",
        "bpytop.Box.draw_clock",
        "bpytop.CpuCollector._collect",
        "bpytop.MemCollector._draw",
        "bpytop.NetCollector._collect",
        "threading.Event.clear",
        "bpytop.MemCollector._collect",
        "logging.Logger.exception",
        "bpytop.clean_quit",
        "bpytop.TimeIt.start",
        "threading.Event.wait",
        "bpytop.CpuCollector._draw"
    ],
    "bpytop.Collector.collect": [
        "<list>.remove",
        "<builtin>.list",
        "threading.Event.set",
        "threading.Event.wait"
    ],
    "bpytop.Collector.start": [
        "threading.Thread.__init__",
        "threading.Thread.start"
    ],
    "bpytop.Collector.stop": [
        "threading.Thread.is_alive",
        "threading.Event.set",
        "threading.Thread.join"
    ],
    "bpytop.Color": [
        "<builtin>.staticmethod",
        "typing._VariadicGenericAlias.__getitem__",
        "<builtin>.classmethod"
    ],
    "bpytop.Color.__call__": [
        "<builtin>.len",
        "<builtin>.getattr"
    ],
    "bpytop.Color.__init__": [
        "<builtin>.all",
        "<str>.startswith",
        "<builtin>.hex",
        "<builtin>.tuple",
        "<builtin>.str",
        "<builtin>.len",
        "bpytop.Color.truecolor_to_256",
        "<builtin>.ValueError",
        "<str>.split",
        "<builtin>.int",
        "<builtin>.map"
    ],
    "bpytop.Color.__repr__": [
        "<builtin>.repr"
    ],
    "bpytop.Color.bg": [
        "<builtin>.len",
        "bpytop.Color.escape_color"
    ],
    "bpytop.Color.escape_color": [
        "<builtin>.int",
        "bpytop.Color.truecolor_to_256",
        "logging.Logger.exception",
        "<builtin>.len"
    ],
    "bpytop.Color.fg": [
        "<builtin>.len",
        "bpytop.Color.escape_color"
    ],
    "bpytop.Color.truecolor_to_256": [
        "<builtin>.round"
    ],
    "bpytop.Colors": [
        "bpytop.Color.__init__"
    ],
    "bpytop.Config": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "psutil.sensors_temperatures",
        "typing.inner",
        "<builtin>.enumerate",
        "psutil.cpu_times_percent"
    ],
    "bpytop.Config.__init__": [
        "bpytop.Config.__setattr__",
        "<builtin>.getattr",
        "<builtin>.setattr",
        "bpytop.Config.load_config"
    ],
    "bpytop.Config.load_config": [
        "<builtin>.getattr",
        "codecs.BufferedIncrementalDecoder.__init__",
        "bpytop.strtobool",
        "genericpath.isfile",
        "codecs.BufferedIncrementalDecoder.decode",
        "<builtin>.open",
        "<builtin>.str",
        "<builtin>.bool",
        "<builtin>.type",
        "<builtin>.int",
        "logging.Logger.exception"
    ],
    "bpytop.Config.save_config": [
        "logging.Logger.exception",
        "<builtin>.str",
        "<builtin>.open"
    ],
    "bpytop.CpuBox": [
        "typing.inner",
        "<builtin>.classmethod"
    ],
    "bpytop.CpuBox._calc_size": [
        "<builtin>.round"
    ],
    "bpytop.CpuBox._draw_bg": [
        "bpytop.Mv.to",
        "bpytop.Color.__init__",
        "<builtin>.range",
        "bpytop.create_box"
    ],
    "bpytop.CpuBox._draw_fg": [
        "bpytop.min_max",
        "bpytop.CpuBox.battery_activity",
        "<builtin>.hasattr",
        "<builtin>.range",
        "bpytop.Meter.__init__",
        "<builtin>.str",
        "bpytop.Mv.to",
        "bpytop.Mv.left",
        "<builtin>.round",
        "bpytop.temperature",
        "bpytop.Graph.__init__",
        "bpytop.Mv.right",
        "bpytop.Draw.clear",
        "<builtin>.max",
        "math.floor",
        "bpytop.Draw.buffer",
        "math.ceil",
        "bpytop.Fx.trans",
        "<builtin>.len",
        "<builtin>.float"
    ],
    "bpytop.CpuBox.battery_activity": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "os.listdir",
        "math.ceil",
        "bpytop.readfile",
        "psutil.sensors_battery",
        "<builtin>.sorted",
        "genericpath.isdir"
    ],
    "bpytop.CpuCOllector._collect_temps": [
        "logging.Logger.exception",
        "subprocess.check_output",
        "bpytop.CpuBox._calc_size",
        "psutil.sensors_temperatures"
    ],
    "bpytop.CpuCollector": [
        "<builtin>.range",
        "typing.inner",
        "<builtin>.classmethod"
    ],
    "bpytop.CpuCollector._collect": [
        "logging.Logger.error",
        "<builtin>.hasattr",
        "<builtin>.str",
        "time.time",
        "<builtin>.setattr",
        "psutil.getloadavg",
        "psutil.cpu_freq",
        "<builtin>.round",
        "bpytop.CpuCollector._collect_temps",
        "psutil.cpu_times_percent",
        "<builtin>.getattr",
        "datetime.timedelta.__init__",
        "psutil.boot_time",
        "psutil.cpu_percent",
        "<builtin>.enumerate",
        "logging.Logger.exception",
        "math.ceil",
        "<builtin>.len"
    ],
    "bpytop.CpuCollector._collect_temps": [
        "<builtin>.round",
        "subprocess.check_output",
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "<builtin>.range",
        "<builtin>.max",
        "<builtin>.str",
        "<builtin>.sum",
        "<builtin>.len",
        "<builtin>.float",
        "<builtin>.enumerate",
        "<builtin>.int",
        "logging.Logger.exception",
        "bpytop.CpuBox._calc_size"
    ],
    "bpytop.CpuCollector._draw": [
        "bpytop.CpuBox._draw_fg"
    ],
    "bpytop.CpuCollector.get_sensors": [
        "subprocess.check_output",
        "<builtin>.hasattr",
        "psutil.sensors_temperatures",
        "shutil.which",
        "<builtin>.bool"
    ],
    "bpytop.Draw": [
        "typing.inner",
        "threading.Event.set",
        "threading.Event.__init__",
        "<builtin>.classmethod"
    ],
    "bpytop.Draw.buffer": [
        "<str>.startswith",
        "<str>.rstrip",
        "bpytop.Draw.out",
        "<str>.endswith",
        "<str>.lstrip"
    ],
    "bpytop.Draw.clear": [],
    "bpytop.Draw.now": [
        "threading.Event.wait",
        "<builtin>.print",
        "bpytop.Color.__str__",
        "threading.Event.clear",
        "threading.Event.set"
    ],
    "bpytop.Draw.out": [
        "bpytop.Draw.now",
        "<builtin>.sorted",
        "bpytop.Draw.clear"
    ],
    "bpytop.Draw.saved_buffer": [
        "<builtin>.sorted"
    ],
    "bpytop.Fx": [
        "<builtin>.staticmethod",
        "re.compile",
        "<builtin>.classmethod"
    ],
    "bpytop.Fx.trans": [
        "<str>.replace"
    ],
    "bpytop.Fx.uncolor": [
        "<str>.sub"
    ],
    "bpytop.Graph": [
        "typing.inner"
    ],
    "bpytop.Graph.__call__": [
        "bpytop.min_max",
        "<builtin>.isinstance",
        "<builtin>.range",
        "bpytop.Graph._create"
    ],
    "bpytop.Graph.__init__": [
        "bpytop.min_max",
        "<builtin>.range",
        "<list>.reverse",
        "<builtin>.min",
        "math.ceil",
        "<builtin>.len",
        "bpytop.Graph._create",
        "<builtin>.int",
        "<list>.insert",
        "<builtin>.isinstance"
    ],
    "bpytop.Graph.__repr__": [
        "<builtin>.repr"
    ],
    "bpytop.Graph._create": [
        "<builtin>.round",
        "<builtin>.range",
        "<builtin>.len",
        "bpytop.Color.__str__",
        "<builtin>.float",
        "<builtin>.bool",
        "bpytop.Mv.down",
        "bpytop.Mv.left"
    ],
    "bpytop.Graph.add": [
        "bpytop.Graph.__call__"
    ],
    "bpytop.Graphs": [
        "typing.inner"
    ],
    "bpytop.Init": [
        "<builtin>.staticmethod",
        "typing.inner",
        "<builtin>.classmethod"
    ],
    "bpytop.Init.done": [
        "bpytop.Init.draw_bg",
        "bpytop.Draw.now",
        "bpytop.Draw.clear"
    ],
    "bpytop.Init.draw_bg": [
        "<builtin>.range",
        "bpytop.Draw.buffer",
        "bpytop.Graph.__init__",
        "time.sleep",
        "bpytop.Draw.out",
        "bpytop.Mv.to",
        "random.Random.randint"
    ],
    "bpytop.Init.fail": [
        "logging.Logger.exception",
        "bpytop.Draw.buffer",
        "time.sleep",
        "bpytop.clean_quit"
    ],
    "bpytop.Init.start": [
        "<builtin>.round",
        "bpytop.Banner.draw",
        "<builtin>.range",
        "bpytop.Color.fg",
        "bpytop.Draw.buffer",
        "<builtin>.str",
        "bpytop.Fx.trans",
        "bpytop.Graph.__init__",
        "bpytop.Mv.left",
        "random.randint",
        "bpytop.Mv.down",
        "bpytop.Draw.out",
        "bpytop.Mv.to",
        "random.Random.randint"
    ],
    "bpytop.Init.success": [
        "bpytop.Init.draw_bg",
        "bpytop.Draw.buffer",
        "bpytop.Mv.right"
    ],
    "bpytop.Key": [
        "typing._VariadicGenericAlias.__getitem__",
        "typing.inner",
        "threading.Event.__init__",
        "<builtin>.classmethod",
        "threading.Event.set"
    ],
    "bpytop.Key._get_key": [
        "sys.stdin.read",
        "select.select",
        "threading.Event.clear",
        "codecs.BufferedIncrementalDecoder.decode",
        "bpytop.Raw.__enter__",
        "<builtin>.len",
        "bpytop.Nonblocking.__init__",
        "bpytop.Raw.__exit__",
        "bpytop.Raw.__init__",
        "<builtin>.int",
        "logging.Logger.exception",
        "bpytop.Event.wait",
        "threading.Event.set",
        "bpytop.clean_quit"
    ],
    "bpytop.Key.break_wait": [
        "threading.Event.clear",
        "<list>.append",
        "threading.Event.set",
        "time.sleep"
    ],
    "bpytop.Key.get": [],
    "bpytop.Key.get_mouse": [
        "threading.Event.clear",
        "threading.Event.is_set"
    ],
    "bpytop.Key.has_key": [
        "<builtin>.bool"
    ],
    "bpytop.Key.input_wait": [
        "threading.Event.clear",
        "bpytop.Draw.now",
        "threading.Event.is_set",
        "threading.Event.wait"
    ],
    "bpytop.Key.last": [],
    "bpytop.Key.mouse_moved": [
        "threading.Event.clear",
        "threading.Event.is_set"
    ],
    "bpytop.Key.start": [
        "threading.Thread.__init__",
        "threading.Thread.start"
    ],
    "bpytop.Key.stop": [
        "threading.Thread.is_alive",
        "threading.Thread.join"
    ],
    "bpytop.MemBox": [
        "typing.inner",
        "<builtin>.classmethod"
    ],
    "bpytop.MemBox._calc_size": [
        "<builtin>.round"
    ],
    "bpytop.MemBox._draw_bg": [
        "bpytop.Mv.to",
        "bpytop.Color.__init__",
        "<builtin>.range",
        "bpytop.create_box"
    ],
    "bpytop.MemBox._draw_fg": [
        "<map>.get",
        "logging.Logger.error",
        "bpytop.Mv.to",
        "<builtin>.range",
        "bpytop.MemBox._calc_size",
        "bpytop.Meter.__init__",
        "<builtin>.max",
        "bpytop.Draw.buffer",
        "<builtin>.str",
        "bpytop.Fx.trans",
        "<builtin>.len",
        "bpytop.Graph.__init__",
        "<builtin>.list",
        "<builtin>.enumerate",
        "<builtin>.int",
        "bpytop.Mv.up",
        "bpytop.MemBox._draw_bg",
        "bpytop.Mv.left"
    ],
    "bpytop.MemCollector": [
        "typing.inner",
        "<builtin>.classmethod"
    ],
    "bpytop.MemCollector._collect": [
        "logging.Logger.error",
        "<builtin>.hasattr",
        "psutil.disk_io_counters",
        "logging.Logger.debug",
        "bpytop.floating_humanizer",
        "time.time",
        "psutil.disk_partitions",
        "<builtin>.round",
        "subprocess.check_output",
        "psutil.virtual_memory",
        "<builtin>.open",
        "<map>.update",
        "<builtin>.list",
        "<builtin>.getattr",
        "<builtin>.tuple",
        "psutil.swap_memory",
        "logging.Logger.exception",
        "posixpath.realpath",
        "psutil.disk_usage",
        "<builtin>.len",
        "logging.Logger.warning"
    ],
    "bpytop.MemCollector._draw": [
        "bpytop.MemBox._draw_fg"
    ],
    "bpytop.Menu": [
        "<builtin>.range",
        "typing.inner",
        "<builtin>.classmethod",
        "bpytop.Color.fg",
        "bpytop.Fx.trans",
        "<builtin>.len",
        "bpytop.fg",
        "bpytop.Mv.down",
        "bpytop.Mv.left"
    ],
    "bpytop.Menu.help": [
        "bpytop.Draw.now",
        "bpytop.Banner.draw",
        "<builtin>.range",
        "bpytop.Key.get_mouse",
        "bpytop.Draw.saved_buffer",
        "bpytop.Mv.to",
        "bpytop.Mv.left",
        "bpytop.Timer.not_zero",
        "bpytop.Mv.right",
        "bpytop.Timer.left",
        "bpytop.Timer.stamp",
        "bpytop.Fx.uncolor",
        "bpytop.Collector.collect",
        "bpytop.Mv.down",
        "<builtin>.enumerate",
        "bpytop.create_box",
        "bpytop.clean_quit",
        "bpytop.Key.input_wait",
        "threading.Event.wait",
        "<builtin>.len",
        "bpytop.Key.get",
        "logging.Logger.warning"
    ],
    "bpytop.Menu.main": [
        "bpytop.Menu.options",
        "bpytop.Draw.now",
        "bpytop.Banner.draw",
        "bpytop.Key.get_mouse",
        "bpytop.Draw.saved_buffer",
        "bpytop.Mv.to",
        "bpytop.Key.mouse_moved",
        "bpytop.Mv.left",
        "bpytop.Menu.help",
        "bpytop.Timer.not_zero",
        "<builtin>.list",
        "bpytop.Mv.right",
        "bpytop.Timer.left",
        "bpytop.Timer.stamp",
        "bpytop.Fx.uncolor",
        "bpytop.Collector.collect",
        "bpytop.Mv.down",
        "bpytop.clean_quit",
        "bpytop.Key.input_wait",
        "threading.Event.wait",
        "<builtin>.len",
        "bpytop.Key.get",
        "logging.Logger.warning"
    ],
    "bpytop.Menu.options": [
        "bpytop.Draw.now",
        "bpytop.Banner.draw",
        "<str>.split",
        "<builtin>.range",
        "bpytop.Key.get_mouse",
        "<builtin>.str",
        "bpytop.Draw.saved_buffer",
        "bpytop.Theme.refresh",
        "<builtin>.setattr",
        "<builtin>.type",
        "bpytop.Mv.to",
        "bpytop.Mv.left",
        "<builtin>.round",
        "bpytop.Timer.finish",
        "bpytop.Timer.not_zero",
        "bpytop.ProcCollector.sorting",
        "<builtin>.list",
        "bpytop.Mv.right",
        "bpytop.Timer.left",
        "bpytop.Timer.stamp",
        "bpytop.Fx.uncolor",
        "bpytop.Draw.clear",
        "<builtin>.getattr",
        "<builtin>.max",
        "bpytop.Collector.collect",
        "bpytop.Mv.down",
        "<builtin>.enumerate",
        "<builtin>.map",
        "logging.Logger.setLevel",
        "bpytop.create_box",
        "bpytop.clean_quit",
        "bpytop.Key.input_wait",
        "bpytop.CpuCollector.get_sensors",
        "<builtin>.min",
        "threading.Event.wait",
        "bpytop.Box.draw_update_ms",
        "<str>.isdigit",
        "<builtin>.len",
        "logging.Logger.info",
        "bpytop.Key.get",
        "<builtin>.int",
        "logging.Logger.warning",
        "bpytop.Term.refresh",
        "<builtin>.isinstance"
    ],
    "bpytop.Meter": [
        "typing.inner"
    ],
    "bpytop.Meter.__call__": [
        "bpytop.Meter._create",
        "<builtin>.isinstance"
    ],
    "bpytop.Meter.__init__": [
        "bpytop.Meter._create"
    ],
    "bpytop.Meter.__repr__": [
        "<builtin>.repr"
    ],
    "bpytop.Meter._create": [
        "<builtin>.round",
        "<builtin>.range",
        "bpytop.Color.__init__",
        "bpytop.Color.__call__",
        "bpytop.Meter.color_inactive"
    ],
    "bpytop.Meters": [
        "typing.inner"
    ],
    "bpytop.Mv": [
        "<builtin>.staticmethod"
    ],
    "bpytop.Mv.down": [],
    "bpytop.Mv.left": [],
    "bpytop.Mv.right": [],
    "bpytop.Mv.to": [],
    "bpytop.Mv.up": [],
    "bpytop.NetBox": [
        "typing.inner",
        "<builtin>.classmethod"
    ],
    "bpytop.NetBox._calc_size": [
        "<builtin>.round"
    ],
    "bpytop.NetBox._draw_bg": [
        "bpytop.create_box"
    ],
    "bpytop.NetBox._draw_fg": [
        "<builtin>.range",
        "bpytop.Draw.buffer",
        "<map>.get",
        "<builtin>.len",
        "bpytop.Graph.__init__",
        "<builtin>.bool",
        "bpytop.Mv.to",
        "bpytop.NetBox._draw_bg"
    ],
    "bpytop.NetCollector": [
        "typing.inner",
        "<builtin>.classmethod"
    ],
    "bpytop.NetCollector._collect": [
        "<builtin>.round",
        "<builtin>.getattr",
        "psutil.net_if_stats",
        "<builtin>.max",
        "<list>.index",
        "bpytop.units_to_bytes",
        "bpytop.floating_humanizer",
        "bpytop.NetCollector._get_nics",
        "psutil.net_io_counters",
        "<builtin>.len",
        "time.time",
        "psutil.net_if_addrs",
        "<builtin>.sorted"
    ],
    "bpytop.NetCollector._draw": [
        "bpytop.NetBox._draw_fg"
    ],
    "bpytop.NetCollector._get_nics": [
        "psutil.net_if_stats",
        "psutil.net_io_counters",
        "bpytop.<lambda>",
        "logging.Logger.exception",
        "<builtin>.sorted",
        "<list>.insert",
        "<list>.append",
        "<list>.index"
    ],
    "bpytop.NetCollector.switch": [
        "<builtin>.len",
        "bpytop.Collector.collect"
    ],
    "bpytop.Nonblocking.__init__": [],
    "bpytop.ProcBox": [
        "typing._VariadicGenericAlias.__getitem__",
        "typing.inner",
        "<builtin>.classmethod"
    ],
    "bpytop.ProcBox._calc_size": [
        "<builtin>.round"
    ],
    "bpytop.ProcBox._draw_bg": [
        "bpytop.create_box"
    ],
    "bpytop.ProcBox._draw_fg": [
        "<builtin>.round",
        "<builtin>.range",
        "psutil.pid_exists",
        "bpytop.floating_humanizer",
        "bpytop.Draw.buffer",
        "<builtin>.str",
        "math.ceil",
        "<builtin>.int",
        "<builtin>.len",
        "<builtin>.list",
        "bpytop.Graphs.detailed_cpu",
        "bpytop.Mv.right",
        "<builtin>.enumerate",
        "bpytop.Graph.__init__",
        "bpytop.Mv.to",
        "bpytop.Graphs.detailed_mem",
        "bpytop.Mv.left",
        "<map>.get",
        "<str>.split",
        "<str>.replace"
    ],
    "bpytop.ProcBox.selector": [
        "<builtin>.round",
        "<list>.insert",
        "bpytop.Collector.collect",
        "<list>.insert"
    ],
    "bpytop.ProcCollector": [
        "<builtin>.compile",
        "typing.inner",
        "<builtin>.classmethod"
    ],
    "bpytop.ProcCollector._collect": [
        "<builtin>.round",
        "<builtin>.hasattr",
        "psutil.Process.__init__",
        "psutil.Process.parent",
        "bpytop.floating_humanizer",
        "datetime.timedelta.__init__",
        "<builtin>.str",
        "<builtin>.len",
        "bpytop.ProcCollector._tree",
        "psutil.Process.as_dict",
        "time.time",
        "<builtin>.sorted",
        "psutil.process_iter",
        "<builtin>.isinstance",
        "<map>.get",
        "<str>.lower",
        "<str>.split"
    ],
    "bpytop.ProcCollector._draw": [
        "bpytop.ProcBox._draw_fg"
    ],
    "bpytop.ProcCollector._tree": [
        "<builtin>.min",
        "psutil.pid_exists",
        "bpytop.ProcCollector._tree.create_tree",
        "<builtin>.len",
        "<builtin>.list",
        "<builtin>.sorted",
        "_collections.defaultdict"
    ],
    "bpytop.ProcCollector._tree.create_tree": [
        "<builtin>.round",
        "<builtin>.hasattr",
        "psutil.Process.__init__",
        "bpytop.ProcCollector._tree.create_tree",
        "psutil.Process.name",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "bpytop.ProcCollector.sorting": [
        "<builtin>.len",
        "bpytop.Collector.collect"
    ],
    "bpytop.Raw.__enter__": [
        "termios.tcgetattr",
        "tty.setcbreak"
    ],
    "bpytop.Raw.__init__": [],
    "bpytop.Symbol": [
        "bpytop.Color.fg",
        "typing.inner"
    ],
    "bpytop.Term": [
        "<builtin>.staticmethod",
        "threading.Event.__init__",
        "<builtin>.classmethod"
    ],
    "bpytop.Term.echo": [],
    "bpytop.Term.refresh": [
        "bpytop.Box.draw_bg",
        "bpytop.Draw.now",
        "<builtin>.getattr",
        "bpytop.Timer.finish",
        "<builtin>.min",
        "bpytop.Key.last",
        "bpytop.Key.has_key",
        "threading.Event.wait",
        "<builtin>.str",
        "bpytop.Mv.left",
        "bpytop.Mv.right",
        "bpytop.Mv.down",
        "os.get_terminal_size",
        "threading.Event.clear",
        "bpytop.Box.calc_sizes",
        "threading.Event.set",
        "bpytop.create_box",
        "bpytop.clean_quit"
    ],
    "bpytop.Term.title": [
        "_collections_abc.Mapping.get"
    ],
    "bpytop.Theme": [
        "<builtin>.staticmethod",
        "typing.inner",
        "<builtin>.classmethod"
    ],
    "bpytop.Theme.__call__": [
        "bpytop.Theme._load_theme"
    ],
    "bpytop.Theme.__init__": [
        "bpytop.Theme.refresh",
        "bpytop.Theme._load_theme"
    ],
    "bpytop.Theme._load_file": [
        "logging.Logger.exception",
        "<builtin>.str",
        "<builtin>.open"
    ],
    "bpytop.Theme._load_theme": [
        "bpytop.Draw.now",
        "<builtin>.getattr",
        "<builtin>.range",
        "bpytop.Theme._load_file",
        "bpytop.Color.fg",
        "bpytop.Color.__init__",
        "bpytop.Color.__iter__",
        "bpytop.Color.__str__",
        "<builtin>.list",
        "<builtin>.setattr"
    ],
    "bpytop.Theme.refresh": [
        "logging.Logger.exception",
        "posix.listDir",
        "<builtin>.str"
    ],
    "bpytop.TimeIt": [
        "typing.inner",
        "<builtin>.classmethod"
    ],
    "bpytop.TimeIt.pause": [
        "time.time"
    ],
    "bpytop.TimeIt.start": [
        "time.time"
    ],
    "bpytop.TimeIt.stop": [
        "logging.Logger.debug",
        "time.time"
    ],
    "bpytop.Timer": [
        "<builtin>.classmethod"
    ],
    "bpytop.Timer.finish": [
        "bpytop.Key.break_wait",
        "time.time"
    ],
    "bpytop.Timer.left": [
        "time.time",
        "bpytop.Timer.stamp"
    ],
    "bpytop.Timer.not_zero": [
        "time.time"
    ],
    "bpytop.Timer.stamp": [
        "time.time"
    ],
    "bpytop.UpdateChecker": [
        "<builtin>.classmethod"
    ],
    "bpytop.UpdateChecker._checker": [
        "request.urlop en",
        "shutil.which",
        "logging.Logger.exception",
        "subprocess.run"
    ],
    "bpytop.UpdateChecker.run": [
        "threading.Thread.__init__",
        "threading.Thread.start"
    ],
    "bpytop.clean_quit": [
        "<builtin>.round",
        "bpytop.Draw.now",
        "_thread.interrupt_main",
        "bpytop.Config.save_config",
        "bpytop.Collector.stop",
        "datetime.timedelta.__init__",
        "<builtin>.print",
        "bpytop.Term.echo",
        "logging.Logger.info",
        "time.time",
        "bpytop.Key.stop",
        "bpytop.Term.title",
        "<builtin>.SystemExit"
    ],
    "bpytop.create_box": [
        "<builtin>.range",
        "bpytop.Color.__str__",
        "bpytop.Mv.right",
        "bpytop.Mv.to",
        "bpytop.Color.__call__"
    ],
    "bpytop.floating_humanizer": [
        "<builtin>.round",
        "<builtin>.len",
        "<builtin>.float",
        "<builtin>.int",
        "<builtin>.isinstance"
    ],
    "bpytop.get_cpu_core_mapping": [
        "<builtin>.range",
        "_bootlocale.getpreferredencoding",
        "codecs.BufferedIncrementalDecoder.__init__",
        "genericpath.isfile",
        "codecs.BufferedIncrementalDecoder.decode",
        "<list>.extend",
        "<builtin>.open",
        "<builtin>.int"
    ],
    "bpytop.get_cpu_name": [
        "subprocess.check_output",
        "<str>.split",
        "<str>.index",
        "<str>.replace",
        "<str>.endswith",
        "re.sub",
        "<str>.lstrip"
    ],
    "bpytop.main": [
        "bpytop.Theme.__init__",
        "bpytop.Draw.now",
        "signal.signal",
        "bpytop.TimeIt.stop",
        "bpytop.UpdateChecker.run",
        "bpytop.Draw.out",
        "bpytop.Init.start",
        "codecs.BufferedIncrementalDecoder.__init__",
        "bpytop.main.run",
        "bpytop.Init.done",
        "bpytop.Collector.collect",
        "bpytop.Init.success",
        "bpytop.Key.start",
        "bpytop.Term.title",
        "os.get_terminal_size",
        "logging.Logger.exception",
        "bpytop.Collector.start",
        "bpytop.clean_quit",
        "bpytop.Box.draw_bg",
        "bpytop.CpuCollector.get_sensors",
        "bpytop.TimeIt.start",
        "threading.Event.wait",
        "bpytop.Draw.buffer",
        "bpytop.Fx.trans",
        "bpytop.Term.echo",
        "sys.stdin.reconfigure",
        "bpytop.Init.fail",
        "bpytop.Box.calc_sizes",
        "bpytop.Term.refresh",
        "<builtin>.isinstance"
    ],
    "bpytop.main.run": [
        "bpytop.Key.input_wait",
        "bpytop.Timer.not_zero",
        "bpytop.Collector.collect",
        "bpytop.process_keys",
        "bpytop.Timer.left",
        "bpytop.Timer.stamp",
        "bpytop.Term.refresh"
    ],
    "bpytop.min_max": [
        "<builtin>.max",
        "<builtin>.min"
    ],
    "bpytop.now_awake": [
        "bpytop.Box.draw_bg",
        "bpytop.Draw.now",
        "bpytop.Box.calc_sizes",
        "bpytop.Term.refresh",
        "bpytop.Term.echo",
        "bpytop.Term.title",
        "bpytop.Key.start",
        "bpytop.Collector.start"
    ],
    "bpytop.now_sleeping": [
        "bpytop.Draw.now",
        "bpytop.Collector.stop",
        "bpytop.Term.echo",
        "bpytop.Key.stop",
        "bpytop.Term.title"
    ],
    "bpytop.process_keys": [
        "bpytop.Menu.options",
        "logging.Logger.error",
        "bpytop.Key.get_mouse",
        "bpytop.ProcBox.selector",
        "bpytop.Menu.help",
        "bpytop.ProcCollector.sorting",
        "<builtin>.list",
        "bpytop.Draw.clear",
        "psutil.pid_exists",
        "bpytop.Key.has_key",
        "bpytop.Collector.collect",
        "os.kill",
        "logging.Logger.exception",
        "bpytop.NetCollector.switch",
        "bpytop.clean_quit",
        "threading.Event.wait",
        "bpytop.Box.draw_update_ms",
        "bpytop.Menu.main",
        "<builtin>.len",
        "bpytop.Key.get",
        "bpytop.Term.refresh"
    ],
    "bpytop.quit_sigint": [
        "bpytop.clean_quit"
    ],
    "bpytop.readfile": [
        "genericpath.isfile",
        "<builtin>.open"
    ],
    "bpytop.strtobool": [
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "bpytop.temperature": [
        "<builtin>.round"
    ],
    "bpytop.units_to_bytes": [
        "<builtin>.int",
        "<builtin>.round",
        "<builtin>.float"
    ],
    "calendar": [
        "calendar.Calendar.__init__",
        "<builtin>.range",
        "calendar.IllegalWeekdayError",
        "calendar.IllegalMonthError",
        "calendar._localized_month",
        "calendar.TextCalendar",
        "calendar.different_locale",
        "calendar.LocaleTextCalendar",
        "calendar._localized_day",
        "calendar.Calendar",
        "calendar.HTMLCalendar",
        "calendar.LocaleHTMLCalendar",
        "calendar._localized_day.__init__",
        "calendar._localized_month.__init__"
    ],
    "calendar.Calendar.__init__": [
        "calendar.Calendar.setfirstweekday"
    ],
    "calendar._localized_day": [
        "<builtin>.range"
    ],
    "calendar._localized_month": [
        "<builtin>.range"
    ],
    "codecs.BufferedIncrementalDecoder.__init__": [
        "codecs.IncrementalDecoder.__init__"
    ],
    "collections._replace": [
        "collections._make"
    ],
    "collections.namedtuple": [
        "<builtin>.exec",
        "<builtin>.TypeError",
        "<builtin>.str",
        "<str>.split",
        "<builtin>.type",
        "<str>.replace",
        "<builtin>.zip",
        "<builtin>.repr",
        "<str>.join",
        "<builtin>.classmethod",
        "<builtin>.list",
        "<builtin>.reversed",
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.enumerate",
        "<list>.replace",
        "<builtin>.map",
        "<builtin>.dict",
        "<list>.split",
        "<builtin>.len",
        "<builtin>.set",
        "<builtin>.isinstance"
    ],
    "contextlib.ExitStack.__exit__": [
        "contextlib._exit_wrapper"
    ],
    "contextlib._BaseExitStack.callback": [
        "<builtin>.len",
        "<builtin>.TypeError",
        "contextlib._create_cb_wrapper",
        "contextlib._BaseExitStack._push_exit_callback"
    ],
    "contextlib._GeneratorContextManager.__enter__": [
        "__init__.oneshot",
        "<builtin>.next",
        "<builtin>.RuntimeError"
    ],
    "contextlib._GeneratorContextManager.__exit__": [
        "__init__.oneshot",
        "<builtin>.next",
        "<builtin>.RuntimeError"
    ],
    "contextlib.contextmanager": [
        "functools.wraps",
        "functools.update_wrapper"
    ],
    "contextlib.helper": [
        "contextlib._GeneratorContextManagerBase.__init__"
    ],
    "copy": [
        "_frozen_importlib._find_and_load",
        "<builtin>.getattr",
        "copy.Error",
        "<builtin>.type"
    ],
    "datetime": [
        "datetime._create",
        "datetime.time",
        "datetime._days_before_year",
        "_frozen_importlib._find_and_load",
        "datetime.timedelta.__neg__",
        "datetime.__new__",
        "datetime.tzinfo",
        "<list>.append",
        "datetime.timedelta",
        "datetime.datetime",
        "datetime.date",
        "datetime.timezone"
    ],
    "datetime.__new__": [
        "datetime._check_time_fields",
        "datetime._check_date_fields",
        "datetime._check_tzinfo_arg"
    ],
    "datetime._check_date_fields": [
        "datetime._days_in_month",
        "<builtin>.ValueError",
        "datetime._check_int_field"
    ],
    "datetime._check_time_fields": [
        "datetime._check_int_field",
        "<builtin>.ValueError"
    ],
    "datetime.timedelta.__neg__": [
        "datetime.__new__"
    ],
    "datetime.timezone": [
        "<builtin>.classmethod",
        "datetime.timedelta.__neg__",
        "datetime.__new__",
        "<builtin>.object",
        "<builtin>.staticmethod"
    ],
    "distutils.DistutilsMetaFinder.find_spec": [
        "__init__.<lambda>"
    ],
    "email._encoded_words": [
        "email._encoded_words._QByteMap",
        "re.compile",
        "<builtin>.ord",
        "_frozen_importlib._handle_fromlist"
    ],
    "email._parseaddr": [
        "_frozen_importlib._find_and_load",
        "email._parseaddr.AddrlistClass",
        "email._parseaddr.AddressList"
    ],
    "email._policybase": [
        "email._policybase._PolicyBase.__init__",
        "email._policybase._PolicyBase",
        "email._policybase._extend_docstrings",
        "_frozen_importlib._find_and_load",
        "email._policybase.Policy",
        "_frozen_importlib._handle_fromlist",
        "email._policybase.Compat32",
        "abc.__new__"
    ],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "email._policybase._extend_docstrings": [
        "<builtin>.getattr",
        "email._policybase._append_doc",
        "_policybase.<genexpr>"
    ],
    "email.charset": [
        "_frozen_importlib._find_and_load",
        "_frozen_importlib._handle_fromlist",
        "email.charset.Charset"
    ],
    "email.encoders": [
        "_frozen_importlib._find_and_load"
    ],
    "email.errors": [
        "email.errors.InvalidBase64CharactersDefect",
        "email.errors.HeaderParseError",
        "email.errors.MultipartInvariantViolationDefect",
        "email.errors.StartBoundaryNotFoundDefect",
        "email.errors.MultipartConversionError",
        "email.errors.CloseBoundaryNotFoundDefect",
        "email.errors.CharsetError",
        "email.errors.MessageParseError",
        "email.errors.InvalidHeaderDefect",
        "email.errors.ObsoleteHeaderDefect",
        "email.errors.MessageDefect",
        "email.errors.NonPrintableDefect",
        "email.errors.NoBoundaryInMultipartDefect",
        "email.errors.HeaderMissingRequiredValue",
        "email.errors.MessageError",
        "email.errors.InvalidBase64LengthDefect",
        "email.errors.InvalidMultipartContentTransferEncodingDefect",
        "email.errors.UndecodableBytesDefect",
        "email.errors.HeaderDefect",
        "email.errors.MisplacedEnvelopeHeaderDefect",
        "email.errors.MissingHeaderBodySeparatorDefect",
        "email.errors.FirstHeaderLineIsContinuationDefect",
        "email.errors.InvalidBase64PaddingDefect",
        "email.errors.BoundaryError",
        "email.errors.NonASCIILocalPartDefect"
    ],
    "email.feedparser": [
        "_frozen_importlib._find_and_load",
        "re.compile",
        "_frozen_importlib._handle_fromlist",
        "<builtin>.object",
        "email.feedparser.BytesFeedParser",
        "email.feedparser.FeedParser",
        "email.feedparser.BufferedSubFile"
    ],
    "email.header": [
        "email.header._Accumulator",
        "enum.IntFlag.__or__",
        "email.header._ValueFormatter",
        "_frozen_importlib._find_and_load",
        "email.header.Header",
        "re.compile",
        "_frozen_importlib._handle_fromlist",
        "email.charset.Charset.__init__"
    ],
    "email.message": [
        "_frozen_importlib._find_and_load",
        "re.compile",
        "email.message.MIMEPart",
        "email.message.Message",
        "_frozen_importlib._handle_fromlist",
        "email.message.EmailMessage"
    ],
    "email.parser": [
        "email.parser.BytesHeaderParser",
        "email.parser.BytesParser",
        "_frozen_importlib._find_and_load",
        "email.parser.Parser",
        "email.parser.HeaderParser"
    ],
    "email.quoprimime": [
        "<str>.encode",
        "<builtin>.range",
        "<builtin>.chr",
        "<builtin>.ord"
    ],
    "email.utils": [
        "_frozen_importlib._find_and_load",
        "re.compile"
    ],
    "encodings.idna": [
        "encodings.idna.IncrementalEncoder",
        "_frozen_importlib._find_and_load",
        "re.compile",
        "encodings.idna.Codec",
        "encodings.idna.StreamReader",
        "encodings.idna.IncrementalDecoder",
        "encodings.idna.StreamWriter"
    ],
    "encodings.search_function": [
        "_frozen_importlib._find_and_load",
        "<builtin>.callable",
        "<builtin>.__import__",
        "<builtin>.len",
        "encoding.idna.getregentry",
        "<builtin>.isinstance",
        "encoding.normalize_encoding"
    ],
    "enum.EnumMeta.__call__": [
        "enum.EnumMeta._create_",
        "enum.__new__"
    ],
    "enum.EnumMeta.__getattr__": [
        "enum._is_dunder",
        "<builtin>.AttributeError"
    ],
    "enum.EnumMeta._convert_": [
        "enum.EnumMeta.__call__",
        "<builtin>.vars",
        "enum.<lambda>",
        "enum.EnumMeta.__setattr__",
        "enum.__members__"
    ],
    "enum.EnumMeta._create_": [
        "enum._get_mixins_",
        "enum.__prepare__",
        "<builtin>.enumerate",
        "enum.EnumMeta.__setattr__",
        "<builtin>.isinstance",
        "enum._EnumDict.__setitem__",
        "enum.__new__"
    ],
    "enum.IntFlag.__and__": [
        "enum.EnumMeta.__call__",
        "<builtin>.isinstance"
    ],
    "enum.IntFlag.__or__": [
        "enum.EnumMeta.__call__",
        "<builtin>.isinstance"
    ],
    "enum._EnumDict.__setitem__": [
        "<builtin>.TypeError",
        "enum._is_descriptor",
        "enum._is_sunder",
        "<builtin>.len",
        "enum._is_dunder",
        "<builtin>.ValueError",
        "<builtin>.list",
        "<builtin>.super",
        "<builtin>.setattr",
        "<builtin>.set",
        "<builtin>.isinstance"
    ],
    "enum.__new__": [
        "enum._missing_",
        "enum.<genexpr>",
        "enum._find_new_",
        "enum._get_mixins_",
        "enum._make_class_unpicklable",
        "enum.<dictcomp>",
        "ssl.__new__",
        "__init__.__new__",
        "enum.<setcomp>",
        "enum.EnumMeta.__setattr__",
        "enum._EnumDict.__setitem__"
    ],
    "enum.__prepare__": [
        "enum._EnumDict.__init__",
        "enum._EnumDict.__setitem__",
        "enum._get_mixins_"
    ],
    "enum._convert": [
        "enum.EnumMeta.__call__",
        "enum.<lambda>",
        "enum.__members__",
        "enum.EnumMeta.__setattr__"
    ],
    "enum._create_pseudo_member_": [
        "enum._decompose"
    ],
    "enum._decompose": [
        "<builtin>.len",
        "types.DynamicClassAttribute.__get__",
        "<builtin>.list",
        "enum.<lambda>"
    ],
    "enum._find_new_": [
        "enum.EnumMeta.__getattr__"
    ],
    "enum._get_mixins_": [
        "enum._find_data_type"
    ],
    "enum._make_class_unpicklable": [
        "enum.EnumMeta.__setattr__"
    ],
    "enum._missing_": [
        "enum._create_pseudo_member_"
    ],
    "enum._power_of_two": [
        "enum._high_bit"
    ],
    "fnmatch": [
        "functools.lru_cache.decorating_function",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache"
    ],
    "fnmatch._compile_pattern": [
        "<builtin>.bytes",
        "re.compile",
        "<builtin>.str",
        "fnmatch.translate",
        "<builtin>.isinstance"
    ],
    "fnmatch.filter": [
        "<list>.append",
        "posixpath.normcase",
        "fnmatch._compile_pattern",
        "glob.<genexpr>"
    ],
    "fnmatch.fnmatch": [
        "posixpath.normcase",
        "fnmatch.fnmatchcase"
    ],
    "fnmatch.fnmatchcase": [
        "fnmatch._compile_pattern"
    ],
    "fnmatch.translate": [
        "<builtin>.len",
        "re.sub",
        "re.escape",
        "<list>.append"
    ],
    "functools": [
        "reprlib",
        "<builtin>.object"
    ],
    "functools._HashedSeq.__init__": [
        "<builtin>.hash"
    ],
    "functools._lru_cache_wrapper": [
        "_thread.RLock",
        "<builtin>.object"
    ],
    "functools._lru_cache_wrapper.wrapper": [
        "functools._make_key"
    ],
    "functools._make_key": [
        "<builtin>.len",
        "<builtin>.tuple",
        "functools._HashedSeq.__init__",
        "<builtin>.type"
    ],
    "functools.decorating_function": [
        "functools.update_wrapper"
    ],
    "functools.lru_cache": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "functools.update_wrapper",
        "<builtin>.isinstance",
        "functools._lru_cache_wrapper"
    ],
    "functools.lru_cache.decorating_function": [
        "functools.update_wrapper",
        "functools._lru_cache_wrapper"
    ],
    "functools.partial": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "functools.partialmethod": [
        "<builtin>.property"
    ],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.update_wrapper": [
        "<builtin>.getattr",
        "<builtin>.setattr"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "genericpath._splitext": [
        "<builtin>.max",
        "<str>.rfind"
    ],
    "genericpath.exists": [],
    "genericpath.isdir": [
        "stat.S_ISDIR"
    ],
    "genericpath.isfile": [
        "stat.S_ISREG"
    ],
    "gettext._expand_lang": [
        "<builtin>.range",
        "<list>.append",
        "<list>.reverse",
        "locale.normalize"
    ],
    "gettext.dgettext": [
        "<map>.gettext",
        "<map>.get",
        "gettext.translation"
    ],
    "gettext.find": [
        "_collections_abc.Mapping.get",
        "gettext._expand_lang",
        "<list>.append",
        "posixpath.join",
        "genericpath.exists"
    ],
    "gettext.gettext": [
        "gettext.dgettext"
    ],
    "gettext.translation": [
        "<builtin>.FileNotFoundError",
        "<builtin>.open",
        "gettext.find",
        "<map>.get",
        "gettext.GNUTranslations.__init__",
        "gettext.NullTranslations.__init__",
        "os.path.abspath"
    ],
    "glob": [
        "re.compile"
    ],
    "glob._glob0": [
        "posixpath.lexists",
        "posixpath.join"
    ],
    "glob._glob1": [
        "glob._iterdir",
        "<builtin>.list",
        "fnmatch.filter",
        "glob._ishidden"
    ],
    "glob._iglob": [
        "glob._iglob",
        "posixpath.split",
        "glob._glob0",
        "posixpath.join",
        "glob._glob1",
        "glob.has_magic"
    ],
    "glob.glob": [
        "glob._iglob",
        "glob.iglob",
        "<builtin>.list"
    ],
    "handlers.RotatingFileHandler.__init__": [
        "logging.handlers.BaseRotatingHandler.__init__"
    ],
    "hashlib": [
        "<builtin>.globals",
        "hashlib.__get_openssl_constructor",
        "<builtin>.range",
        "<builtin>.bytes",
        "_frozen_importlib._find_and_load",
        "<builtin>.set"
    ],
    "hashlib.__get_builtin_constructor": [
        "_frozen_importlib._find_and_load",
        "<builtin>.ValueError",
        "<map>.get"
    ],
    "hashlib.__get_openssl_constructor": [
        "<builtin>.getattr",
        "hashlib.__get_builtin_constructor"
    ],
    "http.HTTPStatus": [
        "enum._EnumDict.__setitem__"
    ],
    "http.client": [
        "http.client.RemoteDisconnected",
        "http.client.CannotSendHeader",
        "re.compile",
        "http.client.BadStatusLine",
        "http.client.HTTPException",
        "<builtin>.globals",
        "http.client.HTTPMessage",
        "http.client.HTTPSConnection",
        "http.client.HTTPConnection",
        "_frozen_importlib._find_and_load",
        "http.client.UnknownProtocol",
        "http.client.NotConnected",
        "http.client.ImproperConnectionState",
        "abc.__new__",
        "http.client.CannotSendRequest",
        "http.client.UnknownTransferEncoding",
        "http.client.InvalidURL",
        "http.client.IncompleteRead",
        "http.client.HTTPResponse",
        "http.client.UnimplementedFileMode",
        "enum.__members__",
        "http.client.<dictcomp>",
        "http.client.ResponseNotReady",
        "http.client.LineTooLong"
    ],
    "http.client.HTTPConnection.__init__": [
        "http.client.HTTPConnection._get_hostport",
        "http.client.HTTPConnection._validate_host"
    ],
    "http.client.HTTPConnection._send_output": [
        "<builtin>.hasattr",
        "<builtin>.iter",
        "<builtin>.TypeError",
        "http.client.HTTPConnection.send",
        "<builtin>.print",
        "<builtin>.len",
        "<builtin>.type",
        "<builtin>.memoryview"
    ],
    "http.client.HTTPConnection._send_request": [
        "http.client.HTTPConnection.putrequest",
        "http.client.HTTPConnection.endheaders",
        "<builtin>.str",
        "<builtin>.print",
        "http.client._get_content_length",
        "<builtin>.frozenset",
        "http.client.HTTPConnection.putheader",
        "http.client.<genexpr>",
        "<builtin>.isinstance"
    ],
    "http.client.HTTPConnection._tunnel": [
        "http.client.HTTPResponse._read_status",
        "http.client.HTTPConnection.send",
        "<builtin>.print",
        "<builtin>.OSError",
        "<builtin>.len",
        "http.client.HTTPResponse.__init__"
    ],
    "http.client.HTTPConnection.close": [
        "socket.socket.close"
    ],
    "http.client.HTTPConnection.connect": [
        "socket.create_connection",
        "http.client.HTTPResponse.close",
        "http.client.HTTPConnection._tunnel"
    ],
    "http.client.HTTPConnection.endheaders": [
        "http.client.HTTPConnection._send_output"
    ],
    "http.client.HTTPConnection.putheader": [
        "<builtin>.hasattr",
        "<builtin>.str",
        "client.HTTPConnection._output",
        "<builtin>.ValueError",
        "<builtin>.list",
        "<builtin>.enumerate",
        "<builtin>.isinstance"
    ],
    "http.client.HTTPConnection.putrequest": [
        "http.client.HTTPConnection.putheader",
        "http.client.HTTPConnection._validate_path",
        "http.client.HTTPConnection._encode_request",
        "http.client.HTTPConnection._output"
    ],
    "http.client.HTTPConnection.request": [
        "http.client.HTTPConnection._send_request"
    ],
    "http.client.HTTPConnection.send": [
        "<builtin>.hasattr",
        "<builtin>.TypeError",
        "<builtin>.print",
        "<builtin>.type",
        "http.client.HTTPSConnection.connect",
        "<builtin>.repr",
        "<builtin>.isinstance"
    ],
    "http.client.HTTPConnection.set_tunnel": [
        "http.client.HTTPConnection._get_hostport",
        "<builtin>.RuntimeError"
    ],
    "http.client.HTTPResponse.__init__": [
        "socket.socket.makefile"
    ],
    "http.client.HTTPResponse._close_conn": [
        "socket.SocketIO.close"
    ],
    "http.client.HTTPResponse._read_status": [
        "socket.SocketIO.readinto",
        "<builtin>.str",
        "<builtin>.print",
        "<builtin>.len",
        "<builtin>.int",
        "<builtin>.repr"
    ],
    "http.client.HTTPResponse.close": [
        "http.client.HTTPResponse.flush",
        "<builtin>.super",
        "http.client.HTTPResponse._close_conn"
    ],
    "http.client.HTTPSConnection.__init__": [
        "ssl.create_default_context",
        "ssl.verify_mode",
        "<builtin>.ValueError",
        "<builtin>.super",
        "http.client.HTTPConnection.__init__"
    ],
    "http.client.HTTPSConnection.connect": [
        "<builtin>.super",
        "http.client.HTTPConnection.connect",
        "ssl.SSLContext.wrap_socket"
    ],
    "idna.getregentry": [
        "codecs.__new__"
    ],
    "inspect.BoundArguments": [
        "<builtin>.property"
    ],
    "inspect.Parameter": [
        "<builtin>.property"
    ],
    "inspect.Signature": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "inspect._ParameterKind": [
        "<builtin>.property"
    ],
    "inspect.currentframe": [
        "<builtin>.hasattr"
    ],
    "inspect.findsource": [
        "<builtin>.hasattr",
        "<builtin>.range",
        "re.compile",
        "inspect.istraceback",
        "<builtin>.OSError",
        "inspect.isframe",
        "<list>.append",
        "inspect.isclass",
        "<list>.sort",
        "linecache.getlines",
        "<str>.match",
        "inspect.ismethod",
        "inspect.isfunction",
        "inspect.ismodule",
        "linecache.checkcache",
        "inspect.getsourcefile",
        "inspect.getmodule",
        "<builtin>.len",
        "inspect.getfile",
        "inspect.iscode"
    ],
    "inspect.getabsfile": [
        "ntpath.normcase",
        "inspect.getsourcefile",
        "posixpath.normcase",
        "ntpath._abspath_fallback",
        "inspect.getfile",
        "posixpath.abspath"
    ],
    "inspect.getfile": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "inspect.ismodule",
        "<builtin>.TypeError",
        "inspect.istraceback",
        "inspect.isframe",
        "inspect.isclass",
        "inspect.ismethod",
        "inspect.isfunction",
        "<builtin>.type",
        "inspect.iscode"
    ],
    "inspect.getframeinfo": [
        "<builtin>.min",
        "<builtin>.TypeError",
        "<builtin>.max",
        "inspect.istraceback",
        "inspect.getsourcefile",
        "inspect.isframe",
        "<builtin>.len",
        "inspect.getfile",
        "inspect.findsource"
    ],
    "inspect.getmodule": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "inspect.ismodule",
        "inspect.getabsfile",
        "<map>.get",
        "ntpath._abspath_fallback",
        "posixpath.realpath"
    ],
    "inspect.getsourcefile": [
        "<builtin>.getattr",
        "<builtin>.any",
        "ntpath.splitext",
        "posixpath.splitext",
        "inspect.getfile",
        "genericpath.exists"
    ],
    "inspect.isclass": [
        "<builtin>.isinstance"
    ],
    "inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "inspect.isframe": [
        "<builtin>.isinstance"
    ],
    "inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "inspect.ismodule": [
        "<builtin>.isinstance"
    ],
    "inspect.istraceback": [
        "<builtin>.isinstance"
    ],
    "linecache.getline": [
        "<builtin>.len",
        "linecache.getlines"
    ],
    "linecache.getlines": [
        "linecache.updatecache",
        "<builtin>.len"
    ],
    "linecache.updatecache": [
        "<str>.startswith",
        "codecs.BufferedIncrementalDecoder.decode",
        "<builtin>.len",
        "tokenize.open",
        "<str>.endswith"
    ],
    "locale._replace_encoding": [
        "encodings.normalize_encoding",
        "<str>.lower",
        "<map>.get",
        "<str>.replace"
    ],
    "locale.normalize": [
        "locale._replace_encoding",
        "<map>.get",
        "<str>.replace"
    ],
    "logging": [
        "logging.Logger",
        "<builtin>.hasattr",
        "logging.StreamHandler",
        "logging.Formatter.__init__",
        "psutil.Process",
        "_weakrefset.WeakSet.__init__",
        "posixpath.normcase",
        "logging.FileHandler",
        "psutil.cpu_times",
        "logging.Handler",
        "enum.__new__",
        "logging.StringTemplateStyle",
        "_frozen_importlib._find_and_load",
        "enum.__prepare__",
        "http.HTTPStatus",
        "logging.LogRecord",
        "logging.Manager",
        "threading.RLock",
        "logging.Filter",
        "logging.Formatter",
        "logging.RootLogger.__init__",
        "_frozen_importlib._lock_unlock_module",
        "logging.BufferingFormatter",
        "logging.Filterer",
        "logging.Manager.__init__",
        "logging.NullHandler",
        "_frozen_importlib._handle_fromlist",
        "weakref.WeakValueDictionary.__init__",
        "logging.LoggerAdapter",
        "logging._StderrHandler",
        "logging.PercentStyle",
        "logging.RootLogger",
        "logging._StderrHandler.__init__",
        "logging.PlaceHolder",
        "psutil.Popen",
        "logging.StrFormatStyle",
        "_frozen_importlib.parent"
    ],
    "logging.FileHandler.__init__": [
        "logging.FileHandler._open",
        "__init__.FileHandler._open",
        "logging.StreamHandler.__init__",
        "logging.Filterer.__init__",
        "posixpath.abspath"
    ],
    "logging.FileHandler._open": [
        "_bootlocale.getpreferredencoding",
        "codecs.IncrementalEncoder.setstate",
        "<builtin>.open",
        "codecs.IncrementalEncoder.__init__"
    ],
    "logging.FileHandler.emit": [
        "logging.StreamHandler.emit"
    ],
    "logging.Filterer.__init__": [],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging.Formatter.__init__": [
        "<builtin>.ValueError",
        "logging.PercentStyle.__init__",
        "__init__.PercentStyle.__init__",
        "logging.PercentStyle.validate",
        "<map>.keys"
    ],
    "logging.Formatter.format": [
        "logging.LogRecord.getMessage",
        "logging.Formatter.usesTime",
        "logging.Formatter.formatMessage",
        "logging.Formatter.formatTime",
        "logging.Formatter.formatException"
    ],
    "logging.Formatter.formatException": [
        "traceback.print_exception"
    ],
    "logging.Formatter.formatMessage": [
        "logging.PercentStyle.format"
    ],
    "logging.Formatter.formatStack": [],
    "logging.Formatter.formatTime": [],
    "logging.Formatter.usesTime": [
        "logging.PercentStyle.usesTime"
    ],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging.Handler.__init__": [
        "logging._checkLevel",
        "logging.FileHandler.createLock",
        "logging.NullHandler.createLock",
        "logging.Filterer.__init__",
        "logging._addHandlerRef",
        "logging.StreamHandler.createLock",
        "logging.Handler.createLock"
    ],
    "logging.Handler.acquire": [],
    "logging.Handler.createLock": [
        "logging._register_at_fork_reinit_lock",
        "threading.RLock"
    ],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "logging.Handler.format": [
        "logging.Formatter.format"
    ],
    "logging.Handler.handle": [
        "logging.FileHandler.emit",
        "logging.StreamHandler.emit",
        "logging.handlers.BaseRotatingHandler.emit",
        "logging.Handler.acquire",
        "logging.Filterer.filter",
        "logging.Handler.release",
        "logging.Handler.emit"
    ],
    "logging.Handler.handleError": [
        "posixpath.dirname",
        "traceback.print_exception",
        "traceback.print_stack",
        "ntpath.dirname"
    ],
    "logging.Handler.setFormatter": [],
    "logging.Handler.setLevel": [
        "logging._checkLevel"
    ],
    "logging.LogRecord.__init__": [
        "<builtin>.hasattr",
        "posixpath.basename",
        "<builtin>.len",
        "<builtin>.int",
        "logging.handlers.getLevelName",
        "threading.name",
        "posixpath.splitext",
        "threading.current_thread",
        "<builtin>.isinstance"
    ],
    "logging.LogRecord.getMessage": [
        "<builtin>.str"
    ],
    "logging.Logger.__init__": [
        "logging._checkLevel",
        "logging.Filterer.__init__",
        "__init__.Filterer.__init__"
    ],
    "logging.Logger._log": [
        "logging.Logger.handle",
        "<builtin>.type",
        "logging.Logger.makeRecord",
        "logging.Logger.findCaller",
        "<builtin>.isinstance"
    ],
    "logging.Logger.addHandler": [
        "<list>.append",
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "logging.Logger.callHandlers": [
        "logging.Handler.handle"
    ],
    "logging.Logger.debug": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.error": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.exception": [
        "logging.Logger.error"
    ],
    "logging.Logger.findCaller": [
        "__init__.<lambda>",
        "<builtin>.hasattr",
        "posixpath.normcase"
    ],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Logger.handle": [
        "logging.Filterer.filter",
        "logging.Logger.callHandlers"
    ],
    "logging.Logger.info": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.isEnabledFor": [
        "logging.Logger.getEffectiveLevel",
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "logging.Logger.makeRecord": [
        "<builtin>.KeyError",
        "logging.LogRecord.__init__"
    ],
    "logging.Logger.removeHandler": [
        "<list>.remove",
        "logging._acquireLock"
    ],
    "logging.Logger.setLevel": [
        "logging._checkLevel",
        "logging.Manager._clear_cache"
    ],
    "logging.Logger.warning": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.LoggerAdapter": [
        "<builtin>.property"
    ],
    "logging.Manager.__init__": [],
    "logging.Manager._clear_cache": [
        "logging.Manager.root._cache.clear",
        "logging._releaseLock",
        "logging._acquireLock",
        "logging.RootLogger.manager.root._cache.clear",
        "<builtin>.isinstance"
    ],
    "logging.Manager.getLogger": [
        "logging.Logger.__init__",
        "<builtin>.TypeError",
        "logging._releaseLock",
        "logging._acquireLock",
        "logging.Manager._fixupParents",
        "logging.Manager._fixupChildren",
        "<builtin>.isinstance"
    ],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.PercentStyle.format": [
        "logging.PercentStyle._format",
        "<builtin>.ValueError"
    ],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.StreamHandler.emit": [
        "logging.StreamHandler.flush",
        "logging.Handler.format"
    ],
    "logging.StreamHandler.flush": [
        "logging.Handler.acquire",
        "<builtin>.hasattr",
        "logging.Handler.release"
    ],
    "logging._StderrHandler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging._acquireLock": [],
    "logging._addHandlerRef": [
        "<list>.append",
        "logging._acquireLock",
        "_weakref.ref",
        "logging._releaseLock"
    ],
    "logging._checkLevel": [
        "<builtin>.TypeError",
        "<builtin>.ValueError",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "logging._register_at_fork_reinit_lock": [
        "_weakrefset.WeakSet.add",
        "logging._acquireLock",
        "logging._releaseLock"
    ],
    "logging.basicConfig": [
        "logging.Logger.addHandler",
        "logging.Formatter.__init__",
        "<builtin>.len",
        "logging.StreamHandler.__init__",
        "<builtin>.ValueError",
        "logging._acquireLock",
        "logging.Handler.setFormatter",
        "logging.Logger.setLevel",
        "logging.Logger.removeHandler",
        "<map>.keys",
        "logging.FileHandler.__init__"
    ],
    "logging.currentframe": [],
    "logging.error": [
        "<builtin>.len",
        "logging.Logger.error",
        "logging.basicConfig"
    ],
    "logging.exception": [
        "logging.error"
    ],
    "logging.getLevelName": [
        "<map>.get"
    ],
    "logging.getLogger": [
        "logging.Manager.getLogger"
    ],
    "logging.handlers": [
        "logging.handlers.RotatingFileHandler",
        "logging.handlers.NTEventLogHandler",
        "logging.handlers.SMTPHandler",
        "_frozen_importlib._find_and_load",
        "logging.handlers.SocketHandler",
        "logging.handlers.MemoryHandler",
        "logging.handlers.SysLogHandler",
        "logging.handlers.DatagramHandler",
        "logging.handlers.BaseRotatingHandler",
        "logging.handlers.BufferingHandler",
        "logging.handlers.QueueHandler",
        "logging.handlers.QueueListener",
        "logging.handlers.WatchedFileHandler",
        "logging.handlers.HTTPHandler",
        "logging.handlers.TimedRotatingFileHandler"
    ],
    "logging.handlers.BaseRotatingHandler.__init__": [
        "__init__.FileHandler.__init__",
        "logging.FileHandler.__init__"
    ],
    "logging.handlers.BaseRotatingHandler.emit": [
        "logging.handlers.RotatingFileHandler.shouldRollover",
        "__init__.FileHandler.emit"
    ],
    "logging.handlers.RotatingFileHandler.__init__": [
        "logging.handlers.BaseRotatingHandler.__init__"
    ],
    "logging.handlers.RotatingFileHandler.shouldRollover": [
        "<builtin>.len",
        "codecs.IncrementalEncoder.setstate",
        "__init__.Handler.format"
    ],
    "message.Message": [],
    "os._Environ.__getitem__": [
        "os.decode",
        "os.encode",
        "<builtin>.KeyError"
    ],
    "os._Environ.__iter__": [
        "os.decode",
        "<builtin>.list"
    ],
    "os.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "os._get_exports_list": [
        "<builtin>.list",
        "<builtin>.dir"
    ],
    "os.get_exec_path": [
        "warnings.simplefilter",
        "warnings.catch_warnings.__enter__",
        "warnings.catch_warnings.__init__",
        "_collections_abc.Mapping.get",
        "<builtin>.ValueError",
        "<str>.split",
        "warnings.catch_warnings.__exit__",
        "os._Environ.__getitem__",
        "<builtin>.isinstance"
    ],
    "os.getenv": [
        "_collections_abc.Mapping.get"
    ],
    "parse.splithost": [
        "re.compile"
    ],
    "parse.splittype": [
        "re.compile"
    ],
    "parse.urlparse": [
        "parse._coerce_args",
        "parse.urlsplit",
        "parse._noop"
    ],
    "parse.urlsplit": [
        "parse._coerce_args",
        "parse._splitnetloc",
        "parse._noop",
        "parse.<genexpr>"
    ],
    "posixpath._joinrealpath": [
        "posixpath.islink",
        "posixpath._joinrealpath",
        "posixpath.isabs",
        "posixpath.split",
        "<map>.partition",
        "posixpath.join",
        "<builtin>.isinstance"
    ],
    "posixpath.abspath": [
        "posixpath.normpath",
        "posixpath.isabs",
        "<builtin>.isinstance"
    ],
    "posixpath.basename": [
        "<str>.rfind",
        "posixpath._get_sep"
    ],
    "posixpath.dirname": [
        "posixpath._get_sep",
        "<str>.rfind",
        "<builtin>.len"
    ],
    "posixpath.expanduser": [
        "<str>.startswith",
        "posixpath._get_sep",
        "<str>.find",
        "<builtin>.str",
        "<builtin>.len",
        "<str>.rstrip",
        "_collections_abc.Mapping.__contains__",
        "os._Environ.__getitem__",
        "<builtin>.isinstance"
    ],
    "posixpath.isabs": [
        "<str>.startswith",
        "posixpath._get_sep"
    ],
    "posixpath.join": [
        "posixpath._get_sep",
        "<str>.endswith",
        "<builtin>.map"
    ],
    "posixpath.realpath": [
        "posixpath._joinrealpath",
        "posixpath.abspath"
    ],
    "posixpath.split": [
        "posixpath._get_sep",
        "<str>.rfind",
        "<builtin>.len"
    ],
    "posixpath.splitext": [
        "genericpath._splitext",
        "<builtin>.isinstance"
    ],
    "psutil.Process": [
        "<builtin>.property",
        "<builtin>.hasattr",
        "psutil._common.outer",
        "contextlib.contextmanager",
        "psutil._assert_pid_not_reused",
        "psutil._common.memoize_when_activated",
        "psutil._common.deprecated_method"
    ],
    "psutil.Process.__init__": [
        "psutil.Process._init"
    ],
    "psutil.Process.__ne__": [
        "psutil.Process.__eq__"
    ],
    "psutil.Process._init": [
        "os.getpid",
        "psutil.pid",
        "psutil.Process.create_time",
        "psutil._psosx.Process.__init__",
        "<builtin>.isinstance",
        "threading.Process.create_time",
        "<builtin>.TypeError",
        "_pslinux.Process.__init__",
        "threading.pid",
        "<builtin>.ValueError",
        "threading.RLock",
        "_common.NoSuchProcess.__init__"
    ],
    "psutil.Process.as_dict": [
        "contextlib._GeneratorContextManager.__enter__",
        "<builtin>.TypeError",
        "psutil._common.Process.memory_percent",
        "psutil.Process.num_threads",
        "psutil..Process.cpu_percent",
        "<builtin>.type",
        "psutil.pid",
        "psutil.Process.cmdline",
        "threading.pid",
        "psutil._common.wrapper",
        "psutil._psosx.Process.cmdline",
        "contextlib.helper",
        "<builtin>.getattr",
        "contextlib._GeneratorContextManager.__exit__",
        "<builtin>.ValueError",
        "<builtin>.map",
        "psutil.Process.cpu_percent",
        "psutil._psosx.Process.num_threads",
        "<builtin>.dict",
        "psutil.Process.create_time",
        "_common.wrapper",
        "psutil.Process.name",
        "psutil._common.Process.username",
        "<builtin>.len",
        "<builtin>.set",
        "psutil.Process.username",
        "psutil.Process.memory_percent",
        "<builtin>.isinstance"
    ],
    "psutil.Process.cmdline": [
        "_pslinux.wrapper",
        "_psosx.wrapper",
        "psutil.Process.cmdline"
    ],
    "psutil.Process.cpu_percent": [
        "<builtin>.round",
        "_psosx.wrapper",
        "psutil._psosx.cpu_count",
        "<builtin>.ValueError",
        "psutil.timer"
    ],
    "psutil.Process.create_time": [
        "_pslinux.wrapper",
        "_psosx.wrapper",
        "psutil.Process._proc.create_time"
    ],
    "psutil.Process.is_running": [
        "psutil.Process.__ne__",
        "psutil._common.Process.__init__",
        "psutil.Process.__init__",
        "psutil._common.Process.__ne__",
        "threading.pid",
        "__init__.pid"
    ],
    "psutil.Process.memory_percent": [
        "<builtin>.getattr",
        "_common.wrapper",
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.list",
        "<builtin>.float"
    ],
    "psutil.Process.name": [
        "_psosx.wrapper",
        "psutil.Process.cmdline",
        "posixpath.basename",
        "_pslinux.wrapper",
        "<builtin>.len",
        "psutil._psosx.Process.cmdline",
        "psutil.Process._proc.name"
    ],
    "psutil.Process.num_threads": [
        "_psosx.wrapper"
    ],
    "psutil.Process.oneshot": [
        "<builtin>.hasattr",
        "_pslinux.Process.oneshot_exit",
        "psutil.Process.cpu_times.cache_activate",
        "_common.cache_deactivate",
        "_common.cache_activate",
        "_pslinux.Process.oneshot_enter",
        "psutil.Process.memory_info.cache_deactivate",
        "psutil.Process.ppid.cache_deactivate",
        "psutil.Process.cpu_times.cache_deactivate",
        "psutil.Process.uids.cache_activate",
        "psutil.Process.ppid.cache_activate",
        "psutil.Process.memory_info.cache_activate",
        "psutil.Process.uids.cache_deactivate"
    ],
    "psutil.Process.username": [
        "_common.wrapper",
        "<builtin>.ImportError",
        "<builtin>.str"
    ],
    "psutil._assert_pid_not_reused": [
        "functools.wraps",
        "functools.update_wrapper"
    ],
    "psutil._common": [
        "os.getenv",
        "psutil._common.NicDuplex",
        "psutil._common.NoSuchProcess",
        "collections.namedtuple",
        "psutil._common.BatteryTime",
        "psutil._common.AccessDenied",
        "enum.__new__",
        "<builtin>.globals",
        "psutil._common._WrapNumbers.__init__",
        "enum.__prepare__",
        "<builtin>.object",
        "psutil._common._WrapNumbers",
        "__init__._common.memoize",
        "<map>.update",
        "_frozen_importlib._handle_fromlist",
        "<builtin>.bool",
        "enum.__members__",
        "psutil._common.ZombieProcess",
        "__init__._common.TimeoutExpired",
        "psutil._common.Error"
    ],
    "psutil._common.BatteryTime": [
        "enum._EnumDict.__setitem__"
    ],
    "psutil._common.NicDuplex": [
        "enum._EnumDict.__setitem__"
    ],
    "psutil._common._WrapNumbers.run": [
        "psutil._common._WrapNumbers._add_dict",
        "<builtin>.range",
        "<builtin>.tuple",
        "<builtin>.len",
        "psutil._common._WrapNumbers._remove_dead_reminders"
    ],
    "psutil._common.memoize": [
        "functools.wraps",
        "functools.update_wrapper"
    ],
    "psutil._common.memoize_when_activated": [
        "functools.wraps",
        "functools.update_wrapper"
    ],
    "psutil._common.outer": [
        "functools.wraps",
        "functools.update_wrapper"
    ],
    "psutil._common.wrapper": [
        "psutil.cpu_times",
        "psutil.memory_info",
        "psutil._psosx._get_kinfo_proc",
        "psutil._psosx._get_pidtaskinfo",
        "psutil.uids"
    ],
    "psutil._cpu_busy_time": [
        "<builtin>.getattr",
        "psutil._cpu_tot_time"
    ],
    "psutil._cpu_times_deltas": [
        "<builtin>.max",
        "<builtin>.getattr"
    ],
    "psutil._pslinux.cpu_times": [
        "psutil._common.open_binary",
        "<builtin>.len",
        "psutil._pslinux.set_scputimes_ntuple",
        "<builtin>.float",
        "psutil._common.get_procfs_path"
    ],
    "psutil._pslinux.per_cpu_times": [
        "psutil._common.open_binary",
        "<builtin>.len",
        "psutil._pslinux.set_scputimes_ntuple",
        "<builtin>.float",
        "psutil._common.get_procfs_path"
    ],
    "psutil._pslinux.pid_exists": [
        "psutil._psposix.pid_exists",
        "psutil._common.open_binary",
        "<builtin>.ValueError",
        "psutil._common.get_procfs_path",
        "<builtin>.int",
        "psutil._pslinux.pids"
    ],
    "psutil._pslinux.pids": [
        "<builtin>.int"
    ],
    "psutil._pslinux.sensors_battery": [
        "psutil._pslinux.sensors_battery.multi_bcat",
        "<str>.lower",
        "<builtin>.object",
        "ntpath.join",
        "psutil._common.cat",
        "posixpath.join",
        "<builtin>.int",
        "<builtin>.sorted",
        "<str>.strip"
    ],
    "psutil._pslinux.sensors_battery.multi_bcat": [
        "<builtin>.int",
        "psutil._common.bcat",
        "<str>.strip"
    ],
    "psutil._pslinux.sensors_temperatures": [
        "posixpath.dirname",
        "psutil._common.debug",
        "<str>.sub",
        "<builtin>.dict",
        "re.compile",
        "psutil._common.bcat",
        "<builtin>.set",
        "ntpath.join",
        "psutil._common.cat",
        "<builtin>.float",
        "posixpath.join",
        "<builtin>.sorted",
        "ntpath.dirname",
        "<str>.strip",
        "_collections.defaultdict"
    ],
    "psutil._pslinux.set_scputimes_ntuple": [
        "<builtin>.len",
        "collections.namedtuple",
        "<list>.append",
        "psutil._common.open_binary"
    ],
    "psutil._pslinux.wrap_exceptions": [
        "functools.wraps"
    ],
    "psutil._psosx": [
        "<builtin>.dict",
        "psutil._psosx.Process",
        "_frozen_importlib._handle_fromlist",
        "collections.namedtuple",
        "_frozen_importlib.parent",
        "_frozen_importlib._lock_unlock_module"
    ],
    "psutil._psosx.Process": [
        "psutil._common.memoize_when_activated",
        "psutil._psosx.wrap_exceptions"
    ],
    "psutil._psosx.Process.__init__": [],
    "psutil._psosx.Process._get_kinfo_proc": [
        "<builtin>.len"
    ],
    "psutil._psosx.Process.cmdline": [],
    "psutil._psosx.Process.oneshot_enter": [
        "psutil._common.cache_activate"
    ],
    "psutil._psosx.Process.oneshot_exit": [
        "psutil._common.cache_deactivate"
    ],
    "psutil._psosx.cpu_count_cores": [],
    "psutil._psosx.cpu_count_logical": [],
    "psutil._psosx.cpu_freq": [],
    "psutil._psosx.cpu_percent": [
        "psutil._psosx.cpu_times",
        "psutil.calculate"
    ],
    "psutil._psosx.cpu_times": [
        "psutil._psosx.wrapper"
    ],
    "psutil._psosx.create_time": [
        "psutil._psosx.wrapper"
    ],
    "psutil._psosx.disk_partitions": [
        "genericpath.exists",
        "posixpath.isabs"
    ],
    "psutil._psosx.memory_info": [
        "psutil._psosx.wrapper"
    ],
    "psutil._psosx.name": [
        "psutil._psosx.wrapper"
    ],
    "psutil._psosx.net_if_stats": [
        "psutil._psosx.net_if_stats",
        "enum.EnumMeta.__call__"
    ],
    "psutil._psosx.num_threads": [
        "psutil._psosx.wrapper"
    ],
    "psutil._psosx.per_cpu_times": [
        "<list>.append"
    ],
    "psutil._psosx.pids": [
        "psutil._psosx.pids"
    ],
    "psutil._psosx.sensors_battery": [],
    "psutil._psosx.swap_memory": [
        "psutil._common.usage_percent"
    ],
    "psutil._psosx.uids": [
        "psutil._psosx.wrapper"
    ],
    "psutil._psosx.virtual_memory": [
        "psutil._common.usage_percent"
    ],
    "psutil._psosx.wrap_exceptions": [
        "functools.wraps",
        "functools.update_wrapper"
    ],
    "psutil._psosx.wrapper": [
        "psutil._common.NoSuchProcess.__init__",
        "psutil._psosx.cmdline",
        "psutil._psosx.memory_info",
        "psutil._psosx.num_threads",
        "psutil._psosx.create_time",
        "psutil._psosx.uids",
        "psutil._psosx.cpu_times",
        "psutil._common.AccessDenied.__init__",
        "psutil._common.wrapper",
        "psutil._psosx.is_zombie",
        "psutil._psosx.name"
    ],
    "psutil._psposix": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "enum.EnumMeta.__call__",
        "_frozen_importlib._find_and_load",
        "enum.EnumMeta.__iter__",
        "_frozen_importlib.parent",
        "psutil._common.memoize"
    ],
    "psutil._psposix.disk_usage": [
        "psutil._common.usage_percent"
    ],
    "psutil._psposix.pid_exists": [],
    "psutil._pssunos": [
        "<builtin>.dict",
        "collections.namedtuple"
    ],
    "psutil._pssunos.Process": [
        "collections.namedtuple",
        "psutil._pssunos.wrap_exceptions",
        "psutil._common.memoize_when_activated"
    ],
    "psutil._pssunos.cpu_count_cores": [],
    "psutil._pssunos.cpu_count_logical": [],
    "psutil._pssunos.cpu_times": [
        "<builtin>.zip",
        "<builtin>.sum"
    ],
    "psutil._pssunos.per_cpu_times": [],
    "psutil._pssunos.pid_exists": [
        "psutil._psposix.pid_exists"
    ],
    "psutil._pssunos.wrap_exceptions": [
        "functools.wraps"
    ],
    "psutil._pswindows": [
        "<builtin>.globals",
        "psutil._compat.lru_cache",
        "<builtin>.dict",
        "<builtin>.RuntimeError",
        "<builtin>.str",
        "collections.namedtuple",
        "psutil._compat.lru_cache.decorating_function",
        "psutil._common.memoize"
    ],
    "psutil._pswindows.Process": [
        "psutil._pswindows.retry_error_partial_copy",
        "psutil._common.memoize_when_activated",
        "psutil._pswindows.wrap_exceptions"
    ],
    "psutil._pswindows.WindowsService": [
        "contextlib.contextmanager"
    ],
    "psutil._pswindows.cpu_count_cores": [],
    "psutil._pswindows.cpu_count_logical": [],
    "psutil._pswindows.cpu_times": [
        "<builtin>.zip",
        "<builtin>.sum"
    ],
    "argparse.ArgumentParser.print_help": [
        "argparse.ArgumentParser.format_help",
        "argparse.ArgumentParser._print_message"
    ],
    "argparse.ArgumentParser.format_help": [
        "argparse.ArgumentParser._get_formatter",
        "argparse.HelpFormatter.format_help",
        "argparse.HelpFormatter.start_section",
        "argparse.HelpFormatter.add_usage",
        "argparse.HelpFormatter.add_text",
        "argparse.HelpFormatter.add_arguments",
        "argparse.HelpFormatter.end_section"
    ],
    "psutil._pswindows.per_cpu_times": [
        "<list>.append"
    ],
    "psutil._pswindows.retry_error_partial_copy": [
        "functools.wraps"
    ],
    "psutil._pswindows.sensors_battery": [
        "<builtin>.bool"
    ],
    "psutil._pswindows.wrap_exceptions": [
        "functools.wraps"
    ],
    "psutil.add": [
        "psutil.Process.as_dict",
        "psutil.Process.__init__",
        "threading.pid"
    ],
    "psutil.boot_time": [
        "psutil._psosx.boot_time"
    ],
    "psutil.calculate": [
        "psutil._cpu_tot_time",
        "psutil._cpu_times_deltas",
        "psutil._cpu_busy_time"
    ],
    "psutil.cpu_count": [
        "_pslinux.cpu_count_cores",
        "psutil._psosx.cpu_count_logical",
        "_pslinux.cpu_count_logical",
        "psutil._psosx.cpu_count_cores"
    ],
    "psutil.cpu_freq": [
        "psutil.cpu_times",
        "psutil.cpu_percent.calculate",
        "<builtin>.len",
        "<builtin>.float",
        "time.sleep",
        "_pslinux.cpu_freq",
        "psutil.cpu_freq",
        "psutil.cpu_percent.ret.append"
    ],
    "psutil.cpu_percent": [
        "psutil.cpu_times",
        "psutil.cpu_percent.calculate",
        "<builtin>.ValueError",
        "time.sleep",
        "<builtin>.zip",
        "psutil.cpu_percent.ret.append"
    ],
    "psutil.cpu_percent.calculate": [
        "<builtin>.round",
        "psutil._cpu_tot_time",
        "psutil._cpu_times_deltas",
        "psutil._cpu_busy_time"
    ],
    "psutil.cpu_times": [
        "_pslinux.wrapper",
        "psutil._psosx.wrapper",
        "psutil._psosx.cpu_times",
        "_pslinux.cpu_times",
        "psutil._psosx.per_cpu_times",
        "_pslinux.per_cpu_times"
    ],
    "psutil.cpu_times_percent": [
        "psutil.cpu_times",
        "psutil.cpu_times_percent.calculate",
        "psutil.calculate",
        "<builtin>.ValueError",
        "time.time",
        "psutil._cpu_tot_time",
        "<builtin>.zip"
    ],
    "psutil.cpu_times_percent.calculate": [
        "<builtin>.round",
        "psutil.cpu_times_percent.calculate.nums.append",
        "<builtin>.min",
        "<builtin>.max",
        "psutil._cpu_tot_time",
        "psutil._cpu_times_deltas"
    ],
    "psutil.disk_io_counters": [
        "<builtin>.dict",
        "<builtin>.getattr",
        "psutil._common.wrap_numbers",
        "_pslinux.disk_io_counters",
        "<builtin>.sum",
        "<builtin>.zip",
        "_common.wrap_numbers"
    ],
    "psutil.disk_partitions": [
        "psutil._psosx.disk_partitions",
        "collections._replace",
        "psutil.disk_partitions.pathconf"
    ],
    "psutil.disk_usage": [
        "psutil._psposix.disk_usage",
        "_psposix.disk_usage"
    ],
    "psutil.memory_info": [
        "psutil._psosx.wrapper"
    ],
    "psutil.net_if_addrs": [
        "<builtin>.dict",
        "psutil.<lambda>",
        "<builtin>.hasattr",
        "__init__.<lambda>",
        "enum.EnumMeta.__call__"
    ],
    "psutil.net_if_stats": [
        "_pslinux.net_if_stats"
    ],
    "psutil.net_io_counters": [
        "psutil._common.wrap_numbers",
        "<builtin>.sum",
        "_pslinux.net_io_counters",
        "<builtin>.zip",
        "_common.wrap_numbers"
    ],
    "psutil.oneshot": [
        "psutil._psosx.Process.oneshot_exit",
        "psutil._common.cache_deactivate",
        "psutil._common.cache_activate",
        "psutil._psosx.Process.oneshot_enter"
    ],
    "psutil.pid_exists": [
        "psutil._pssunos.pid_exists",
        "psutil._psposix.pid_exists",
        "psutil._psbsd.pid_exists",
        "psutil._pslinux.pid_exists",
        "psutil.pids",
        "psutil._psaix.pid_exists"
    ],
    "psutil.pids": [
        "_pslinux.pids",
        "<builtin>.sorted"
    ],
    "psutil.process_iter": [
        "psutil.Process.is_running",
        "psutil.process_iter.add",
        "psutil.pids",
        "<builtin>.set",
        "psutil.Process.as_dict",
        "<builtin>.list",
        "psutil.process_iter.remove",
        "<builtin>.sorted"
    ],
    "psutil.sensors_battery": [
        "psutil._psosx.sensors_battery",
        "_pslinux.sensors_battery"
    ],
    "psutil.sensors_temperatures": [
        "<builtin>.dict",
        "psutil.sensors_temperatures.convert",
        "_pslinux.sensors_temperatures"
    ],
    "psutil.sensors_temperatures.convert": [
        "<builtin>.float"
    ],
    "psutil.swap_memory": [
        "_pslinux.swap_memory",
        "psutil._psosx.swap_memory"
    ],
    "psutil.uids": [
        "psutil._psosx.wrapper"
    ],
    "psutil.virtual_memory": [
        "_psosx.virtual_memory"
    ],
    "queue": [
        "queue.Queue",
        "queue.Full",
        "_frozen_importlib._find_and_load",
        "queue._PySimpleQueue",
        "queue.LifoQueue",
        "_frozen_importlib._handle_fromlist",
        "queue.PriorityQueue"
    ],
    "random": [
        "random.SystemRandom",
        "<builtin>.hasattr",
        "random.Random.__init__",
        "random.Random",
        "_frozen_importlib._find_and_load",
        "random.__init_subclass__"
    ],
    "random.Random.__init__": [
        "random.Random.seed"
    ],
    "re._compile": [
        "<builtin>.next",
        "sre_compile.isstring",
        "<builtin>.iter",
        "<builtin>.TypeError",
        "enum.IntFlag.__and__",
        "<builtin>.len",
        "<builtin>.ValueError",
        "sre_compile.compile",
        "<builtin>.type",
        "types.DynamicClassAttribute.__get__",
        "<builtin>.isinstance"
    ],
    "re._compile_repl": [
        "sre_parse.parse_template"
    ],
    "re._subx": [
        "re._compile_repl",
        "<builtin>.len"
    ],
    "re.compile": [
        "re._compile"
    ],
    "re.escape": [
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "re.match": [
        "<str>.match",
        "re._compile"
    ],
    "re.search": [
        "re._compile"
    ],
    "re.sub": [
        "re._compile",
        "<str>.sub",
        "re._subx"
    ],
    "selectors": [
        "<builtin>.globals",
        "selectors.KqueueSelector",
        "<builtin>.hasattr",
        "__init__.namedtuple",
        "_frozen_importlib._find_and_load",
        "selectors._PollLikeSelector",
        "selectors._SelectorMapping",
        "selectors.BaseSelector",
        "_frozen_importlib._handle_fromlist",
        "selectors.SelectSelector",
        "selectors._BaseSelectorImpl",
        "abc.__new__",
        "selectors.PollSelector"
    ],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "shutil._access_check": [
        "genericpath.exists",
        "genericpath.isdir"
    ],
    "shutil.get_terminal_size": [
        "<builtin>.int",
        "os._Environ.__getitem__"
    ],
    "shutil.which": [
        "posixpath.dirname",
        "<builtin>.any",
        "shutil._access_check",
        "_collections_abc.Mapping.get",
        "os.fsdecode",
        "<map>.insert",
        "<str>.lower",
        "<builtin>.set",
        "posixpath.normcase",
        "<str>.split",
        "posixpath.join",
        "<str>.endswith",
        "<str>.insert",
        "<builtin>.isinstance"
    ],
    "signal": [
        "<builtin>.globals",
        "functools.wraps",
        "functools.update_wrapper",
        "enum.EnumMeta._convert_"
    ],
    "signal._int_to_enum": [
        "enum.EnumMeta.__call__",
        "signal.signal.Handlers"
    ],
    "signal.signal": [
        "signal._enum_to_int",
        "signal._int_to_enum"
    ],
    "socket": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "socket.SocketIO",
        "_frozen_importlib._find_and_load",
        "socket.socket",
        "socket._GiveupOnSendfile",
        "<list>.extend",
        "<list>.append",
        "<builtin>.object",
        "os._get_exports_list",
        "abc.__new__",
        "enum.EnumMeta._convert_"
    ],
    "socket.SocketIO.close": [
        "socket.socket._decref_socketios"
    ],
    "socket.SocketIO.readinto": [
        "socket.SocketIO.readable",
        "<builtin>.OSError"
    ],
    "socket._intenum_converter": [
        "enum.EnumMeta.__call__"
    ],
    "socket.create_connection": [
        "socket.getaddrinfo",
        "socket.socket.__init__"
    ],
    "socket.family": [
        "socket._intenum_converter"
    ],
    "socket.getaddrinfo": [
        "socket._intenum_converter",
        "__init__.search_function",
        "idna.Codec.encode"
    ],
    "socket.socket.close": [
        "socket.socket._real_close",
        "ssl.SSLSocket._real_close"
    ],
    "socket.socket.makefile": [
        "socket.SocketIO.readable",
        "<builtin>.ValueError",
        "socket.SocketIO.__init__",
        "<builtin>.set"
    ],
    "socket.type": [
        "socket._intenum_converter"
    ],
    "sre_compile._code": [
        "sre_compile._compile_info",
        "<list>.append",
        "sre_compile._compile"
    ],
    "sre_compile._compile": [
        "sre_compile._compile._len",
        "sre_compile._simple",
        "sre_compile._compile_charset",
        "sre_compile._combine_flags",
        "sre_compile._compile.error",
        "sre_parse.SubPattern.__getitem__",
        "<map>.get",
        "sre_compile._compile",
        "sre_compile._compile.iscased",
        "sre_compile._optimize_charset"
    ],
    "sre_compile._compile_info": [
        "<builtin>.min",
        "sre_compile._get_literal_prefix",
        "sre_compile._compile_charset",
        "sre_compile._generate_overlap_table",
        "sre_compile._get_charset_prefix",
        "<list>.extend",
        "<builtin>.len",
        "sre_parse.SubPattern.getwidth",
        "<str>.getwidth",
        "sre_compile._optimize_charset"
    ],
    "sre_compile._get_charset_prefix": [
        "<builtin>.any",
        "<builtin>.range",
        "sre_compile._get_iscased",
        "sre_compile._combine_flags",
        "sre_parse.SubPattern.__len__",
        "sre_parse.SubPattern.__getitem__",
        "<builtin>.map"
    ],
    "sre_compile._get_literal_prefix": [
        "sre_compile._get_literal_prefix",
        "sre_compile._get_iscased",
        "sre_compile._combine_flags",
        "<list>.extend",
        "<builtin>.len"
    ],
    "sre_compile._mk_bitmap": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "sre_compile._optimize_charset": [
        "<builtin>.any",
        "<builtin>.range",
        "sre_compile._bytes_to_codes",
        "<builtin>.bytes",
        "<builtin>.len",
        "<list>.append",
        "<builtin>.bytearray",
        "<builtin>.map",
        "sre_compile._mk_bitmap"
    ],
    "sre_compile._simple": [
        "<builtin>.len",
        "sre_parse.SubPattern.__getitem__",
        "sre_parse.SubPattern.__len__"
    ],
    "sre_compile.compile": [
        "sre_compile.isstring",
        "<map>.items",
        "<builtin>.tuple",
        "sre_compile._code",
        "<builtin>.print",
        "sre_parse.parse",
        "sre_parse.groups"
    ],
    "sre_parse.Pattern.checkgroup": [
        "sre_parse.groups"
    ],
    "sre_parse.Pattern.closegroup": [
        "sre_parse.SubPattern.getwidth"
    ],
    "sre_parse.Pattern.opengroup": [
        "sre_parse.groups"
    ],
    "sre_parse.State.checkgroup": [
        "sre_parse.groups"
    ],
    "sre_parse.State.closegroup": [
        "sre_parse.SubPattern.getwidth"
    ],
    "sre_parse.State.opengroup": [
        "sre_parse.groups"
    ],
    "sre_parse.SubPattern.__getitem__": [
        "sre_parse.SubPattern.__init__",
        "<builtin>.isinstance"
    ],
    "sre_parse.SubPattern.__setitem__": [
        "sre_parse.SubPattern.__getitem__",
        "sre_parse.SubPattern.__len__"
    ],
    "sre_parse.SubPattern.getwidth": [
        "sre_parse.SubPattern.getwidth",
        "<builtin>.max",
        "<builtin>.min"
    ],
    "sre_parse.Tokenizer.__init__": [
        "<builtin>.str",
        "<builtin>.isinstance",
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.get": [
        "sre_parse._parse.__next",
        "sre_parse._parse_flags.__next",
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.getuntil": [
        "<builtin>.len",
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.getwhile": [
        "<builtin>.range",
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse._parse.__next",
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse._class_escape": [
        "<builtin>.ord",
        "sre_parse.Tokenizer.getwhile",
        "<builtin>.len",
        "<builtin>.int",
        "<builtin>.chr"
    ],
    "sre_parse._escape": [
        "<builtin>.ord",
        "sre_parse.Pattern.checklookbehindgroup",
        "sre_parse.Tokenizer.getwhile",
        "<builtin>.len",
        "<builtin>.int",
        "<builtin>.chr",
        "sre_parse.groups",
        "sre_parse.Pattern.checkgroup"
    ],
    "sre_parse._parse": [
        "sre_parse.SubPattern.append",
        "<builtin>.range",
        "sre_parse.SubPattern.__setitem__",
        "sre_parse.Tokenizer.tell",
        "sre_parse._parse_flags",
        "sre_parse.Tokenizer.match",
        "sre_parse._class_escape",
        "sre_parse._escape",
        "sre_parse.Tokenizer.get",
        "sre_parse.SubPattern.__getitem__",
        "sre_parse._uniq",
        "sre_parse.Pattern.opengroup",
        "sre_parse._parse_sub",
        "sre_parse.Tokenizer.seek",
        "sre_parse.Pattern.closegroup",
        "sre_parse.SubPattern.__init__",
        "<builtin>.OverflowError",
        "<builtin>.AssertionError",
        "sre_parse.SubPattern.__len__",
        "<builtin>.len",
        "<builtin>.int",
        "sre_parse.Tokenizer.getuntil"
    ],
    "sre_parse._parse_flags": [
        "<builtin>.len",
        "sre_parse.Tokenizer.get",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse._parse_sub": [
        "sre_parse.SubPattern.append",
        "sre_parse.SubPattern.__len__",
        "<list>.extend",
        "<builtin>.len",
        "sre_parse.Tokenizer.tell",
        "sre_parse.SubPattern.__getitem__",
        "<list>.append",
        "sre_parse._parse",
        "sre_parse.Tokenizer.match",
        "sre_parse.SubPattern.__init__"
    ],
    "sre_parse.parse": [
        "sre_parse.Tokenizer.__init__",
        "sre_parse.fix_flags",
        "sre_parse._parse_sub",
        "sre_parse.Pattern.__init__"
    ],
    "sre_parse.parse_template": [
        "<builtin>.isinstance",
        "sre_parse.addgroup",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.Tokenizer.get",
        "<builtin>.len",
        "<builtin>.IndexError",
        "<builtin>.int",
        "<builtin>.chr"
    ],
    "ssl": [
        "<builtin>.hasattr",
        "ssl.Purpose",
        "collections.namedtuple",
        "enum.__new__",
        "ssl.TLSVersion",
        "ssl.SSLSocket",
        "ssl._ASN1Object",
        "ssl.<dictcomp>",
        "_frozen_importlib._find_and_load",
        "enum.__prepare__",
        "ssl._TLSAlertType",
        "enum.EnumMeta.__setattr__",
        "<builtin>.getattr",
        "_frozen_importlib._handle_fromlist",
        "ssl.SSLObject",
        "ssl.SSLContext",
        "enum.EnumMeta.__getattr__",
        "enum.EnumMeta._convert_",
        "enum.__members__",
        "ssl._TLSContentType",
        "ssl._TLSMessageType"
    ],
    "ssl.Purpose": [
        "enum._EnumDict.__setitem__"
    ],
    "ssl.SSLContext._encode_hostname": [
        "<builtin>.isinstance",
        "encoding.idna.Codec.encode"
    ],
    "ssl.SSLContext.wrap_socket": [
        "ssl._create"
    ],
    "ssl.SSLSocket": [
        "<builtin>.property",
        "ssl._sslcopydoc",
        "<builtin>.classmethod"
    ],
    "ssl.SSLSocket._real_close": [
        "socket.socket._real_close",
        "<builtin>.super"
    ],
    "ssl.SSLSocket.do_handshake": [
        "ssl.SSLSocket._check_connected"
    ],
    "ssl.TLSVersion": [
        "enum._EnumDict.__setitem__"
    ],
    "ssl._TLSAlertType": [
        "enum._EnumDict.__setitem__"
    ],
    "ssl._TLSContentType": [
        "enum._EnumDict.__setitem__"
    ],
    "ssl._TLSMessageType": [
        "enum._EnumDict.__setitem__"
    ],
    "ssl.__new__": [],
    "ssl._create": [
        "ssl.SSLSocket.do_handshake",
        "ssl.SSLContext._encode_hostname",
        "socket.family",
        "socket.socket.__init__",
        "socket.socket.detach",
        "socket.socket.close",
        "socket.type"
    ],
    "ssl.create_default_context": [
        "<builtin>.hasattr",
        "ssl.SSLContext.load_default_certs",
        "<builtin>.TypeError",
        "ssl.verify_mode",
        "ssl.__new__",
        "<builtin>.isinstance"
    ],
    "ssl.verify_mode": [
        "enum.EnumMeta.__call__"
    ],
    "string": [
        "string.Formatter",
        "_frozen_importlib._find_and_load",
        "_frozen_importlib._handle_fromlist",
        "string.Template",
        "string._TemplateMetaclass.__init__",
        "string._TemplateMetaclass"
    ],
    "string.Template.substitute": [
        "string.convert"
    ],
    "string._TemplateMetaclass.__init__": [
        "re.escape",
        "re.compile",
        "enum.IntFlag.__or__",
        "<builtin>.super"
    ],
    "stringprep": [
        "_frozen_importlib._find_and_load"
    ],
    "subprocess": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "subprocess.Popen",
        "_frozen_importlib._find_and_load",
        "subprocess._use_posix_spawn",
        "subprocess.SubprocessError",
        "subprocess.CompletedProcess",
        "subprocess.CalledProcessError",
        "subprocess.TimeoutExpired"
    ],
    "subprocess.CalledProcessError": [
        "<builtin>.property"
    ],
    "subprocess.CalledProcessError.__init__": [],
    "subprocess.CompletedProcess.__init__": [],
    "subprocess.Popen": [
        "<builtin>.property"
    ],
    "subprocess.Popen.__del__": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen.__exit__": [
        "subprocess.Popen.wait"
    ],
    "subprocess.Popen.__init__": [
        "subprocess.Popen._get_handles",
        "warnings.warn",
        "<builtin>.hasattr",
        "subprocess._cleanup",
        "os.close",
        "subprocess.Popen._execute_child",
        "_bootlocale.getpreferredencoding",
        "<builtin>.TypeError",
        "codecs.BufferedIncrementalDecoder.__init__",
        "<builtin>.filter",
        "_io.open",
        "<builtin>.ValueError",
        "<list>.append",
        "<builtin>.bool",
        "io.TextIOWrapper",
        "<builtin>.isinstance"
    ],
    "subprocess.Popen._check_timeout": [
        "subprocess.TimeoutExpired.__init__",
        "time.monotonic"
    ],
    "subprocess.Popen._close_pipe_fds": [
        "contextlib._BaseExitStack.callback",
        "<builtin>.getattr",
        "contextlib.ExitStack.__enter__",
        "contextlib.ExitStack.__exit__",
        "contextlib._BaseExitStack.__init__"
    ],
    "subprocess.Popen._communicate": [
        "subprocess.Popen.wait",
        "<builtin>.hasattr",
        "subprocess.Popen._translate_newlines",
        "<builtin>.RuntimeError",
        "selectors.SelectSelector.register",
        "subprocess.Popen._save_input",
        "selectors._PollLikeSelector.select",
        "subprocess.Popen._check_timeout",
        "selectors.SelectSelector.__init__",
        "selectors._PollLikeSelector.register",
        "selectors.SelectSelector.unregister",
        "<builtin>.len",
        "subprocess.Popen._remaining_time",
        "selectors._PollLikeSelector.unregister",
        "<builtin>.memoryview",
        "selectors.SelectSelector.select",
        "selectors._BaseSelectorImpl.get_map"
    ],
    "subprocess.Popen._execute_child": [
        "<builtin>.hasattr",
        "os.fsencode",
        "<builtin>.bytes",
        "<builtin>.TypeError",
        "<list>.append",
        "<builtin>.list",
        "<builtin>.getattr",
        "<builtin>.issubclass",
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "<builtin>.bytearray",
        "<builtin>.bool",
        "<builtin>.map",
        "<builtin>.sorted",
        "posixpath.dirname",
        "<builtin>.len",
        "<builtin>.set",
        "<builtin>.int",
        "<builtin>.isinstance"
    ],
    "subprocess.Popen._get_devnull": [
        "<builtin>.hasattr"
    ],
    "subprocess.Popen._get_handles": [
        "subprocess.Popen._get_devnull",
        "<builtin>.isinstance"
    ],
    "subprocess.Popen._handle_exitstatus": [],
    "subprocess.Popen._internal_poll": [
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.Popen._posix_spawn": [
        "<builtin>.getattr",
        "<list>.append",
        "subprocess.Popen._close_pipe_fds"
    ],
    "subprocess.Popen._remaining_time": [
        "time.monotonic"
    ],
    "subprocess.Popen._save_input": [],
    "subprocess.Popen._stdin_write": [],
    "subprocess.Popen._translate_newlines": [],
    "subprocess.Popen._try_wait": [],
    "subprocess.Popen._wait": [
        "<builtin>.int",
        "subprocess.Popen._try_wait",
        "<builtin>.min",
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.Popen.communicate": [
        "subprocess.Popen.wait",
        "<list>.count",
        "<builtin>.min",
        "codecs.BufferedIncrementalDecoder.decode",
        "<builtin>.ValueError"
    ],
    "subprocess.Popen.kill": [
        "subprocess.Popen.send_signal"
    ],
    "subprocess.Popen.poll": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen.send_signal": [
        "<builtin>.ValueError"
    ],
    "subprocess.Popen.wait": [
        "<builtin>.min",
        "subprocess.Popen._wait"
    ],
    "subprocess.TimeoutExpired": [
        "<builtin>.property"
    ],
    "subprocess.TimeoutExpired.__init__": [],
    "subprocess._cleanup": [
        "<list>.remove"
    ],
    "subprocess._use_posix_spawn": [
        "<builtin>.len",
        "<builtin>.map",
        "<builtin>.tuple",
        "<builtin>.hasattr"
    ],
    "subprocess.check_output": [
        "subprocess.Popen.__del__",
        "<builtin>.ValueError",
        "subprocess.run"
    ],
    "subprocess.run": [
        "subprocess.Popen.communicate",
        "subprocess.Popen.__exit__",
        "subprocess.Popen.__enter__",
        "subprocess.CompletedProcess.__init__",
        "<builtin>.ValueError",
        "subprocess.Popen.poll",
        "subprocess.Popen.__init__"
    ],
    "tempfile": [
        "<builtin>.hasattr",
        "tempfile._TemporaryFileWrapper",
        "tempfile.SpooledTemporaryFile",
        "tempfile.TemporaryDirectory",
        "tempfile._TemporaryFileCloser",
        "tempfile._RandomNameSequence"
    ],
    "textwrap": [
        "re.compile",
        "textwrap.TextWrapper",
        "<builtin>.print"
    ],
    "textwrap.TextWrapper": [
        "re.escape",
        "re.compile",
        "<builtin>.ord"
    ],
    "textwrap.TextWrapper._split": [],
    "textwrap.TextWrapper._split_chunks": [
        "textwrap.TextWrapper._munge_whitespace",
        "textwrap.TextWrapper._split"
    ],
    "textwrap.TextWrapper.wrap": [
        "textwrap.TextWrapper._wrap_chunks",
        "textwrap.TextWrapper._split_chunks"
    ],
    "textwrap.wrap": [
        "textwrap.TextWrapper.wrap",
        "textwrap.TextWrapper.__init__"
    ],
    "threading": [
        "<builtin>.hasattr",
        "threading._MainThread.__init__",
        "collections",
        "_weakrefset.WeakSet.__init__",
        "itertools.count",
        "collections.namedtuple",
        "<builtin>.set",
        "<list>.append",
        "_threading_local"
    ],
    "threading.Barrier": [
        "<builtin>.property"
    ],
    "threading.Condition.__init__": [
        "_collections.deque",
        "threading.RLock"
    ],
    "threading.Condition.notify": [
        "<builtin>.RuntimeError",
        "threading.Condition._is_owned"
    ],
    "threading.Condition.notify_all": [
        "<builtin>.len",
        "threading.Condition.notify"
    ],
    "threading.Condition.wait": [
        "threading.Condition._acquire_restore",
        "<builtin>.RuntimeError",
        "threading.Condition._release_save",
        "threading.Condition._is_owned"
    ],
    "threading.Event.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Event.clear": [
        "threading.Condition.__enter__",
        "threading.Condition.__exit__"
    ],
    "threading.Event.is_set": [],
    "threading.Event.set": [
        "threading.Condition.__enter__",
        "threading.Condition.__exit__",
        "threading.Condition.notify_all"
    ],
    "threading.Event.wait": [
        "threading.Condition.__enter__",
        "threading.Condition.__exit__",
        "threading.Condition.wait"
    ],
    "threading.RLock": [
        "_thread.RLock",
        "threading._RLock.__init__"
    ],
    "threading.Thread": [
        "<builtin>.property"
    ],
    "threading.Thread.__init__": [
        "threading.Event.__init__",
        "threading.daemon",
        "threading._newname",
        "<builtin>.str",
        "_weakrefset.WeakSet.add",
        "threading.current_thread"
    ],
    "threading.Thread._bootstrap_inner": [
        "threading.Thread.run"
    ],
    "threading.Thread._set_ident": [
        "_thread.get_ident"
    ],
    "threading.Thread._set_native_id": [],
    "threading.Thread._set_tstate_lock": [],
    "threading.Thread._stop": [
        "threading.daemon"
    ],
    "threading.Thread._wait_for_tstate_lock": [
        "threading.Thread._stop"
    ],
    "threading.Thread.is_alive": [
        "threading.Thread._wait_for_tstate_lock",
        "threading.Event.is_set"
    ],
    "threading.Thread.join": [
        "<builtin>.RuntimeError",
        "<builtin>.max",
        "threading.Event.is_set",
        "threading.current_thread",
        "threading.Thread._wait_for_tstate_lock"
    ],
    "threading.Thread.run": [
        "bpytop._runner",
        "bpytop._checker",
        "bpytop._get_key"
    ],
    "threading.Thread.start": [
        "<builtin>.RuntimeError",
        "threading.Event.is_set",
        "threading.Event.wait"
    ],
    "threading._DummyThread.__init__": [
        "threading.Thread._set_native_id",
        "threading.Thread.__init__",
        "threading._newname",
        "threading.Thread._set_ident"
    ],
    "threading._MainThread.__init__": [
        "threading.Thread._set_ident",
        "threading.Thread._set_native_id",
        "threading.Thread.__init__",
        "threading.Event.set",
        "threading.Thread._set_tstate_lock"
    ],
    "threading._RLock.__init__": [],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "threading._newname": [],
    "threading.current_thread": [
        "threading._DummyThread.__init__",
        "_thread.get_ident"
    ],
    "tokenize.detect_encoding": [
        "<str>.match",
        "tokenize.find_cookie",
        "tokenize.read_or_stop"
    ],
    "tokenize.group": [],
    "tokenize.open": [
        "codecs.BufferedIncrementalDecoder.__init__",
        "tokenize.detect_encoding"
    ],
    "trace.Trace.runctx": [
        "bpytop"
    ],
    "traceback": [
        "traceback.StackSummary",
        "traceback.FrameSummary",
        "traceback.TracebackException"
    ],
    "traceback.StackSummary.format": [
        "<builtin>.sorted",
        "<list>.append",
        "traceback.line"
    ],
    "traceback.TracebackException.__init__": [
        "traceback._some_str",
        "<builtin>.issubclass",
        "<builtin>.id",
        "<builtin>.str",
        "traceback.TracebackException.__init__",
        "<builtin>.set",
        "traceback.extract",
        "traceback.TracebackException._load_lines",
        "<builtin>.type"
    ],
    "traceback.TracebackException._load_lines": [
        "traceback.line",
        "traceback.TracebackException._load_lines"
    ],
    "traceback.TracebackException.format": [
        "traceback.StackSummary.format",
        "traceback.TracebackException.format_exception_only",
        "traceback.TracebackException.format"
    ],
    "traceback.TracebackException.format_exception_only": [
        "<builtin>.min",
        "<builtin>.issubclass",
        "traceback._format_final_exc_line",
        "<builtin>.str",
        "<builtin>.len"
    ],
    "traceback._format_final_exc_line": [
        "traceback._some_str"
    ],
    "traceback._some_str": [
        "<builtin>.str",
        "<builtin>.type",
        "urllib.error.URLError.__str__"
    ],
    "traceback.extract": [
        "traceback.walk_tb",
        "linecache.checkcache",
        "linecache.lazycache",
        "traceback.line",
        "traceback.FrameSummary.__init__"
    ],
    "traceback.line": [
        "linecache.getline"
    ],
    "traceback.print_exception": [
        "<builtin>.print",
        "traceback.TracebackException.__init__",
        "<builtin>.type",
        "traceback.TracebackException.format"
    ],
    "types.DynamicClassAttribute.__get__": [
        "enum.name",
        "<builtin>.AttributeError",
        "enum.value"
    ],
    "typing": [
        "typing.SupportsComplex",
        "typing._TypingEmpty",
        "typing.SupportsBytes",
        "typing._TypingEllipsis",
        "typing.NamedTuple",
        "typing.SupportsFloat",
        "typing._GenericAlias.__setattr__",
        "typing._Final",
        "typing._alias",
        "typing.IO",
        "typing._GenericAlias.__init__",
        "typing._TypedDictMeta",
        "typing.SupportsIndex",
        "typing.Generic",
        "typing.TypeVar",
        "typing.io",
        "typing.re",
        "typing.TypeVar.__init__",
        "typing.Protocol",
        "typing.SupportsInt",
        "abc.__new__",
        "typing.inner",
        "typing._SpecialForm.__init__",
        "typing._ProtocolMeta",
        "typing._SpecialForm",
        "typing._GenericAlias",
        "typing.TextIO",
        "typing.TypedDict",
        "typing._Immutable",
        "typing.runtime_checkable",
        "typing.NamedTupleMeta",
        "typing.ForwardRef",
        "typing.BinaryIO",
        "typing.SupportsRound",
        "typing._VariadicGenericAlias",
        "typing.__init_subclass__",
        "typing._GenericAlias.__mro_entries__",
        "typing.__new__",
        "typing.SupportsAbs"
    ],
    "typing.<genexpr>": [
        "typing._type_check"
    ],
    "typing.BinaryIO": [
        "abc.abstractmethod",
        "typing.inner"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing.IO": [
        "abc.abstractmethod",
        "<builtin>.property",
        "typing.inner"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.TextIO": [
        "abc.abstractmethod",
        "<builtin>.property",
        "typing.inner"
    ],
    "typing.TypeVar.__init__": [
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "typing.<genexpr>",
        "typing._type_check",
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.bool"
    ],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._GenericAlias.__hash__": [
        "typing._SpecialForm.__hash__",
        "<builtin>.hash",
        "typing._GenericAlias.__hash__",
        "<builtin>.frozenset"
    ],
    "typing._GenericAlias.__init__": [
        "typing._collect_type_vars",
        "<builtin>.tuple",
        "typing.<genexpr>",
        "<map>.get",
        "typing._GenericAlias.__setattr__",
        "<builtin>.isinstance"
    ],
    "typing._GenericAlias.__mro_entries__": [
        "<builtin>.any",
        "<builtin>.issubclass",
        "typing._GenericAlias.__eq__",
        "<builtin>.tuple",
        "<builtin>.isinstance"
    ],
    "typing._GenericAlias.__setattr__": [
        "<builtin>.setattr",
        "<builtin>.super",
        "typing._is_dunder"
    ],
    "typing._GenericAlias.copy_with": [
        "typing._GenericAlias.__init__"
    ],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._VariadicGenericAlias": [
        "typing._tp_cache"
    ],
    "typing._VariadicGenericAlias.__getitem__": [
        "typing.inner",
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "typing.__class_getitem__": [
        "typing.inner",
        "typing._check_generic",
        "typing.<genexpr>",
        "typing._GenericAlias.__init__"
    ],
    "typing.__getitem__": [
        "typing._subs_tvars",
        "typing.inner",
        "typing._remove_dups_flatten",
        "typing.<genexpr>",
        "typing._check_generic",
        "typing._type_check",
        "typing._GenericAlias.__init__"
    ],
    "typing.__getitem_inner__": [
        "typing._type_check",
        "typing.<genexpr>",
        "typing._GenericAlias.copy_with"
    ],
    "typing.__init_subclass__": [
        "typing._GenericAlias.__eq__",
        "typing._collect_type_vars"
    ],
    "typing.__new__": [
        "typing.<dictcomp>"
    ],
    "typing._alias": [
        "typing._GenericAlias.__init__"
    ],
    "typing._collect_type_vars": [
        "<list>.append",
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "<list>.extend"
    ],
    "typing._remove_dups_flatten": [
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.set",
        "typing._GenericAlias.__hash__",
        "<builtin>.isinstance"
    ],
    "typing._subs_tvars": [
        "<builtin>.tuple",
        "<builtin>.list",
        "<builtin>.enumerate",
        "typing._GenericAlias.copy_with",
        "<builtin>.isinstance"
    ],
    "typing._tp_cache": [
        "functools.decorating_function",
        "<list>.append",
        "functools.lru_cache",
        "functools.wraps",
        "functools.update_wrapper"
    ],
    "typing._type_check": [
        "typing._GenericAlias.__eq__",
        "<builtin>.TypeError",
        "<builtin>.callable",
        "typing._SpecialForm.__eq__",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "typing.inner": [
        "typing._SpecialForm.__hash__",
        "typing._GenericAlias.__hash__",
        "typing.__getitem_inner__",
        "typing.__getitem__",
        "typing.__class_getitem__"
    ],
    "urllib.error": [
        "urllib.error.ContentTooShortError",
        "_frozen_importlib._find_and_load",
        "urllib.error.HTTPError",
        "urllib.error.URLError"
    ],
    "urllib.parse": [
        "urllib.parse._fix_result_transcoding",
        "urllib.parse.Quoter",
        "__init__.namedtuple",
        "<builtin>.bytes",
        "urllib.parse.SplitResultBytes",
        "urllib.parse._ResultMixinStr",
        "re.compile",
        "urllib.parse.SplitResult",
        "urllib.parse._NetlocResultMixinStr",
        "urllib.parse.DefragResultBytes",
        "_frozen_importlib._handle_fromlist",
        "urllib.parse.DefragResult",
        "urllib.parse._ResultMixinBytes",
        "<builtin>.frozenset",
        "urllib.parse.ParseResultBytes",
        "urllib.parse._NetlocResultMixinBytes",
        "urllib.parse.ParseResult",
        "urllib.parse._NetlocResultMixinBase"
    ],
    "urllib.parse._splithost": [
        "re.compile"
    ],
    "urllib.parse._splitport": [
        "re.compile"
    ],
    "urllib.parse._splittype": [
        "re.compile"
    ],
    "urllib.request": [
        "<builtin>.hasattr",
        "urllib.request.CacheFTPHandler",
        "re.compile",
        "urllib.request.ProxyHandler",
        "urllib.request.HTTPPasswordMgr",
        "urllib.request.HTTPErrorProcessor",
        "urllib.request.FileHandler",
        "urllib.request.ProxyBasicAuthHandler",
        "urllib.request.HTTPDefaultErrorHandler",
        "urllib.request.AbstractHTTPHandler",
        "urllib.request.HTTPBasicAuthHandler",
        "urllib.request.ProxyDigestAuthHandler",
        "urllib.request.URLopener",
        "_frozen_importlib._find_and_load",
        "urllib.request.HTTPPasswordMgrWithPriorAuth",
        "urllib.request.HTTPSHandler",
        "<list>.append",
        "urllib.request.BaseHandler",
        "urllib.request.ftpwrapper",
        "urllib.request.Request",
        "urllib.request.HTTPCookieProcessor",
        "urllib.request.AbstractBasicAuthHandler",
        "urllib.request.UnknownHandler",
        "urllib.request.FancyURLopener",
        "urllib.request.OpenerDirector",
        "urllib.request.HTTPRedirectHandler",
        "urllib.request.DataHandler",
        "urllib.request.AbstractDigestAuthHandler",
        "urllib.request.HTTPPasswordMgrWithDefaultRealm",
        "urllib.request.FTPHandler",
        "urllib.request.HTTPDigestAuthHandler",
        "urllib.request.HTTPHandler"
    ],
    "urllib.request.<lambda>": [
        "urllib.request.ProxyHandler.proxy_open"
    ],
    "urllib.request.AbstractBasicAuthHandler": [
        "re.compile"
    ],
    "urllib.request.AbstractHTTPHandler.do_open": [
        "urllib.request.Request.get_method",
        "<builtin>.dict",
        "urllib.error.URLError.__init__",
        "http.client.HTTPConnection.request",
        "http.client.HTTPSConnection.__init__",
        "urllib.request.data",
        "http.client.HTTPConnection.close",
        "http.client.HTTPConnection.set_tunnel",
        "http.client.HTTPConnection.set_debuglevel",
        "urllib.request.Request.has_header"
    ],
    "urllib.request.HTTPSHandler.__init__": [
        "urllib.request.AbstractHTTPHandler.__init__"
    ],
    "urllib.request.HTTPSHandler.https_open": [
        "urllib.request.AbstractHTTPHandler.do_open"
    ],
    "urllib.request.OpenerDirector._call_chain": [
        "<builtin>.getattr",
        "urllib.request.HTTPSHandler.https_open",
        "urllib.request.<lambda>"
    ],
    "urllib.request.OpenerDirector._open": [
        "urllib.request.OpenerDirector._call_chain"
    ],
    "urllib.request.OpenerDirector.add_handler": [
        "<builtin>.hasattr",
        "urllib.request.BaseHandler.__lt__",
        "<builtin>.TypeError",
        "urllib.request.BaseHandler.add_parent",
        "<builtin>.type",
        "<builtin>.int",
        "<builtin>.dir"
    ],
    "urllib.request.OpenerDirector.open": [
        "urllib.request.Request.get_method",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "urllib.request.OpenerDirector._open",
        "urllib.request.data",
        "urllib.request.do_request_",
        "urllib.request.full_url",
        "urllib.request.Request.__init__"
    ],
    "urllib.request.ProxyHandler.__init__": [
        "urllib.request.getproxies",
        "<builtin>.hasattr",
        "<builtin>.setattr"
    ],
    "urllib.request.ProxyHandler.proxy_open": [
        "urllib.request.Request.set_proxy",
        "urllib.parse.unquote",
        "urllib.request.proxy_bypass",
        "urllib.request._parse_proxy"
    ],
    "urllib.request.Request.__init__": [
        "urllib.request.full_url",
        "urllib.request.data",
        "urllib.request.request_host"
    ],
    "urllib.request.Request._parse": [
        "urllib.parse._splithost",
        "<builtin>.ValueError",
        "urllib.parse.unquote",
        "urllib.parse._splittype"
    ],
    "urllib.request.Request.get_method": [
        "<builtin>.getattr",
        "urllib.request.data"
    ],
    "urllib.request.Request.has_proxy": [
        "urllib.request.full_url"
    ],
    "urllib.request._parse_proxy": [
        "<builtin>.ValueError",
        "urllib.parse._splituser",
        "urllib.parse._splittype"
    ],
    "urllib.request._proxy_bypass_macosx_sysconf": [
        "encoding.search_function",
        "re.match",
        "urllib.parse._splitport",
        "fnmatch.fnmatch",
        "encoding.idna.Codec.encode",
        "<builtin>.int",
        "urllib.request.ip2num"
    ],
    "urllib.request.build_opener": [
        "<builtin>.hasattr",
        "urllib.request.OpenerDirector.add_handler",
        "urllib.request.AbstractHTTPHandler.__init__",
        "<builtin>.issubclass",
        "urllib.request.OpenerDirector.__init__",
        "urllib.request.ProxyHandler.__init__",
        "urllib.request.HTTPSHandler.__init__",
        "<builtin>.set",
        "<builtin>.isinstance"
    ],
    "urllib.request.do_request_": [
        "urllib.request.Request.add_unredirected_header",
        "urllib.request.Request.has_header",
        "urllib.request.data",
        "urllib.request.Request.has_proxy"
    ],
    "urllib.request.full_url": [
        "urllib.parse.unwrap",
        "urllib.parse._splittag",
        "urllib.request.Request._parse"
    ],
    "urllib.request.getproxies": [
        "urllib.request.getproxies_environment",
        "urllib.request.getproxies_macosx_sysconf"
    ],
    "urllib.request.getproxies_environment": [
        "_collections_abc.Mapping.__contains__",
        "_collections_abc.Mapping.items",
        "_collections_abc.ItemsView.__iter__"
    ],
    "urllib.request.proxy_bypass": [
        "urllib.request.proxy_bypass_macosx_sysconf",
        "urllib.request.getproxies_environment"
    ],
    "urllib.request.proxy_bypass_macosx_sysconf": [
        "urllib.request._proxy_bypass_macosx_sysconf"
    ],
    "urllib.request.request_host": [
        "urllib.request.full_url",
        "urllib.parse.urlparse"
    ],
    "urllib.request.urlopen": [
        "urllib.request.build_opener",
        "<builtin>.ValueError",
        "urllib.request.OpenerDirector.open"
    ],
    "urllib.response": [
        "urllib.response.addclosehook",
        "urllib.response.addinfo",
        "urllib.response.addinfourl",
        "urllib.response.addbase"
    ],
    "uu": [
        "uu.Error"
    ],
    "warnings.simplefilter": [
        "<builtin>.isinstance",
        "warnings._add_filter"
    ],
    "weakref.WeakValueDictionary.__init__": [
        "<builtin>.set",
        "weakref.WeakValueDictionary.update",
        "_weakref.ref"
    ]
}