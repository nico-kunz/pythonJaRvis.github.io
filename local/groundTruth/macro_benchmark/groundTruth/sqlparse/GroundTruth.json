{
    "<string>": [
        "typing.inner"
    ],
    "__future__": [
        "__future__._Feature.__init__"
    ],
    "_collections_abc.Mapping.__contains__": [],
    "_collections_abc.Mapping.get": [],
    "_collections_abc.MutableMapping.clear": [
        "weakref.WeakKeyDictionary.popitem"
    ],
    "_collections_abc.MutableMapping.pop": [],
    "_collections_abc.Sequence.__contains__": [
        "_collections_abc.Sequence.__iter__"
    ],
    "_collections_abc.Sequence.__iter__": [],
    "_collections_abc.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "_distutils_hack.DistutilsMetaFinder.find_spec": [
        "_distutils_hack.<lambda>"
    ],
    "_threading_local": [
        "contextlib"
    ],
    "_weakrefset.WeakSet.__init__": [
        "_weakrefset.WeakSet.update",
        "<builtin>.set",
        "_weakref.ref"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet.add",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "abc.ABCMeta.__instancecheck__": [
        "abc.ABCMeta.__subclasscheck__"
    ],
    "abc.ABCMeta.__subclasscheck__": [
        "_collections_abc.__subclasshook__",
        "os.__subclasshook__",
        "abc.ABCMeta.__subclasscheck__"
    ],
    "abc.ABCMeta.register": [
        "abc.ABCMeta.__subclasscheck__"
    ],
    "abc.__new__": [
        "typing.__init_subclass__"
    ],
    "argparse": [
        "gettext",
        "os"
    ],
    "argparse.ArgumentError.__init__": [
        "argparse._get_action_name"
    ],
    "argparse.ArgumentParser.__init__": [
        "<builtin>.super",
        "argparse._ActionsContainer.add_argument_group",
        "gettext.gettext",
        "argparse._ActionsContainer.register",
        "argparse._ActionsContainer.add_argument",
        "argparse._ActionsContainer._add_container_actions",
        "argparse._ActionsContainer.__init__",
        "posixpath.basename"
    ],
    "argparse.ArgumentParser._add_action": [
        "argparse._ArgumentGroup._add_action"
    ],
    "argparse.ArgumentParser._check_value": [
        "<builtin>.map",
        "argparse.ArgumentError.__init__",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._get_formatter": [
        "argparse.HelpFormatter.__init__"
    ],
    "argparse.ArgumentParser._get_nargs_pattern": [
        "<str>.replace"
    ],
    "argparse.ArgumentParser._get_option_tuples": [
        "<list>.append",
        "argparse.ArgumentParser.error",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._get_value": [
        "<builtin>.str",
        "<builtin>.getattr",
        "gettext.gettext",
        "argparse.identity",
        "argparse.ArgumentError.__init__",
        "argparse._ActionsContainer._registry_get",
        "<builtin>.callable",
        "<builtin>.repr"
    ],
    "argparse.ArgumentParser._get_values": [
        "<builtin>.isinstance",
        "argparse.ArgumentParser._check_value",
        "<list>.remove",
        "argparse.ArgumentParser._get_value",
        "<builtin>.len"
    ],
    "argparse.ArgumentParser._match_argument": [
        "argparse.ArgumentParser._get_nargs_pattern",
        "gettext.gettext",
        "<builtin>.len",
        "<str>.group",
        "<map>.get",
        "gettext.ngettext",
        "argparse.ArgumentError.__init__",
        "re.match"
    ],
    "argparse.ArgumentParser._match_arguments_partial": [
        "argparse.ArgumentParser._get_nargs_pattern",
        "<list>.extend",
        "<builtin>.len",
        "<builtin>.range",
        "re.match"
    ],
    "argparse.ArgumentParser._parse_known_args": [
        "argparse.ArgumentParser._parse_known_args.consume_optional",
        "argparse.ArgumentParser._get_positional_actions",
        "<map>.setdefault",
        "argparse.consume_positionals",
        "<builtin>.iter",
        "<builtin>.setattr",
        "gettext.gettext",
        "argparse._get_action_name",
        "argparse.ArgumentParser._parse_optional",
        "<builtin>.set",
        "<builtin>.isinstance",
        "<list>.extend",
        "<list>.append",
        "argparse.ArgumentParser._parse_known_args.consume_positionals",
        "<builtin>.hasattr",
        "<builtin>.enumerate",
        "<builtin>.min",
        "<builtin>.getattr",
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser._get_value",
        "argparse.ArgumentParser._read_args_from_files",
        "<builtin>.max"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_optional": [
        "gettext.gettext",
        "<list>.append",
        "argparse.ArgumentParser._match_argument",
        "argparse.ArgumentError.__init__",
        "argparse.ArgumentParser._parse_known_args.take_action"
    ],
    "argparse.ArgumentParser._parse_known_args.consume_positionals": [
        "argparse.ArgumentParser._parse_known_args.take_action",
        "<builtin>.zip",
        "argparse.ArgumentParser._match_arguments_partial",
        "<builtin>.len"
    ],
    "argparse.ArgumentParser._parse_known_args.take_action": [
        "argparse._StoreAction.__call__",
        "gettext.gettext",
        "argparse._StoreConstAction.__call__",
        "argparse._get_action_name",
        "<map>.get",
        "argparse.ArgumentParser._get_values",
        "argparse.ArgumentError.__init__",
        "argparse._HelpAction.__call__"
    ],
    "argparse.ArgumentParser._parse_optional": [
        "argparse.ArgumentParser._get_option_tuples",
        "argparse.ArgumentParser.error",
        "<builtin>.len",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._print_message": [
        "codecs.BufferedIncrementalDecoder.reset",
        "codecs.StreamRecoder.write"
    ],
    "argparse.ArgumentParser._read_args_from_files": [
        "<builtin>.str",
        "argparse.ArgumentParser.error",
        "argparse.ArgumentParser.convert_arg_line_to_args",
        "<builtin>.open",
        "argparse.ArgumentParser._read_args_from_files",
        "<list>.extend",
        "<list>.append"
    ],
    "argparse.ArgumentParser.error": [
        "argparse.ArgumentParser.print_usage",
        "argparse.ArgumentParser.exit",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.exit": [
        "argparse.ArgumentParser._print_message"
    ],
    "argparse.ArgumentParser.format_help": [
        "argparse.HelpFormatter.add_usage",
        "argparse.HelpFormatter.add_arguments",
        "argparse.HelpFormatter.add_text",
        "argparse.HelpFormatter.start_section",
        "argparse.ArgumentParser._get_formatter",
        "argparse.HelpFormatter.end_section",
        "argparse.HelpFormatter.format_help"
    ],
    "argparse.ArgumentParser.format_usage": [
        "argparse.HelpFormatter.format_help",
        "argparse.HelpFormatter.add_usage",
        "argparse.ArgumentParser._get_formatter"
    ],
    "argparse.ArgumentParser.parse_args": [
        "argparse.ArgumentParser.parse_known_args",
        "argparse.ArgumentParser.error",
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.parse_known_args": [
        "argparse.ArgumentParser._parse_known_args",
        "<builtin>.setattr",
        "<builtin>.getattr",
        "<builtin>.str",
        "<builtin>.list",
        "argparse.ArgumentParser.error",
        "argparse.Namespace.__init__",
        "<list>.extend",
        "<builtin>.delattr",
        "<builtin>.hasattr"
    ],
    "argparse.ArgumentParser.print_help": [
        "argparse.ArgumentParser._print_message",
        "argparse.ArgumentParser.format_help"
    ],
    "argparse.ArgumentParser.print_usage": [
        "argparse.ArgumentParser._print_message",
        "argparse.ArgumentParser.format_usage"
    ],
    "argparse.HelpFormatter.__init__": [
        "re.compile",
        "<builtin>.max",
        "shutil.get_terminal_size",
        "argparse._Section.__init__",
        "<builtin>.min"
    ],
    "argparse.HelpFormatter._expand_help": [
        "<builtin>.str",
        "<builtin>.list",
        "argparse.HelpFormatter._get_help_string",
        "<builtin>.dict",
        "<builtin>.vars",
        "<builtin>.hasattr"
    ],
    "argparse.HelpFormatter._fill_text": [
        "textwrap.fill"
    ],
    "argparse.HelpFormatter._format_action_invocation": [
        "argparse.format",
        "argparse.HelpFormatter._metavar_formatter",
        "argparse.HelpFormatter._format_args",
        "argparse.HelpFormatter._get_default_metavar_for_positional",
        "argparse.HelpFormatter._get_default_metavar_for_optional"
    ],
    "argparse.HelpFormatter._format_args": [
        "argparse.format",
        "argparse.HelpFormatter._metavar_formatter.format",
        "argparse.HelpFormatter._metavar_formatter",
        "<builtin>.range",
        "<builtin>.ValueError"
    ],
    "argparse.HelpFormatter._indent": [],
    "argparse.HelpFormatter._join_parts": [],
    "argparse.HelpFormatter._metavar_formatter": [
        "<builtin>.str"
    ],
    "argparse.HelpFormatter._metavar_formatter.format": [
        "<builtin>.isinstance"
    ],
    "argparse.HelpFormatter._split_lines": [
        "textwrap.wrap"
    ],
    "argparse.HelpFormatter.add_arguments": [
        "argparse.HelpFormatter.add_argument"
    ],
    "argparse.HelpFormatter.add_text": [
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter.add_usage": [
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter.end_section": [
        "argparse.HelpFormatter._dedent"
    ],
    "argparse.HelpFormatter.format_help": [
        "argparse._Section.format_help"
    ],
    "argparse.HelpFormatter.start_section": [
        "argparse.HelpFormatter._add_item",
        "argparse.HelpFormatter._indent",
        "argparse.HelpFormatter._Section.__init__"
    ],
    "argparse.Namespace.__init__": [
        "<builtin>.setattr"
    ],
    "argparse._ActionsContainer.__init__": [
        "argparse._ActionsContainer._get_handler",
        "argparse._ActionsContainer.register",
        "<builtin>.super",
        "re.compile"
    ],
    "argparse._ActionsContainer._add_action": [
        "argparse._ActionsContainer._check_conflict"
    ],
    "argparse._ActionsContainer._add_container_actions": [
        "argparse._ActionsContainer.add_argument_group",
        "argparse._ActionsContainer.add_mutually_exclusive_group",
        "gettext.gettext",
        "<map>.get",
        "<map>._add_action",
        "<builtin>.ValueError"
    ],
    "argparse._ActionsContainer._check_conflict": [
        "argparse._ActionsContainer._get_handler",
        "<list>.append"
    ],
    "argparse._ActionsContainer._get_handler": [
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._get_optional_kwargs": [
        "gettext.gettext",
        "<list>.append",
        "<builtin>.len",
        "<builtin>.dict",
        "<builtin>.ValueError"
    ],
    "argparse._ActionsContainer._get_positional_kwargs": [
        "<builtin>.dict",
        "<builtin>.TypeError",
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._pop_action_class": [
        "argparse._ActionsContainer._registry_get"
    ],
    "argparse._ActionsContainer.add_argument": [
        "argparse._CountAction.__init__",
        "argparse._ActionsContainer._get_optional_kwargs",
        "argparse._ArgumentGroup._add_action",
        "argparse.ArgumentParser._get_formatter",
        "argparse.HelpFormatter._format_args",
        "argparse._ActionsContainer._get_positional_kwargs",
        "argparse._StoreAction.__init__",
        "argparse._AppendAction.__init__",
        "<builtin>.ValueError",
        "<builtin>.len",
        "argparse._VersionAction.__init__",
        "<builtin>.hasattr",
        "argparse._ActionsContainer._registry_get",
        "argparse._StoreConstAction.__init__",
        "argparse.ArgumentParser._add_action",
        "argparse._StoreFalseAction.__init__",
        "argparse._ActionsContainer._pop_action_class",
        "argparse._HelpAction.__init__",
        "<builtin>.callable",
        "argparse._StoreTrueAction.__init__"
    ],
    "argparse._ActionsContainer.add_argument_group": [
        "argparse._ArgumentGroup.__init__"
    ],
    "argparse._ActionsContainer.add_mutually_exclusive_group": [
        "argparse._MutuallyExclusiveGroup.__init__"
    ],
    "argparse._AppendAction.__init__": [
        "<builtin>.ValueError",
        "<builtin>.super",
        "argparse.Action.__init__"
    ],
    "argparse._ArgumentGroup.__init__": [
        "argparse._ActionsContainer.__init__",
        "<builtin>.super"
    ],
    "argparse._ArgumentGroup._add_action": [
        "<builtin>.super",
        "argparse._ActionsContainer._add_action"
    ],
    "argparse._CountAction.__init__": [
        "<builtin>.super",
        "argparse.Action.__init__"
    ],
    "argparse._HelpAction.__call__": [
        "argparse.ArgumentParser.print_help",
        "argparse.ArgumentParser.exit"
    ],
    "argparse._HelpAction.__init__": [
        "<builtin>.super",
        "argparse.Action.__init__"
    ],
    "argparse._MutuallyExclusiveGroup.__init__": [
        "<builtin>.super"
    ],
    "argparse._Section.format_help": [
        "argparse.HelpFormatter._join_parts",
        "argparse.HelpFormatter._dedent",
        "argparse.HelpFormatter._indent"
    ],
    "argparse._StoreAction.__init__": [
        "<builtin>.ValueError",
        "<builtin>.super",
        "argparse.Action.__init__"
    ],
    "argparse._StoreConstAction.__init__": [
        "<builtin>.super",
        "argparse.Action.__init__"
    ],
    "argparse._StoreFalseAction.__init__": [
        "argparse._StoreConstAction.__init__",
        "<builtin>.super"
    ],
    "argparse._StoreTrueAction.__init__": [
        "argparse._StoreConstAction.__init__",
        "<builtin>.super"
    ],
    "argparse._VersionAction.__init__": [
        "<builtin>.super",
        "argparse.Action.__init__"
    ],
    "argparse._get_action_name": [],
    "argparse.consume_positionals": [
        "argparse.ArgumentParser._parse_known_args.take_action",
        "argparse.ArgumentParser._match_arguments_partial"
    ],
    "bisect": [],
    "calendar.Calendar.__init__": [
        "calendar.Calendar.setfirstweekday"
    ],
    "codecs": [
        "codecs.EncodedFile",
        "<builtin>.SystemError"
    ],
    "codecs.BufferedIncrementalDecoder.__init__": [
        "codecs.IncrementalDecoder.__init__"
    ],
    "codecs.BufferedIncrementalDecoder.reset": [
        "codecs.IncrementalDecoder.reset"
    ],
    "codecs.EncodedFile": [
        "codecs.StreamRecoder.__init__"
    ],
    "collections": [
        "heapq",
        "keyword"
    ],
    "collections.<lambda1>": [
        "<builtin>.property"
    ],
    "collections.ChainMap": [
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.classmethod",
        "reprlib.recursive_repr",
        "<builtin>.property"
    ],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "collections.OrderedDict": [
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.classmethod",
        "<builtin>.object",
        "reprlib.recursive_repr"
    ],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "collections.namedtuple": [
        "<builtin>.classmethod",
        "<builtin>.exec",
        "<builtin>.tuple",
        "collections.<lambda1>",
        "<builtin>.reversed",
        "<builtin>.zip",
        "<builtin>.TypeError",
        "<builtin>.set",
        "<builtin>.ValueError",
        "<builtin>.map",
        "<builtin>.isinstance",
        "<builtin>.str",
        "<str>.split",
        "<builtin>.len",
        "<str>.join",
        "<builtin>.dict",
        "<str>.replace",
        "<builtin>.enumerate",
        "<builtin>.type",
        "<builtin>.repr",
        "<builtin>.list"
    ],
    "contextlib.AbstractAsyncContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib.AbstractContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "copyreg.pickle": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "copyreg.constructor"
    ],
    "datetime": [
        "datetime.tzinfo",
        "datetime._days_before_year",
        "datetime.date",
        "datetime.timezone",
        "datetime.timedelta",
        "datetime.datetime",
        "datetime._create",
        "datetime.timedelta.__neg__",
        "datetime.time"
    ],
    "datetime.__new__": [
        "datetime._check_tzinfo_arg",
        "datetime._check_time_fields",
        "datetime._check_date_fields"
    ],
    "datetime._check_date_fields": [
        "datetime._days_in_month",
        "<builtin>.ValueError",
        "datetime._check_int_field"
    ],
    "datetime._check_time_fields": [
        "<builtin>.ValueError",
        "datetime._check_int_field"
    ],
    "datetime.timedelta.__neg__": [
        "datetime.__new__"
    ],
    "datetime.timezone": [
        "datetime.timedelta.__neg__",
        "<builtin>.object",
        "datetime.__new__"
    ],
    "decimal": [],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "email._policybase._extend_docstrings": [
        "<builtin>.getattr",
        "email._policybase._append_doc"
    ],
    "email.errors": [],
    "encodings.normalize_encoding": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "<list>.append"
    ],
    "encodings.search_function": [
        "<builtin>.isinstance",
        "<builtin>.__import__",
        "encodings.gbk.getregentry",
        "<builtin>.len",
        "encodings.unicode_escape.getregentry",
        "encodings.normalize_encoding",
        "encodings.cp1251.getregentry",
        "<builtin>.callable"
    ],
    "encodings.unicode_escape": [
        "encodings.unicode_escape.StreamReader",
        "encodings.unicode_escape.Codec",
        "encodings.unicode_escape.IncrementalEncoder",
        "encodings.unicode_escape.StreamWriter",
        "encodings.unicode_escape.IncrementalDecoder"
    ],
    "encodings.unicode_escape.getregentry": [],
    "enum": [
        "<builtin>.object",
        "types"
    ],
    "enum.Enum": [
        "<builtin>.classmethod",
        "types.DynamicClassAttribute.__init__"
    ],
    "enum.EnumMeta": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "enum.EnumMeta._convert_": [
        "<builtin>.vars",
        "enum.<lambda>"
    ],
    "enum.EnumMeta._create_": [
        "<builtin>.isinstance",
        "enum._get_mixins_",
        "enum._generate_next_value_",
        "enum.__prepare__",
        "<builtin>.enumerate"
    ],
    "enum.__prepare__": [
        "enum._check_for_existing_members",
        "enum._EnumDict.__init__",
        "enum._EnumDict.__setitem__",
        "enum._get_mixins_"
    ],
    "enum._create_pseudo_member_": [
        "enum._decompose"
    ],
    "enum._decompose": [
        "types.DynamicClassAttribute.__get__",
        "enum.<lambda>",
        "<builtin>.list",
        "<builtin>.len"
    ],
    "enum._find_new_": [
        "enum.EnumMeta.__getattr__"
    ],
    "enum._get_mixins_": [
        "enum._find_data_type"
    ],
    "enum._make_class_unpicklable": [
        "enum.EnumMeta.__setattr__"
    ],
    "enum._missing_": [
        "enum._create_pseudo_member_"
    ],
    "enum._power_of_two": [
        "enum._high_bit"
    ],
    "fnmatch._compile_pattern": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "fnmatch.translate",
        "re.compile",
        "<builtin>.bytes"
    ],
    "fnmatch.fnmatch": [
        "fnmatch.fnmatchcase",
        "posixpath.normcase"
    ],
    "fnmatch.fnmatchcase": [
        "fnmatch._compile_pattern"
    ],
    "fnmatch.translate": [
        "re.escape",
        "<builtin>.len"
    ],
    "functools": [
        "abc",
        "<builtin>.object",
        "collections.namedtuple",
        "collections"
    ],
    "functools._HashedSeq.__init__": [
        "<builtin>.hash"
    ],
    "functools._c3_mro": [
        "<builtin>.issubclass",
        "<builtin>.list",
        "<builtin>.reversed",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.any",
        "functools._c3_merge",
        "<builtin>.enumerate"
    ],
    "functools._compose_mro": [
        "<builtin>.issubclass",
        "functools._c3_mro",
        "<builtin>.set"
    ],
    "functools._find_impl": [
        "<builtin>.issubclass",
        "<builtin>.RuntimeError",
        "functools._compose_mro"
    ],
    "functools._lru_cache_wrapper": [
        "<builtin>.object",
        "_thread.RLock"
    ],
    "functools._lru_cache_wrapper.wrapper": [
        "functools._make_key"
    ],
    "functools._make_key": [
        "<builtin>.tuple",
        "<builtin>.type",
        "functools._HashedSeq.__init__",
        "<builtin>.len"
    ],
    "functools.decorating_function": [
        "functools.update_wrapper"
    ],
    "functools.dispatch": [
        "weakref.WeakKeyDictionary.__getitem__",
        "functools._find_impl",
        "weakref.WeakKeyDictionary.__setitem__"
    ],
    "functools.lru_cache": [
        "<builtin>.isinstance",
        "functools._lru_cache_wrapper",
        "<builtin>.TypeError",
        "functools.update_wrapper",
        "<builtin>.callable"
    ],
    "functools.lru_cache.decorating_function": [
        "functools._lru_cache_wrapper",
        "functools.update_wrapper"
    ],
    "functools.partial": [
        "reprlib.recursive_repr.decorating_function",
        "reprlib.recursive_repr"
    ],
    "functools.partialmethod": [
        "<builtin>.property"
    ],
    "functools.register": [
        "typing.get_type_hints",
        "_collections_abc.MutableMapping.clear"
    ],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.update_wrapper": [
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "genericpath._splitext": [
        "<builtin>.max"
    ],
    "gettext": [
        "<builtin>.enumerate",
        "posixpath.join",
        "ntpath.join",
        "re.compile"
    ],
    "gettext.NullTranslations.__init__": [
        "gettext.NullTranslations._parse"
    ],
    "gettext._expand_lang": [
        "<list>.append",
        "<list>.reverse",
        "<builtin>.range",
        "locale.normalize"
    ],
    "gettext.dgettext": [
        "<map>.get",
        "gettext.NullTranslations.gettext",
        "gettext.translation",
        "<map>.gettext"
    ],
    "gettext.find": [
        "_collections_abc.Mapping.get",
        "<list>.append",
        "gettext._expand_lang",
        "genericpath.exists",
        "posixpath.join"
    ],
    "gettext.gettext": [
        "gettext.dgettext"
    ],
    "gettext.ngettext": [
        "gettext.dngettext"
    ],
    "gettext.translation": [
        "<map>.setdefault",
        "gettext.NullTranslations.__init__",
        "warnings.catch_warnings.__init__",
        "<builtin>.open",
        "<map>.add_fallback",
        "posixpath.abspath",
        "<map>.get",
        "<builtin>.FileNotFoundError",
        "gettext.find"
    ],
    "glob": [
        "re.compile"
    ],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "linecache.getline": [
        "<builtin>.len",
        "linecache.getlines"
    ],
    "linecache.getlines": [
        "linecache.updatecache",
        "<builtin>.len"
    ],
    "linecache.updatecache": [
        "<str>.startswith",
        "codecs.BufferedIncrementalDecoder.decode",
        "<str>.endswith",
        "linecache.lazycache",
        "<builtin>.len",
        "posixpath.isabs",
        "tokenize.open",
        "posixpath.join"
    ],
    "locale": [
        "<builtin>.globals",
        "<map>.setdefault",
        "encodings.aliases",
        "<map>.items",
        "locale._print_locale",
        "<builtin>.sorted",
        "<builtin>.print",
        "<builtin>.hasattr",
        "locale._test"
    ],
    "locale._append_modifier": [
        "locale._replace_encoding",
        "<map>.partition"
    ],
    "locale._build_localename": [
        "<builtin>.TypeError"
    ],
    "locale._parse_localename": [
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "locale.normalize"
    ],
    "locale._print_locale": [
        "locale.setlocale",
        "locale.getdefaultlocale",
        "locale.getlocale",
        "locale.resetlocale",
        "<builtin>.print",
        "locale._print_locale._init_categories"
    ],
    "locale._print_locale._init_categories": [
        "<builtin>.globals"
    ],
    "locale._replace_encoding": [
        "<str>.lower",
        "<map>.get",
        "<str>.replace",
        "encodings.normalize_encoding"
    ],
    "locale._test": [
        "locale.format_string",
        "<builtin>.print",
        "locale.setlocale"
    ],
    "locale.format_string": [
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<builtin>.list"
    ],
    "locale.getdefaultlocale": [
        "<builtin>.int",
        "locale._parse_localename"
    ],
    "locale.getlocale": [
        "locale.setlocale",
        "<builtin>.TypeError",
        "locale._parse_localename"
    ],
    "locale.normalize": [
        "locale._append_modifier",
        "locale._replace_encoding",
        "<map>.get",
        "<str>.replace"
    ],
    "locale.resetlocale": [
        "locale._build_localename",
        "locale.setlocale",
        "locale.getdefaultlocale"
    ],
    "locale.setlocale": [
        "<builtin>.isinstance"
    ],
    "ntpath": [
        "<builtin>.hasattr",
        "genericpath"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "ntpath.isabs": [
        "<builtin>.isinstance",
        "<str>.startswith",
        "ntpath._get_bothseps",
        "<builtin>.len",
        "ntpath.splitdrive",
        "<str>.replace"
    ],
    "ntpath.join": [
        "<builtin>.isinstance",
        "genericpath._check_arg_types",
        "ntpath.splitdrive",
        "os._fspath",
        "<builtin>.map"
    ],
    "ntpath.split": [
        "ntpath.splitdrive",
        "ntpath._get_bothseps",
        "<builtin>.len",
        "os._fspath"
    ],
    "ntpath.splitdrive": [
        "<builtin>.isinstance",
        "<str>.find",
        "<builtin>.len",
        "<str>.replace",
        "os._fspath"
    ],
    "numbers": [
        "abc.ABCMeta.register",
        "numbers.Rational",
        "abc.__new__",
        "numbers.Integral",
        "numbers.Complex",
        "numbers.Real",
        "numbers.Number"
    ],
    "numbers.Complex": [
        "abc.abstractmethod"
    ],
    "numbers.Integral": [
        "abc.abstractmethod"
    ],
    "numbers.Rational": [
        "abc.abstractmethod"
    ],
    "numbers.Real": [
        "abc.abstractmethod"
    ],
    "os": [
        "<builtin>.globals",
        "<builtin>.ImportError",
        "os._fscodec",
        "os._Environ.__init__",
        "stat",
        "<list>.extend",
        "<list>.append",
        "posixpath",
        "<builtin>.set",
        "ntpath",
        "os._add"
    ],
    "os.PathLike": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "os._Environ.__getitem__": [
        "<builtin>.KeyError",
        "os.decode",
        "os.encode"
    ],
    "os.__subclasshook__": [
        "_collections_abc._check_methods"
    ],
    "os._createenviron": [
        "os._Environ.__init__",
        "os._createenviron.encodekey"
    ],
    "os._createenviron.encode": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.encode"
    ],
    "os._exists": [
        "<builtin>.globals"
    ],
    "os.getenv": [
        "_collections_abc.Mapping.get"
    ],
    "os.makedirs": [
        "<builtin>.isinstance",
        "genericpath.isdir",
        "posixpath.split",
        "genericpath.exists",
        "<builtin>.bytes",
        "pathlib.PurePath.__fspath__"
    ],
    "pathlib.Path._make_child_relpath": [
        "pathlib._from_parsed_parts"
    ],
    "pathlib.Path._opener": [
        "pathlib.PurePath.__fspath__"
    ],
    "pathlib.Path.stat": [
        "pathlib.PurePath.__fspath__"
    ],
    "pathlib.Path.symlink_to": [
        "pathlib.symlink"
    ],
    "pathlib.Path.unlink": [
        "pathlib.PurePath.__fspath__"
    ],
    "pathlib.PurePath.__eq__": [
        "<builtin>.isinstance",
        "pathlib._cparts"
    ],
    "pathlib.PurePath.__fspath__": [
        "pathlib.PurePath.__str__",
        "<builtin>.str"
    ],
    "pathlib.PurePath.__hash__": [
        "pathlib._cparts",
        "<builtin>.tuple",
        "<builtin>.hash"
    ],
    "pathlib.PurePath.__str__": [
        "pathlib._format_parsed_parts"
    ],
    "pathlib.PurePath.__truediv__": [
        "pathlib.PurePath._make_child"
    ],
    "pathlib.PurePath._make_child": [
        "pathlib._from_parsed_parts",
        "pathlib._parse_args",
        "pathlib._Flavour.join_parsed_parts"
    ],
    "pathlib.PurePath.joinpath": [
        "pathlib.PurePath._make_child"
    ],
    "pathlib.PurePath.relative_to": [
        "pathlib.PurePath.__str__",
        "<builtin>.str",
        "pathlib._format_parsed_parts",
        "<builtin>.TypeError",
        "pathlib._PosixFlavour.casefold_parts",
        "<builtin>.len",
        "pathlib._parse_args",
        "pathlib._from_parsed_parts",
        "<builtin>.ValueError"
    ],
    "pathlib.PurePath.with_suffix": [
        "pathlib.name",
        "<builtin>.len",
        "pathlib._from_parsed_parts",
        "<builtin>.ValueError",
        "pathlib.suffix"
    ],
    "pathlib._Flavour.parse_parts": [
        "<builtin>.reversed",
        "pathlib._PosixFlavour.splitroot"
    ],
    "pathlib._PathParents.__getitem__": [
        "<builtin>.IndexError",
        "pathlib._PathParents.__len__",
        "pathlib._from_parsed_parts",
        "<builtin>.len"
    ],
    "pathlib._PosixFlavour.resolve": [
        "pathlib.PurePath.__str__",
        "pathlib.PurePath.is_absolute",
        "pathlib._resolve",
        "<builtin>.str"
    ],
    "pathlib.__new__": [
        "pathlib._from_parts",
        "pathlib.Path._init"
    ],
    "pathlib._cparts": [
        "pathlib._PosixFlavour.casefold_parts"
    ],
    "pathlib._force_symlink": [
        "pathlib.Path.unlink",
        "pathlib.Path.symlink_to",
        "pathlib.PurePath.joinpath"
    ],
    "pathlib._from_parsed_parts": [
        "pathlib.Path._init",
        "pathlib.PurePath._init"
    ],
    "pathlib._from_parts": [
        "pathlib.PurePath._init",
        "pathlib._parse_args"
    ],
    "pathlib._parse_args": [
        "pathlib._Flavour.parse_parts"
    ],
    "pathlib._resolve": [
        "pathlib._resolve",
        "pathlib._NormalAccessor.readlink"
    ],
    "pathlib.suffix": [
        "pathlib.name"
    ],
    "pathlib.symlink": [
        "pathlib.PurePath.__fspath__"
    ],
    "pdb": [
        "pdb.Restart",
        "pdb.Pdb",
        "pdb._rstr"
    ],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "posixpath._joinrealpath": [
        "<builtin>.isinstance",
        "posixpath.islink",
        "posixpath.isabs",
        "posixpath.split",
        "posixpath.join"
    ],
    "posixpath.abspath": [
        "<builtin>.isinstance",
        "posixpath.join",
        "posixpath.normpath",
        "posixpath.isabs"
    ],
    "posixpath.basename": [
        "posixpath._get_sep",
        "os._fspath"
    ],
    "posixpath.isabs": [
        "posixpath._get_sep",
        "<str>.startswith"
    ],
    "posixpath.join": [
        "posixpath._get_sep",
        "genericpath._check_arg_types",
        "<builtin>.map"
    ],
    "posixpath.normcase": [],
    "posixpath.normpath": [
        "<builtin>.isinstance",
        "<str>.startswith",
        "<str>.split",
        "<list>.pop",
        "<list>.append"
    ],
    "posixpath.split": [
        "<builtin>.len",
        "posixpath._get_sep",
        "pathlib.PurePath.__fspath__"
    ],
    "re": [
        "<builtin>.globals",
        "<builtin>.chr",
        "functools",
        "functools.lru_cache.decorating_function",
        "sre_compile",
        "<builtin>.type",
        "enum",
        "copyreg.pickle",
        "functools._lru_cache_wrapper.wrapper",
        "functools.lru_cache"
    ],
    "re._compile": [
        "<builtin>.isinstance",
        "sre_compile.compile",
        "<builtin>.iter",
        "<builtin>.TypeError",
        "sre_compile.isstring",
        "<builtin>.len",
        "<builtin>.type",
        "<builtin>.next",
        "enum.IntFlag.__and__",
        "<builtin>.ValueError",
        "types.DynamicClassAttribute.__get__"
    ],
    "re.compile": [
        "re._compile"
    ],
    "re.escape": [
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "re.match": [
        "re._compile",
        "<str>.match"
    ],
    "re.search": [
        "re._compile",
        "<str>.search"
    ],
    "re.sub": [
        "re._compile",
        "<str>.sub"
    ],
    "reprlib": [
        "reprlib.Repr.__init__"
    ],
    "reprlib.Repr.repr": [
        "reprlib.Repr.repr1"
    ],
    "reprlib.Repr.repr1": [
        "<builtin>.getattr",
        "reprlib.Repr.repr_list",
        "reprlib.Repr.repr_tuple",
        "reprlib.Repr.repr_int",
        "<builtin>.hasattr",
        "reprlib.Repr.repr_str",
        "<builtin>.type"
    ],
    "reprlib.Repr.repr_list": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_tuple": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "selectors": [
        "<builtin>.globals",
        "selectors.KqueueSelector",
        "selectors.BaseSelector",
        "selectors.PollSelector",
        "selectors._SelectorMapping",
        "selectors.SelectSelector",
        "collections.namedtuple",
        "selectors._PollLikeSelector",
        "selectors._BaseSelectorImpl",
        "<builtin>.hasattr"
    ],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "shutil.get_terminal_size": [
        "<builtin>.int",
        "os._Environ.__getitem__"
    ],
    "signal": [
        "<builtin>.globals",
        "enum.EnumMeta._convert_",
        "functools.wraps",
        "functools.update_wrapper"
    ],
    "socket": [
        "<builtin>.object",
        "enum.EnumMeta._convert_",
        "<builtin>.getattr",
        "socket._GiveupOnSendfile",
        "os._get_exports_list",
        "abc.__new__",
        "<builtin>.hasattr",
        "socket.SocketIO",
        "socket.socket"
    ],
    "sqlparse": [
        "sqlparse.engine",
        "sqlparse.filters",
        "sqlparse.formatter",
        "sqlparse.sql",
        "sqlparse.tokens",
        "sqlparse.cli"
    ],
    "sqlparse.cli": [
        "sqlparse.exceptions",
        "sqlparse"
    ],
    "sqlparse.cli._error": [
        "codecs.BufferedIncrementalDecoder.reset",
        "sys.stderr.write"
    ],
    "sqlparse.cli.create_parser": [
        "argparse.ArgumentParser.__init__",
        "argparse._ActionsContainer.add_argument",
        "argparse._ActionsContainer.add_argument_group",
        "<str>.join",
        "<str>.format"
    ],
    "sqlparse.cli.main": [
        "io.TextIOWrapper",
        "<str>.format",
        "codecs.IncrementalDecoder.__init__",
        "codecs.IncrementalEncoder.__init__",
        "<builtin>.vars",
        "codecs.BufferedIncrementalDecoder.reset",
        "codecs.StreamRecoder.write",
        "codecs.BufferedIncrementalDecoder.__init__",
        "sqlparse.format",
        "sys.stdout.write",
        "sys.stdout.flush",
        "sqlparse.formatter.validate_options",
        "<builtin>.open",
        "sqlparse.cli.create_parser",
        "io.TextIOWrapper.__init__",
        "sys.stdout.close",
        "sqlparse.cli._error",
        "encodings.search_function",
        "codecs.BufferedIncrementalDecoder.decode",
        "encodings.cp1251.IncrementalDecoder.decode",
        "_io.TextIOWrapper",
        "argparse.ArgumentParser.parse_args"
    ],
    "sqlparse.engine.filter_stack": [
        "sqlparse.engine.statement_splitter",
        "sqlparse.engine.grouping",
        "sqlparse.lexer",
        "sqlparse.engine.filter_stack.FilterStack"
    ],
    "sqlparse.filters.tokens": [
        "sqlparse.tokens",
        "sqlparse.filters.tokens.TruncateStringFilter",
        "sqlparse.filters.tokens.IdentifierCaseFilter",
        "sqlparse.filters.tokens._CaseFilter",
        "sqlparse.filters.tokens.KeywordCaseFilter"
    ],
    "sqlparse.engine.filter_stack.FilterStack.run": [
        "sqlparse.engine.grouping.group",
        "sqlparse.engine.statement_splitter.StatementSplitter.__init__",
        "sqlparse.filters.others.StripCommentsFilter.process",
        "sqlparse.filters.right_margin.RightMarginFilter.process",
        "sqlparse.lexer.tokenize",
        "sqlparse.filters.output.OutputFilter.process",
        "sqlparse.engine.statement_splitter.StatementSplitter.process",
        "sqlparse.filters.others.SpacesAroundOperatorsFilter.process",
        "sqlparse.filters.others.process",
        "sqlparse.filters.others.StripWhitespaceFilter.process",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter.process",
        "sqlparse.filters.reindent.ReindentFilter.process"
    ],
    "sqlparse.engine.grouping": [
        "sqlparse.utils.recurse.wrap",
        "sqlparse.utils.recurse",
        "sqlparse.sql",
        "sqlparse.tokens",
        "sqlparse.utils"
    ],
    "sqlparse.engine.grouping.<lambda>": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping._group": [
        "sqlparse.engine.grouping.group_tzcasts.valid_next",
        "sqlparse.engine.grouping.group_typed_literal.post",
        "sqlparse.engine.grouping.<lambda1>",
        "sqlparse.engine.grouping._group",
        "sqlparse.engine.grouping.group_as.valid_prev",
        "sqlparse.engine.grouping.group_assignment.match",
        "sqlparse.engine.grouping.group_as.match",
        "sqlparse.engine.grouping.group_period.valid_next",
        "sqlparse.engine.grouping.group_assignment.valid",
        "sqlparse.engine.grouping.group_typecasts.match",
        "sqlparse.engine.grouping.group_tzcasts.match",
        "sqlparse.engine.grouping.group_operator.valid",
        "sqlparse.engine.grouping.group_operator.match",
        "sqlparse.engine.grouping.group_typed_literal.match_to_extend",
        "sqlparse.engine.grouping.group_comparison.match",
        "sqlparse.engine.grouping.group_typed_literal.match",
        "sqlparse.engine.grouping.group_identifier_list.post",
        "sqlparse.engine.grouping.group_period.match",
        "<builtin>.isinstance",
        "sqlparse.engine.grouping.group_tzcasts.valid_prev",
        "sqlparse.engine.grouping.group_typed_literal.valid_next",
        "sqlparse.engine.grouping.group_identifier_list.valid",
        "sqlparse.engine.grouping.group_as.post",
        "sqlparse.engine.grouping.group_comparison.post",
        "sqlparse.sql.TokenList.token_next",
        "sqlparse.engine.grouping.group_operator.post",
        "sqlparse.engine.grouping.group_arrays.valid_next",
        "sqlparse.engine.grouping.<lambda2>",
        "sqlparse.engine.grouping.group_typecasts.valid",
        "sqlparse.sql.TokenList.group_tokens",
        "sqlparse.engine.grouping.group_typecasts.post",
        "sqlparse.engine.grouping.group_assignment.post",
        "<builtin>.enumerate",
        "sqlparse.engine.grouping.group_typed_literal.valid_final",
        "sqlparse.engine.grouping.group_arrays.post",
        "sqlparse.sql.TokenList.__iter__",
        "sqlparse.engine.grouping.group_period.valid_prev",
        "<builtin>.list",
        "sqlparse.engine.grouping.group_arrays.match",
        "sqlparse.engine.grouping.group_identifier_list.match",
        "sqlparse.engine.grouping.group_as.valid_next",
        "sqlparse.engine.grouping.group_tzcasts.post",
        "sqlparse.engine.grouping.group_comparison.valid",
        "sqlparse.engine.grouping.group_typed_literal.valid_prev",
        "sqlparse.engine.grouping.group_arrays.valid_prev",
        "sqlparse.engine.grouping.group_period.post"
    ],
    "sqlparse.engine.grouping._group_matching": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.__iter__",
        "<builtin>.list",
        "<list>.pop",
        "<list>.append",
        "sqlparse.engine.grouping._group_matching",
        "sqlparse.sql.TokenList.group_tokens",
        "sqlparse.sql.Token.match",
        "<builtin>.enumerate"
    ],
    "sqlparse.engine.grouping.align_comments": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_prev",
        "sqlparse.sql.TokenList.group_tokens",
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.engine.grouping.group": [],
    "sqlparse.engine.grouping.group_aliased": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_next",
        "sqlparse.sql.TokenList.group_tokens",
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.engine.grouping.group_arrays": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_arrays.match": [
        "<builtin>.isinstance"
    ],
    "sqlparse.engine.grouping.group_arrays.valid_prev": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_as": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_as.valid_next": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_assignment": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_assignment.match": [
        "sqlparse.sql.Token.match"
    ],
    "sqlparse.engine.grouping.group_assignment.post": [
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.engine.grouping.group_begin": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_brackets": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_case": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_comments": [
        "sqlparse.sql.TokenList.token_prev",
        "sqlparse.sql.TokenList.token_not_matching",
        "sqlparse.sql.TokenList.group_tokens",
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.engine.grouping.group_comparison": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_comparison.valid": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_for": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_functions": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_next",
        "sqlparse.sql.TokenList.group_tokens",
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.engine.grouping.group_identifier": [
        "sqlparse.sql.TokenList.group_tokens",
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.engine.grouping.group_identifier_list": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_identifier_list.match": [
        "sqlparse.sql.Token.match"
    ],
    "sqlparse.engine.grouping.group_identifier_list.valid": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_if": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_operator": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_operator.match": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_operator.valid": [
        "sqlparse.utils.imt",
        "sqlparse.sql.Token.match"
    ],
    "sqlparse.engine.grouping.group_order": [
        "sqlparse.utils.imt",
        "sqlparse.sql.TokenList.token_prev",
        "sqlparse.sql.TokenList.group_tokens",
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.engine.grouping.group_parenthesis": [
        "sqlparse.engine.grouping._group_matching"
    ],
    "sqlparse.engine.grouping.group_period": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_period.match": [
        "sqlparse.sql.Token.match"
    ],
    "sqlparse.engine.grouping.group_period.post": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_period.valid_prev": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_typecasts": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_typecasts.match": [
        "sqlparse.sql.Token.match"
    ],
    "sqlparse.engine.grouping.group_typed_literal": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_typed_literal.match": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.engine.grouping.group_typed_literal.valid_final": [
        "sqlparse.sql.Token.match"
    ],
    "sqlparse.engine.grouping.group_typed_literal.valid_next": [
        "sqlparse.sql.Token.match"
    ],
    "sqlparse.engine.grouping.group_tzcasts": [
        "sqlparse.engine.grouping._group"
    ],
    "sqlparse.engine.grouping.group_tzcasts.valid_next": [
        "sqlparse.sql.Token.match"
    ],
    "sqlparse.engine.grouping.group_values": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_next",
        "sqlparse.sql.TokenList.group_tokens",
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.engine.grouping.group_where": [
        "sqlparse.sql.TokenList.token_index",
        "sqlparse.sql.TokenList.group_tokens",
        "sqlparse.sql.TokenList.token_next_by",
        "sqlparse.sql._groupable_tokens"
    ],
    "sqlparse.engine.statement_splitter": [
        "sqlparse.engine.statement_splitter.StatementSplitter",
        "sqlparse.sql",
        "sqlparse.tokens"
    ],
    "sqlparse.engine.statement_splitter.StatementSplitter.__init__": [
        "sqlparse.engine.statement_splitter.StatementSplitter._reset"
    ],
    "sqlparse.engine.statement_splitter.StatementSplitter._change_splitlevel": [
        "<builtin>.max"
    ],
    "sqlparse.engine.statement_splitter.StatementSplitter.process": [
        "sqlparse.lexer.get_tokens",
        "sqlparse.engine.statement_splitter.StatementSplitter._change_splitlevel",
        "sqlparse.sql.Token.__init__",
        "<list>.append",
        "sqlparse.tokens.IdentifierCaseFilter.process",
        "sqlparse.engine.statement_splitter.StatementSplitter._reset",
        "sqlparse.tokens.TruncateStringFilter.process",
        "sqlparse.tokens._CaseFilter.process",
        "<builtin>.all",
        "sqlparse.sql.TokenList.__init__"
    ],
    "sqlparse.filters.aligned_indent": [
        "sqlparse.sql",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter",
        "sqlparse.tokens",
        "sqlparse.utils"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._next_token": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._next_token",
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process": [
        "<builtin>.getattr",
        "<str>.lower",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_parenthesis",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_identifierlist",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_statement",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_default",
        "<builtin>.type",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_case"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_case": [
        "<builtin>.str",
        "sqlparse.sql.TokenList.insert_after",
        "sqlparse.sql.TokenList.token_next_by",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter.nl",
        "sqlparse.sql.Token.__init__",
        "<builtin>.max",
        "<builtin>.len",
        "sqlparse.sql.TokenList.insert_before",
        "sqlparse.sql.Case.get_cases",
        "<builtin>.enumerate",
        "<builtin>.map"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_default": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process",
        "sqlparse.utils.offset",
        "contextlib._GeneratorContextManager.__exit__",
        "contextlib._GeneratorContextManager.__enter__",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._split_kwds",
        "sqlparse.sql.TokenList.token_index",
        "contextlib.helper",
        "sqlparse.sql.Token.match",
        "sqlparse.sql.TokenList.token_prev",
        "sqlparse.sql.TokenList.get_sublists"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_identifierlist": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter.nl",
        "<builtin>.list",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_default",
        "sqlparse.sql.IdentifierList.get_identifiers"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_parenthesis": [
        "sqlparse.utils.indent",
        "sqlparse.sql.TokenList.insert_after",
        "sqlparse.sql.TokenList.token_next_by",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter.nl",
        "contextlib._GeneratorContextManager.__enter__",
        "contextlib._GeneratorContextManager.__exit__",
        "sqlparse.sql.TokenList.insert_before",
        "contextlib.helper",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_default"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._process_statement": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process",
        "sqlparse.sql.TokenList.__init__",
        "<builtin>.len"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter._split_kwds": [
        "<builtin>.str",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter.nl",
        "sqlparse.sql.TokenList.insert_before",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._next_token",
        "sqlparse.sql.Token.match"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter.nl": [
        "<builtin>.isinstance",
        "sqlparse.sql.Token.__init__",
        "<builtin>.len"
    ],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter.process": [
        "sqlparse.filters.aligned_indent.AlignedIndentFilter._process"
    ],
    "sqlparse.filters.others": [
        "re",
        "sqlparse.filters.others.SerializerUnicode",
        "sqlparse.sql",
        "sqlparse.tokens",
        "sqlparse.utils",
        "sqlparse.filters.others.StripWhitespaceFilter",
        "sqlparse.filters.others.StripCommentsFilter",
        "sqlparse.filters.others.SpacesAroundOperatorsFilter"
    ],
    "sqlparse.filters.others.StripCommentsFilter": [
        "<builtin>.staticmethod"
    ],
    "sqlparse.filters.others.StripWhitespaceFilter": [
        "<builtin>.staticmethod"
    ],
    "sqlparse.filters.others.SpacesAroundOperatorsFilter": [
        "<builtin>.staticmethod"
    ],
    "sqlparse.filters.others.SerializerUnicode": [
        "<builtin>.staticmethod"
    ],
    "sqlparse.filters.tokens.TruncateStringFilter.process": [
        "<builtin>.len"
    ],

    "sqlparse.sql.Identifier.get_array_indices": [
        "<builtin>.isinstance"
    ],
    "sqlparse.filters.tokens._CaseFilter.__init__": [
        "<builtin>.getattr"
    ],
    "sqlparse.filters.others.SerializerUnicode.process": [
        "sqlparse.utils.split_unquoted_newlines"
    ],
    "sqlparse.filters.others.SpacesAroundOperatorsFilter._process": [
        "sqlparse.sql.TokenList.insert_before",
        "sqlparse.sql.Token.__init__",
        "sqlparse.sql.TokenList.insert_after",
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.filters.others.SpacesAroundOperatorsFilter.process": [
        "sqlparse.filters.others.SpacesAroundOperatorsFilter.process",
        "sqlparse.filters.others.SpacesAroundOperatorsFilter._process"
    ],
    "sqlparse.filters.others.StripCommentsFilter._process": [
        "sqlparse.sql.TokenList.token_next",
        "sqlparse.filters.others.StripCommentsFilter._process._get_insert_token",
        "sqlparse.filters.others.StripCommentsFilter._process.get_next_comment",
        "sqlparse.sql.Token.match",
        "sqlparse.sql.TokenList.token_prev"
    ],
    "sqlparse.filters.others.StripCommentsFilter._process._get_insert_token": [
        "re.search",
        "<str>.groups",
        "sqlparse.sql.Token.__init__"
    ],
    "sqlparse.filters.others.StripCommentsFilter._process.get_next_comment": [
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.filters.others.StripCommentsFilter.process": [
        "sqlparse.filters.others.StripCommentsFilter._process",
        "sqlparse.filters.others.StripCommentsFilter.process"
    ],
    "sqlparse.filters.others.StripWhitespaceFilter._stripws": [
        "<builtin>.getattr",
        "<str>.lower",
        "sqlparse.filters.others.StripWhitespaceFilter._stripws_parenthesis",
        "sqlparse.filters.others._stripws_default",
        "<builtin>.type",
        "sqlparse.filters.others.StripWhitespaceFilter._stripws_identifierlist"
    ],
    "sqlparse.filters.others.StripWhitespaceFilter._stripws_identifierlist": [
        "<builtin>.list",
        "sqlparse.filters.others.StripWhitespaceFilter._stripws_default"
    ],
    "sqlparse.filters.others.StripWhitespaceFilter._stripws_parenthesis": [
        "sqlparse.filters.others.StripWhitespaceFilter._stripws_default"
    ],
    "sqlparse.filters.others.StripWhitespaceFilter.process": [
        "sqlparse.filters.others.StripWhitespaceFilter.process",
        "sqlparse.filters.others.StripWhitespaceFilter._stripws"
    ],
    "sqlparse.filters.output": [
        "sqlparse.sql",
        "sqlparse.tokens",
        "sqlparse.filters.output.OutputPythonFilter",
        "sqlparse.filters.output.OutputPHPFilter",
        "sqlparse.filters.output.OutputFilter"
    ],
    "sqlparse.filters.output.OutputFilter.process": [
        "sqlparse.sql.TokenList.__str__",
        "sqlparse.filters.output.OutputFilter._process",
        "<builtin>.len",
        "<builtin>.str"
    ],
    "sqlparse.filters.output.OutputPHPFilter._process": [
        "sqlparse.sql.Token.__init__"
    ],
    "sqlparse.filters.output.OutputPythonFilter._process": [
        "sqlparse.sql.Token.__init__",
        "<builtin>.len"
    ],
    "sqlparse.filters.reindent": [
        "sqlparse.filters.reindent.ReindentFilter",
        "sqlparse.sql",
        "sqlparse.tokens",
        "sqlparse.utils"
    ],
    "sqlparse.filters.reindent.ReindentFilter": [
        "<builtin>.property"
    ],
    "sqlparse.filters.reindent.ReindentFilter._flatten_up_to_token": [
        "<builtin>.next",
        "sqlparse.sql.TokenList.flatten"
    ],
    "sqlparse.filters.reindent.ReindentFilter._get_offset": [
        "sqlparse.filters.reindent.ReindentFilter._flatten_up_to_token",
        "<builtin>.len",
        "sqlparse.filters.reindent.leading_ws",
        "sqlparse.sql.Token.__str__",
        "<builtin>.map"
    ],
    "sqlparse.filters.reindent.ReindentFilter._next_token": [
        "sqlparse.sql.TokenList.token_next_by",
        "sqlparse.filters.reindent.ReindentFilter._next_token"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process": [
        "<builtin>.getattr",
        "sqlparse.filters.reindent.ReindentFilter._process_values",
        "sqlparse.filters.reindent.ReindentFilter._process_parenthesis",
        "<str>.lower",
        "sqlparse.filters.reindent.ReindentFilter._process_case",
        "sqlparse.filters.reindent.ReindentFilter._process_default",
        "sqlparse.filters.reindent.ReindentFilter._process_function",
        "sqlparse.filters.reindent.ReindentFilter._process_identifierlist",
        "sqlparse.filters.reindent.ReindentFilter._process_where",
        "<builtin>.type"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_case": [
        "sqlparse.sql.TokenList.__getitem__",
        "<builtin>.iter",
        "sqlparse.sql.TokenList.token_next_by",
        "sqlparse.sql.Token.flatten",
        "sqlparse.utils.offset",
        "contextlib._GeneratorContextManager.__enter__",
        "contextlib._GeneratorContextManager.__exit__",
        "<builtin>.len",
        "sqlparse.sql.TokenList.insert_before",
        "sqlparse.filters.reindent.ReindentFilter._process_default",
        "contextlib.helper",
        "sqlparse.sql.TokenList.flatten",
        "sqlparse.sql.Case.get_cases",
        "sqlparse.filters.reindent.ReindentFilter._get_offset",
        "<builtin>.next",
        "sqlparse.filters.reindent.ReindentFilter.nl"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_default": [
        "sqlparse.filters.reindent.ReindentFilter._split_kwds",
        "sqlparse.filters.reindent.ReindentFilter._process",
        "sqlparse.sql.TokenList.get_sublists",
        "sqlparse.filters.reindent.ReindentFilter._split_statements"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_function": [
        "sqlparse.sql.TokenList.__getitem__",
        "sqlparse.filters.reindent.ReindentFilter._process_default"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_identifierlist": [
        "sqlparse.utils.indent",
        "sqlparse.sql.TokenList.insert_after",
        "sqlparse.sql.TokenList.insert_before",
        "sqlparse.filters.reindent.ReindentFilter._process_default",
        "<builtin>.sum",
        "sqlparse.utils.offset",
        "contextlib._GeneratorContextManager.__enter__",
        "sqlparse.filters.reindent.ReindentFilter.nl",
        "sqlparse.sql.Token.flatten",
        "sqlparse.sql.TokenList.token_next",
        "contextlib._GeneratorContextManager.__exit__",
        "<builtin>.len",
        "sqlparse.filters.reindent.ReindentFilter._get_offset",
        "contextlib.helper",
        "<builtin>.next",
        "sqlparse.sql.TokenList.__iter__",
        "<builtin>.list",
        "sqlparse.sql.Token.__init__",
        "sqlparse.sql.TokenList.token_index",
        "sqlparse.sql.Token.within",
        "sqlparse.sql.TokenList.flatten",
        "sqlparse.sql.TokenList.token_prev",
        "sqlparse.sql.IdentifierList.get_identifiers"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_parenthesis": [
        "sqlparse.utils.indent",
        "sqlparse.sql.TokenList.token_next_by",
        "sqlparse.utils.offset",
        "contextlib._GeneratorContextManager.__exit__",
        "contextlib._GeneratorContextManager.__enter__",
        "sqlparse.filters.reindent.ReindentFilter._process_default",
        "contextlib.helper",
        "sqlparse.filters.reindent.ReindentFilter._get_offset",
        "sqlparse.filters.reindent.ReindentFilter.nl"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_values": [
        "sqlparse.sql.TokenList.insert_after",
        "sqlparse.sql.TokenList.token_next_by",
        "sqlparse.sql.TokenList.insert_before",
        "sqlparse.filters.reindent.ReindentFilter._get_offset",
        "sqlparse.filters.reindent.ReindentFilter.nl"
    ],
    "sqlparse.filters.reindent.ReindentFilter._process_where": [
        "sqlparse.utils.indent",
        "sqlparse.sql.TokenList.token_next_by",
        "contextlib._GeneratorContextManager.__exit__",
        "contextlib._GeneratorContextManager.__enter__",
        "sqlparse.sql.TokenList.insert_before",
        "sqlparse.filters.reindent.ReindentFilter._process_default",
        "contextlib.helper",
        "sqlparse.filters.reindent.ReindentFilter.nl"
    ],
    "sqlparse.filters.reindent.ReindentFilter._split_kwds": [
        "<builtin>.str",
        "sqlparse.filters.reindent.ReindentFilter._next_token",
        "sqlparse.sql.TokenList.insert_before",
        "sqlparse.filters.reindent.ReindentFilter.nl",
        "sqlparse.sql.TokenList.__str__",
        "sqlparse.sql.Token.__str__",
        "sqlparse.sql.TokenList.token_prev"
    ],
    "sqlparse.filters.reindent.ReindentFilter._split_statements": [
        "sqlparse.sql.TokenList.insert_before",
        "sqlparse.sql.TokenList.token_prev",
        "sqlparse.sql.TokenList.token_next_by",
        "sqlparse.filters.reindent.ReindentFilter.nl"
    ],
    "sqlparse.filters.reindent.ReindentFilter.nl": [
        "sqlparse.sql.Token.__init__",
        "<builtin>.max",
        "sqlparse.filters.reindent.leading_ws"
    ],
    "sqlparse.filters.reindent.ReindentFilter.process": [
        "sqlparse.sql.TokenList.__str__",
        "sqlparse.filters.reindent.ReindentFilter._process",
        "sqlparse.sql.Token.__init__",
        "<builtin>.str"
    ],
    "sqlparse.filters.right_margin": [
        "sqlparse.sql",
        "sqlparse.tokens",
        "sqlparse.filters.right_margin.RightMarginFilter"
    ],
    "sqlparse.format": [
        "<str>.join",
        "sqlparse.engine.filter_stack.FilterStack.__init__",
        "sqlparse.engine.filter_stack.FilterStack.run",
        "sqlparse.formatter.validate_options",
        "<list>.append",
        "sqlparse.formatter.build_filter_stack"
    ],
    "sqlparse.formatter": [
        "sqlparse.exceptions",
        "sqlparse.filters"
    ],
    "sqlparse.exceptions": [
        "sqlparse.exceptions.SQLParseError"
    ],
    "sqlparse.filters": [
        "sqlparse.filters.others",
        "sqlparse.filters.right_margin",
        "sqlparse.filters.aligned_indent",
        "sqlparse.filters.output",
        "sqlparse.filters.reindent",
        "sqlparse.filters.tokens"
    ],
    "sqlparse.formatter.build_filter_stack": [
        "sqlparse.engine.filter_stack.FilterStack.enable_grouping",
        "sqlparse.filters.output.OutputPythonFilter",
        "sqlparse.filters.output.OutputFilter.__init__",
        "<list>.append",
        "sqlparse.tokens._CaseFilter.__init__",
        "sqlparse.filters.aligned_indent.AlignedIndentFilter.__init__",
        "sqlparse.filters.output.OutputPHPFilter",
        "sqlparse.filters.reindent.ReindentFilter.__init__",
        "sqlparse.filters.right_margin.RightMarginFilter.__init__",
        "sqlparse.filters.tokens.TruncateStringFilter.__init__"
    ],
    "sqlparse.filters.right_margin.RightMarginFilter._process": [
        "sqlparse.sql.Token.__init__",
        "<builtin>.str",
        "<builtin>.type",
        "<builtin>.len",
        "sqlparse.filters.right_margin.RightMarginFilter._process"
    ],
    "sqlparse.formatter.validate_options": [
        "<builtin>.int"
    ],
    "sqlparse.keywords": [
        "enum.IntFlag.__or__",
        "sqlparse.tokens",
        "sqlparse.tokens._TokenType.__getattr__"
    ],
    "sqlparse.lexer": [
        "sqlparse.keywords",
        "sqlparse.tokens",
        "sqlparse.utils",
        "sqlparse.lexer.Lexer"
    ],
    "sqlparse.lexer.Lexer": [
        "<builtin>.staticmethod"
    ],
    "sqlparse.lexer.get_tokens": [
        "codecs.BufferedIncrementalDecoder.decode",
        "sqlparse.utils.consume",
        "sqlparse.keywords.is_keyword",
        "abc.ABCMeta.__instancecheck__"
    ],
    "sqlparse.lexer.tokenize": [
        "sqlparse.lexer.Lexer.get_tokens"
    ],
    "sqlparse.parse": [
        "<builtin>.tuple",
        "sqlparse.engine.filter_stack.FilterStack.run",
        "sqlparse.parsestream"
    ],
    "sqlparse.parsestream": [
        "sqlparse.engine.filter_stack.FilterStack.__init__",
        "sqlparse.engine.filter_stack.FilterStack.run",
        "sqlparse.engine.filter_stack.FilterStack.enable_grouping"
    ],
    "sqlparse.split": [
        "sqlparse.engine.filter_stack.FilterStack.__init__",
        "<builtin>.str",
        "sqlparse.engine.filter_stack.FilterStack.run"
    ],
    "sqlparse.sql": [
        "sqlparse.sql.Values",
        "sqlparse.sql.NameAliasMixin",
        "sqlparse.sql.Statement",
        "sqlparse.sql.Identifier",
        "sqlparse.sql.Case",
        "sqlparse.sql.Operation",
        "sqlparse.sql.TypedLiteral",
        "sqlparse.sql.For",
        "sqlparse.sql.Token",
        "sqlparse.sql.Assignment",
        "sqlparse.sql.IdentifierList",
        "sqlparse.sql.Begin",
        "sqlparse.sql.Command",
        "sqlparse.sql.Where",
        "sqlparse.sql.Having",
        "sqlparse.sql.Parenthesis",
        "sqlparse.sql.If",
        "sqlparse.sql.Comment",
        "sqlparse.sql.Function",
        "sqlparse.sql.TokenList",
        "sqlparse.sql.SquareBrackets",
        "sqlparse.sql.Comparison",
        "sqlparse.tokens",
        "sqlparse.utils"
    ],
    "sqlparse.sql.<lambda>": [
        "sqlparse.utils.imt",
        "sqlparse.engine.grouping.<lambda>"
    ],
    "sqlparse.sql.Case.get_cases": [
        "sqlparse.tokens._TokenType.__contains__",
        "<list>.append",
        "sqlparse.sql.Token.match"
    ],
    "sqlparse.sql.Comparison": [
        "<builtin>.property"
    ],
    "sqlparse.sql.Function.get_parameters": [
        "<builtin>.isinstance",
        "sqlparse.utils.imt"
    ],
    "sqlparse.sql.Identifier.get_ordering": [
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.sql.Identifier.get_typecast": [
        "sqlparse.sql.TokenList.token_next",
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.sql.Identifier.is_wildcard": [
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.sql.IdentifierList.get_identifiers": [
        "sqlparse.sql.Token.match"
    ],
    "sqlparse.sql.NameAliasMixin.get_alias": [
        "sqlparse.sql.TokenList._get_first_name",
        "sqlparse.sql.TokenList.token_next_by",
        "<builtin>.len"
    ],
    "sqlparse.sql.NameAliasMixin.get_real_name": [
        "sqlparse.sql.TokenList._get_first_name",
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.sql.Parenthesis": [
        "<builtin>.property"
    ],
    "sqlparse.sql.SquareBrackets": [
        "<builtin>.property"
    ],
    "sqlparse.sql.Statement.get_type": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_next",
        "sqlparse.sql.TokenList.token_first",
        "sqlparse.sql.TokenList.token_index"
    ],
    "sqlparse.sql.Token.__init__": [
        "<builtin>.str",
        "sqlparse.tokens._TokenType.__contains__",
        "<str>.upper"
    ],
    "sqlparse.sql.Token.__repr__": [
        "sqlparse.sql.TokenList._get_repr_name",
        "<str>.startswith",
        "<builtin>.id",
        "sqlparse.sql.Token._get_repr_value",
        "<str>.endswith",
        "sqlparse.sql.Token._get_repr_name",
        "<builtin>.locals",
        "<str>.format"
    ],
    "sqlparse.sql.Token._get_repr_name": [
        "<builtin>.str",
        "sqlparse.tokens._TokenType.__repr__"
    ],
    "sqlparse.sql.Token._get_repr_value": [
        "<builtin>.str",
        "re.sub",
        "<builtin>.len",
        "sqlparse.sql.TokenList.__str__",
        "sqlparse.sql.Token.__str__"
    ],
    "sqlparse.sql.Token.match": [
        "<builtin>.isinstance",
        "re.compile"
    ],
    "sqlparse.sql.TokenList": [
        "<builtin>.property"
    ],
    "sqlparse.sql.TokenList.__init__": [
        "<builtin>.str",
        "<builtin>.setattr",
        "<builtin>.super",
        "sqlparse.sql.Token.__init__",
        "sqlparse.sql.TokenList.__str__"
    ],
    "sqlparse.sql.TokenList.__str__": [
        "sql.TokenList.flatten",
        "sqlparse.sql.TokenList.flatten"
    ],
    "sqlparse.sql.TokenList._get_first_name": [
        "<builtin>.isinstance",
        "sqlparse.sql.NameAliasMixin.get_real_name",
        "<builtin>.reversed",
        "sqlparse.sql.TokenList.get_name",
        "<list>.append",
        "sqlparse.utils.remove_quotes"
    ],
    "sqlparse.sql.TokenList._pprint_tree": [
        "sqlparse.sql.TokenList._get_repr_name",
        "sqlparse.sql.Token._get_repr_value",
        "<builtin>.len",
        "sqlparse.sql.Token._get_repr_name",
        "<builtin>.locals",
        "<builtin>.print",
        "sqlparse.sql.TokenList._pprint_tree",
        "<builtin>.enumerate",
        "codecs.BufferedIncrementalDecoder.reset"
    ],
    "sqlparse.sql.TokenList._token_matching": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_first.matcher",
        "sqlparse.sql.TokenList.token_next.matcher",
        "<builtin>.len",
        "<builtin>.range",
        "sqlparse.sql.<lambda>"
    ],
    "sqlparse.sql.TokenList.flatten": [
        "sqlparse.filters.output.OutputPythonFilter._process",
        "sqlparse.sql.TokenList.flatten",
        "sqlparse.filters.output.OutputPHPFilter._process"
    ],
    "sqlparse.sql.TokenList.get_name": [
        "sqlparse.sql.NameAliasMixin.get_real_name",
        "sqlparse.sql.TokenList.get_real_name",
        "sqlparse.sql.TokenList.get_alias",
        "sqlparse.sql.NameAliasMixin.get_alias"
    ],
    "sqlparse.sql.TokenList.get_parent_name": [
        "sqlparse.sql.TokenList.token_prev",
        "sqlparse.utils.remove_quotes",
        "sqlparse.sql.TokenList.token_next_by"
    ],
    "sqlparse.sql.TokenList.get_token_at_offset": [
        "sqlparse.sql.TokenList.flatten",
        "<builtin>.len"
    ],
    "sqlparse.sql.TokenList.group_tokens": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.__str__",
        "<builtin>.str",
        "sqlparse.sql.TokenList.__init__"
    ],
    "sqlparse.sql.TokenList.has_alias": [
        "sqlparse.sql.TokenList.get_alias,",
        "sqlparse.sql.NameAliasMixin.get_alias"
    ],
    "sqlparse.sql.TokenList.insert_after": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_next",
        "sqlparse.sql.TokenList.token_index"
    ],
    "sqlparse.sql.TokenList.insert_before": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_index"
    ],
    "sqlparse.sql.TokenList.token_first": [
        "sqlparse.sql.TokenList._token_matching"
    ],
    "sqlparse.sql.TokenList.token_first.matcher": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.sql.TokenList.token_index": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList.token_index"
    ],
    "sqlparse.sql.TokenList.token_matching": [
        "sqlparse.sql.TokenList._token_matching"
    ],
    "sqlparse.sql.TokenList.token_next": [
        "sqlparse.sql.TokenList._token_matching"
    ],
    "sqlparse.sql.TokenList.token_next.matcher": [
        "sqlparse.utils.imt"
    ],
    "sqlparse.sql.TokenList.token_next_by": [
        "sqlparse.sql.TokenList._token_matching"
    ],
    "sqlparse.sql.TokenList.token_not_matching": [
        "<builtin>.isinstance",
        "sqlparse.sql.TokenList._token_matching"
    ],
    "sqlparse.sql.TokenList.token_prev": [
        "sqlparse.sql.TokenList.token_next"
    ],
    "sqlparse.sql.TypedLiteral": [
        "sqlparse.tokens._TokenType.__getattr__"
    ],
    "sqlparse.tokens": [
        "sqlparse.tokens.TruncateStringFilter",
        "sqlparse.tokens._TokenType",
        "sqlparse.tokens._CaseFilter",
        "sqlparse.tokens._TokenType.__getattr__",
        "sqlparse.tokens.KeywordCaseFilter",
        "sqlparse.tokens.IdentifierCaseFilter"
    ],
    "sqlparse.tokens.IdentifierCaseFilter.process": [
        "sqlparse.lexer.get_tokens",
        "sqlparse.tokens._CaseFilter.process"
    ],
    "sqlparse.tokens.TruncateStringFilter.process": [
        "sqlparse.lexer.get_tokens"
    ],
    "sqlparse.tokens._CaseFilter.process": [
        "sqlparse.tokens._TokenType.__contains__",
        "sqlparse.lexer.get_tokens"
    ],
    "sqlparse.utils": [
        "contextlib.contextmanager",
        "re.compile"
    ],
    "sqlparse.utils.consume": [
        "_collections.deque"
    ],
    "sqlparse.utils.imt": [
        "<builtin>.isinstance",
        "<builtin>.any"
    ],
    "sqlparse.utils.recurse.wrap.wrapped_f": [
        "<builtin>.isinstance",
        "sqlparse.engine.grouping.group_comments",
        "sqlparse.engine.grouping.align_comments",
        "sqlparse.engine.grouping.group_functions",
        "sqlparse.engine.grouping.group_aliased",
        "sqlparse.engine.grouping.group_where",
        "sqlparse.utils.recurse.wrap.wrapped_f",
        "sqlparse.engine.grouping.group_identifier",
        "sqlparse.sql.TokenList.get_sublists"
    ],
    "sqlparse.utils.split_unquoted_newlines": [
        "<builtin>.str",
        "<str>.split",
        "<list>.append",
        "<str>.match",
        "sqlparse.sql.TokenList.__str__"
    ],
    "sre_compile._bytes_to_codes": [
        "<builtin>.memoryview",
        "<builtin>.len"
    ],
    "sre_compile._code": [
        "sre_compile._compile",
        "<list>.append",
        "sre_compile._compile_info"
    ],
    "sre_compile._compile": [
        "sre_compile._compile",
        "sre_compile._simple",
        "sre_compile._combine_flags",
        "sre_parse.SubPattern.getwidth",
        "<map>.get",
        "sre_compile._compile_charset",
        "sre_compile._optimize_charset",
        "sre_constants.error.__init__"
    ],
    "sre_compile._compile_charset": [
        "<list>.extend",
        "sre_constants.error.__init__"
    ],
    "sre_compile._compile_info": [
        "<builtin>.min",
        "sre_compile._get_charset_prefix",
        "sre_compile._get_literal_prefix",
        "<list>.extend",
        "<builtin>.len",
        "sre_parse.SubPattern.getwidth",
        "sre_compile._generate_overlap_table",
        "sre_compile._compile_charset",
        "sre_compile._optimize_charset"
    ],
    "sre_compile._get_charset_prefix": [
        "sre_parse.SubPattern.__len__",
        "sre_compile._combine_flags",
        "sre_compile._get_iscased",
        "<builtin>.range",
        "<builtin>.any",
        "sre_parse.SubPattern.__getitem__",
        "<builtin>.map"
    ],
    "sre_compile._get_literal_prefix": [
        "sre_compile._get_literal_prefix",
        "sre_compile._combine_flags",
        "<list>.extend",
        "<builtin>.len",
        "sre_compile._get_iscased"
    ],
    "sre_compile._mk_bitmap": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "sre_compile._optimize_charset": [
        "sre_compile._mk_bitmap",
        "sre_compile._bytes_to_codes",
        "<list>.append",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.any",
        "<builtin>.bytes",
        "<builtin>.bytearray",
        "<builtin>.map"
    ],
    "sre_compile._simple": [
        "sre_parse.SubPattern.__len__",
        "sre_parse.SubPattern.__getitem__",
        "<builtin>.len"
    ],
    "sre_compile.compile": [
        "<map>.items",
        "sre_parse.groups",
        "<builtin>.tuple",
        "sre_compile._code",
        "sre_compile.isstring",
        "<builtin>.print",
        "sre_parse.parse"
    ],
    "sre_compile.dis": [
        "<builtin>.str",
        "sre_compile.dis.dis_",
        "<builtin>.set",
        "<builtin>.len"
    ],
    "sre_compile.dis.dis_": [
        "<builtin>.str",
        "<builtin>.chr",
        "<builtin>.bin",
        "sre_compile.dis.dis_.print_2",
        "sre_compile.dis.dis_",
        "<builtin>.list",
        "sre_compile._hex_code",
        "sre_compile.dis.dis_.print_",
        "<builtin>.range",
        "<builtin>.ValueError",
        "<builtin>.map"
    ],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "sre_parse.State.checkgroup": [
        "sre_parse.groups"
    ],
    "sre_parse.State.closegroup": [
        "sre_parse.SubPattern.getwidth"
    ],
    "sre_parse.State.opengroup": [
        "sre_parse.groups"
    ],
    "sre_parse.SubPattern.__getitem__": [
        "<builtin>.isinstance",
        "sre_parse.SubPattern.__init__"
    ],
    "sre_parse.SubPattern.__setitem__": [],
    "sre_parse.SubPattern.append": [
        "<list>.append"
    ],
    "sre_parse.SubPattern.getwidth": [
        "sre_parse.SubPattern.getwidth",
        "<builtin>.min",
        "<builtin>.max"
    ],
    "sre_parse.Tokenizer.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.__next": [
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "sre_parse.Tokenizer.get": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.getuntil": [
        "<builtin>.len",
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.getwhile": [
        "<builtin>.range",
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse._class_escape": [
        "<builtin>.chr",
        "<builtin>.len",
        "<builtin>.int",
        "<builtin>.ord",
        "sre_parse.Tokenizer.getwhile"
    ],
    "sre_parse._escape": [
        "<builtin>.chr",
        "sre_parse.groups",
        "<builtin>.len",
        "<builtin>.ord",
        "<builtin>.int",
        "sre_parse.State.checklookbehindgroup",
        "sre_parse.State.checkgroup",
        "sre_parse.Tokenizer.getwhile"
    ],
    "sre_parse._parse_flags": [
        "<builtin>.len",
        "sre_parse.Tokenizer.get"
    ],
    "sre_parse._parse_sub": [
        "sre_parse.Tokenizer.match",
        "sre_parse.SubPattern.append",
        "<list>.extend",
        "sre_parse.SubPattern.__init__",
        "<list>.append",
        "sre_parse.Tokenizer.tell",
        "<builtin>.len"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "sre_parse.parse": [
        "sre_parse.Tokenizer.__init__",
        "sre_parse.State.__init__",
        "sre_parse.fix_flags",
        "sre_parse._parse_sub"
    ],
    "ssl.Purpose": [
        "enum._EnumDict.__setitem__"
    ],
    "ssl.SSLSocket": [
        "ssl._sslcopydoc"
    ],
    "ssl.TLSVersion": [
        "enum._EnumDict.__setitem__"
    ],
    "ssl._TLSAlertType": [
        "enum._EnumDict.__setitem__"
    ],
    "ssl._TLSContentType": [
        "enum._EnumDict.__setitem__"
    ],
    "ssl._TLSMessageType": [
        "enum._EnumDict.__setitem__"
    ],
    "ssl.__new__": [],
    "string._TemplateMetaclass.__init__": [
        "re.escape",
        "enum.IntFlag.__or__",
        "<builtin>.super",
        "re.compile"
    ],
    "textwrap.fill": [
        "textwrap.TextWrapper.__init__",
        "textwrap.TextWrapper.fill"
    ],
    "textwrap.wrap": [
        "textwrap.TextWrapper.__init__",
        "textwrap.TextWrapper.wrap"
    ],
    "threading.RLock": [
        "threading._RLock.__init__",
        "_thread.RLock"
    ],
    "tokenize._compile": [
        "re.compile"
    ],
    "tokenize.detect_encoding": [
        "tokenize.find_cookie",
        "tokenize.read_or_stop"
    ],
    "tokenize.open": [
        "codecs.BufferedIncrementalDecoder.__init__",
        "tokenize.detect_encoding"
    ],
    "types.DynamicClassAttribute.__get__": [
        "enum.value",
        "<builtin>.AttributeError",
        "enum.name"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.getattr",
        "<builtin>.bool"
    ],
    "typing": [
        "typing.inner",
        "typing._TypedDictMeta",
        "typing.TypeVar.__init__",
        "typing._Final",
        "typing.SupportsRound",
        "typing.ForwardRef",
        "typing._SpecialForm.__init__",
        "typing._VariadicGenericAlias",
        "typing.Generic",
        "typing.runtime_checkable",
        "typing.TextIO",
        "typing.NamedTupleMeta",
        "typing._ProtocolMeta",
        "typing.__init_subclass__",
        "typing.SupportsBytes",
        "typing.SupportsInt",
        "typing.SupportsComplex",
        "typing.SupportsIndex",
        "typing._GenericAlias.__setattr__",
        "typing.__new__",
        "abc.__new__",
        "typing.NamedTuple",
        "typing._TypingEmpty",
        "typing._GenericAlias",
        "typing._GenericAlias.__init__",
        "typing._Immutable",
        "typing._TypingEllipsis",
        "typing.IO",
        "typing.SupportsAbs",
        "typing.BinaryIO",
        "typing.SupportsFloat",
        "typing._GenericAlias.__mro_entries__",
        "typing._alias",
        "typing.TypeVar",
        "typing.re",
        "typing._SpecialForm",
        "typing.io",
        "typing.TypedDict",
        "typing.Protocol"
    ],
    "typing.BinaryIO": [
        "typing.inner",
        "abc.abstractmethod"
    ],
    "typing.ForwardRef._evaluate": [
        "<builtin>.eval",
        "typing._type_check"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "sqlparse.__main__": [
        "sqlparse.cli.main",
        "sqlparse.cli"
    ],
    "typing.IO": [
        "typing.inner",
        "abc.abstractmethod"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.TextIO": [
        "typing.inner",
        "abc.abstractmethod"
    ],
    "typing.TypeVar.__init__": [
        "<builtin>.bool",
        "typing._type_check",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.tuple",
        "<builtin>.ValueError"
    ],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._GenericAlias.__call__": [
        "typing.__new__",
        "<builtin>.TypeError"
    ],
    "typing._GenericAlias.__getattr__": [
        "<builtin>.getattr",
        "<builtin>.AttributeError",
        "typing._is_dunder"
    ],
    "typing._GenericAlias.__hash__": [
        "typing._SpecialForm.__hash__",
        "typing._GenericAlias.__hash__",
        "<builtin>.hash",
        "<builtin>.frozenset",
        "typing.ForwardRef.__hash__"
    ],
    "typing._GenericAlias.__init__": [
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "typing._GenericAlias.__setattr__",
        "typing._collect_type_vars"
    ],
    "typing._GenericAlias.__instancecheck__": [
        "typing._GenericAlias.__subclasscheck__",
        "<builtin>.type"
    ],
    "typing._GenericAlias.__mro_entries__": [
        "<builtin>.isinstance",
        "<builtin>.issubclass",
        "typing._GenericAlias.__eq__",
        "<builtin>.any",
        "<builtin>.tuple"
    ],
    "typing._GenericAlias.__repr__": [
        "typing._type_repr",
        "<builtin>.len"
    ],
    "typing._GenericAlias.__setattr__": [
        "<builtin>.setattr",
        "<builtin>.super",
        "typing._is_dunder"
    ],
    "typing._GenericAlias.__subclasscheck__": [
        "<builtin>.isinstance",
        "<builtin>.issubclass",
        "abc.ABCMeta.__subclasscheck__",
        "<builtin>.TypeError"
    ],
    "typing._GenericAlias.copy_with": [
        "typing._GenericAlias.__init__"
    ],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._VariadicGenericAlias": [
        "typing._tp_cache"
    ],
    "typing._VariadicGenericAlias.__getitem__": [
        "<builtin>.isinstance",
        "typing.inner",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.tuple"
    ],
    "typing.__class_getitem__": [
        "typing._GenericAlias.__init__",
        "typing._check_generic"
    ],
    "typing.__getitem__": [
        "typing.inner",
        "typing._check_generic",
        "typing._type_check",
        "typing._remove_dups_flatten",
        "typing._GenericAlias.__init__",
        "typing._subs_tvars"
    ],
    "typing.__getitem_inner__": [
        "typing._GenericAlias.copy_with",
        "typing._GenericAlias.__eq__",
        "typing._type_check"
    ],
    "typing.__init_subclass__": [
        "typing._GenericAlias.__eq__",
        "typing._collect_type_vars",
        "typing.__init_subclass__"
    ],
    "typing.__new__": [
        "typing._make_nmtuple"
    ],
    "typing._alias": [
        "typing._GenericAlias.__init__"
    ],
    "typing._eval_type": [
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "typing.ForwardRef._evaluate"
    ],
    "typing._make_nmtuple": [
        "<builtin>.dict",
        "collections.namedtuple"
    ],
    "typing._remove_dups_flatten": [
        "<builtin>.isinstance",
        "typing._SpecialForm.__hash__",
        "<builtin>.len",
        "<builtin>.set",
        "<builtin>.tuple",
        "typing._GenericAlias.__hash__",
        "typing.ForwardRef.__hash__"
    ],
    "typing._subs_tvars": [
        "<builtin>.isinstance",
        "<builtin>.list",
        "<builtin>.enumerate",
        "<builtin>.tuple",
        "typing._GenericAlias.copy_with"
    ],
    "typing._tp_cache": [
        "functools.decorating_function",
        "functools.wraps",
        "functools.lru_cache",
        "functools.update_wrapper"
    ],
    "typing._type_check": [
        "<builtin>.isinstance",
        "typing._SpecialForm.__eq__",
        "<builtin>.TypeError",
        "typing._GenericAlias.__eq__",
        "typing.ForwardRef.__eq__",
        "typing.ForwardRef.__init__",
        "<builtin>.callable",
        "<builtin>.type"
    ],
    "typing._type_repr": [
        "<builtin>.isinstance",
        "typing.ForwardRef.__repr__",
        "typing._SpecialForm.__repr__",
        "typing._GenericAlias.__repr__",
        "typing.TypeVar.__repr__",
        "<builtin>.repr"
    ],
    "typing.get_type_hints": [
        "<builtin>.isinstance",
        "typing.inner",
        "<builtin>.getattr",
        "<builtin>.reversed",
        "<builtin>.TypeError",
        "typing._eval_type",
        "typing._get_defaults",
        "<builtin>.dict",
        "<builtin>.hasattr",
        "typing.ForwardRef.__init__",
        "<builtin>.type"
    ],
    "typing.inner": [
        "typing._SpecialForm.__hash__",
        "typing.__class_getitem__",
        "typing.__getitem__",
        "typing.ForwardRef.__hash__",
        "typing._GenericAlias.__hash__",
        "typing.__getitem_inner__"
    ],
    "urllib.parse": [
        "urllib.parse.SplitResultBytes",
        "urllib.parse._NetlocResultMixinBase",
        "urllib.parse.ParseResultBytes",
        "re.compile",
        "urllib.parse.SplitResult",
        "urllib.parse._ResultMixinBytes",
        "urllib.parse._NetlocResultMixinStr",
        "urllib.parse._ResultMixinStr",
        "urllib.parse.Quoter",
        "urllib.parse.DefragResult",
        "urllib.parse._NetlocResultMixinBytes",
        "collections.namedtuple",
        "urllib.parse.ParseResult",
        "<builtin>.bytes",
        "urllib.parse.DefragResultBytes",
        "urllib.parse._fix_result_transcoding",
        "<builtin>.frozenset"
    ],
    "uuid": [
        "uuid.UUID",
        "uuid.SafeUUID",
        "enum.__new__",
        "enum.__prepare__",
        "uuid.UUID.__init__"
    ],
    "uuid.SafeUUID": [
        "enum._EnumDict.__setitem__"
    ],
    "warnings": [
        "<builtin>.hasattr",
        "warnings._processoptions",
        "warnings.filterwarnings",
        "warnings.simplefilter"
    ],
    "warnings.WarningMessage.__init__": [],
    "warnings._add_filter": [
        "<list>.append",
        "<list>.insert",
        "warnings._filters_mutated",
        "<list>.remove"
    ],
    "warnings._filters_mutated": [],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "tracemalloc",
        "linecache.getline",
        "<str>.strip"
    ],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.issubclass",
        "<builtin>.getattr",
        "<builtin>.__import__"
    ],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings._processoptions": [
        "<builtin>.print",
        "warnings._setoption"
    ],
    "warnings._setoption": [
        "warnings._getaction",
        "warnings._getcategory",
        "<builtin>.len",
        "<builtin>.int",
        "warnings.filterwarnings"
    ],
    "warnings._showwarnmsg": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg"
    ],
    "warnings.catch_warnings.__init__": [],
    "warnings.filterwarnings": [
        "<builtin>.isinstance",
        "<builtin>.issubclass",
        "warnings._add_filter"
    ],
    "warnings.simplefilter": [
        "<builtin>.isinstance",
        "warnings._add_filter"
    ],
    "warnings.warn": [
        "<builtin>.isinstance",
        "<builtin>.issubclass",
        "warnings._next_external_frame",
        "<builtin>.TypeError",
        "warnings._is_internal_frame",
        "<builtin>.range",
        "<builtin>.type",
        "warnings.warn_explicit"
    ],
    "warnings.warn_explicit": [
        "<builtin>.isinstance",
        "<builtin>.RuntimeError",
        "<builtin>.issubclass",
        "<builtin>.str",
        "warnings.WarningMessage.__init__",
        "<builtin>.int",
        "<map>.get",
        "warnings._showwarnmsg",
        "<map>.clear",
        "linecache.getlines"
    ],
    "weakref": [],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "weakref.WeakKeyDictionary.__init__": [
        "weakref.WeakKeyDictionary.update",
        "<builtin>.set",
        "_weakref.ref"
    ],
    "weakref.WeakKeyDictionary.update": [
        "<builtin>.len",
        "weakref.WeakKeyDictionary.update",
        "<builtin>.hasattr",
        "<builtin>.type",
        "_weakref.ref"
    ],
    "weakref.WeakValueDictionary.__init__": [
        "<builtin>.set",
        "weakref.WeakValueDictionary.update"
    ],
    "weakref.WeakValueDictionary._commit_removals": [],
    "weakref.WeakValueDictionary.update": [
        "<builtin>.hasattr",
        "weakref.KeyedRef.__init__",
        "<builtin>.dict",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.finalize": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "genericpath.exists": [],
    "types": [
        "<builtin>.globals",
        "<builtin>.object",
        "types._c",
        "types._g",
        "types._GeneratorWrapper",
        "types.DynamicClassAttribute",
        "types._cell_factory",
        "types._C",
        "types._ag",
        "<builtin>.type"
    ],
    "abc": [
        "abc.abstractclassmethod",
        "_py_abc",
        "abc.ABC",
        "abc.abstractproperty",
        "abc.abstractstaticmethod"
    ],
    "sqlparse.engine.grouping.group_tzcasts.match": [],
    "sqlparse.sql.TokenList.get_alias": [],
    "sqlparse.sql.Having": [],
    "sqlparse.tokens._TokenType.__repr__": [
        "<str>.join"
    ],
    "sqlparse.engine.grouping.group_as.valid_prev": [],
    "os._fspath": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.hasattr"
    ],
    "sqlparse.sql.Statement": [],
    "reprlib.recursive_repr": [],
    "genericpath": [],
    "sqlparse.filters.output.OutputFilter._process": [],
    "sqlparse.tokens._TokenType.__contains__": [
        "<builtin>.len"
    ],
    "heapq": [
        "<builtin>.print"
    ],
    "sqlparse.engine.grouping.group_comparison.match": [],
    "sqlparse.tokens._TokenType": [],
    "sre_compile._combine_flags": [],
    "sqlparse.sql.TokenList.get_real_name": [],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.tell"
    ],
    "tracemalloc": [
        "pickle",
        "tracemalloc.Frame",
        "tracemalloc.Traceback",
        "tracemalloc.BaseFilter",
        "tracemalloc.StatisticDiff",
        "tracemalloc.Filter",
        "collections.abc",
        "tracemalloc._Traces",
        "tracemalloc.Trace",
        "tracemalloc.Snapshot",
        "tracemalloc.Statistic",
        "tracemalloc.DomainFilter"
    ],
    "sqlparse.engine.grouping.group_comparison.post": [],
    "functools.wraps": [],
    "sqlparse.filters.others.StripWhitespaceFilter._stripws_default": [],
    "sre_parse.State.__init__": [],
    "sqlparse.engine.grouping.group_typed_literal.valid_prev": [],
    "sqlparse.sql.Operation": [],
    "sqlparse.sql.Assignment": [],
    "sqlparse.engine.grouping.group_as.match": [],
    "sqlparse.engine.filter_stack.FilterStack.__init__": [],
    "reprlib.Repr.__init__": [],
    "sqlparse.utils.remove_quotes": [],
    "sqlparse.engine.grouping.group_assignment.valid": [],
    "sqlparse.sql.Identifier": [],
    "sqlparse.engine": [
        "sqlparse.engine.grouping",
        "sqlparse.engine.filter_stack",
        "sqlparse.engine.statement_splitter"
    ],
    "argparse.ArgumentParser._get_positional_actions": [],
    "argparse._ActionsContainer.register": [],
    "sqlparse.sql.Token": [],
    "sqlparse.sql.If": [],
    "abc.abstractmethod": [],
    "sqlparse.filters.output.OutputPHPFilter": [],
    "sqlparse.engine.grouping.group_identifier_list.post": [],
    "sqlparse.engine.statement_splitter.StatementSplitter._reset": [],
    "sqlparse.sql.Values": [],
    "sqlparse.sql.Comment": [],
    "sre_compile._hex_code": [],
    "linecache.lazycache": [
        "<builtin>.getattr",
        "<str>.startswith",
        "<str>.endswith",
        "<builtin>.len"
    ],
    "gettext.NullTranslations.gettext": [],
    "sqlparse.sql.IdentifierList": [],
    "sqlparse.lexer.Lexer.get_tokens": [
        "<builtin>.isinstance",
        "sqlparse.utils.consume",
        "<builtin>.TypeError",
        "<builtin>.enumerate",
        "<builtin>.callable",
        "<builtin>.type"
    ],
    "sqlparse.sql.TokenList._get_repr_name": [
        "<builtin>.type"
    ],
    "sqlparse.filters.right_margin.RightMarginFilter": [],
    "_thread.RLock": [],
    "sqlparse.engine.grouping.group_period.valid_next": [],
    "sqlparse.engine.grouping.group_operator.post": [],
    "copyreg.constructor": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "sqlparse.engine.grouping.group_as.post": [],
    "os._Environ.__init__": [],
    "sqlparse.engine.grouping.<lambda2>": [],
    "encodings.aliases": [],
    "sre_compile._get_iscased": [],
    "sqlparse.sql.For": [],
    "sqlparse.sql.TokenList.__iter__": [
        "<builtin>.iter"
    ],
    "sqlparse.engine.grouping.group_typed_literal.post": [],
    "sre_compile": [
        "sre_parse",
        "<builtin>.tuple"
    ],
    "_weakref.ref": [],
    "sqlparse.sql.Where": [],
    "sqlparse.engine.grouping.group_typed_literal.match_to_extend": [
        "<builtin>.isinstance"
    ],
    "os._add": [],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sqlparse.tokens._TokenType.__getattr__": [
        "<builtin>.setattr"
    ],
    "stat": [],
    "threading._RLock.__init__": [],
    "sqlparse.engine.grouping.group_arrays.valid_next": [],
    "sqlparse.engine.grouping.group_arrays.post": [],
    "sqlparse.keywords.is_keyword": [
        "<map>.get"
    ],
    "sqlparse.utils.recurse": [],
    "posixpath": [],
    "sqlparse.engine.statement_splitter.StatementSplitter": [],
    "sqlparse.sql.Token.within": [
        "<builtin>.isinstance"
    ],
    "_io.TextIOWrapper": [],
    "sqlparse.filters.output.OutputFilter": [],
    "sre_parse.SubPattern.__init__": [],
    "gettext.dngettext": [
        "gettext.NullTranslations.ngettext",
        "<map>.get",
        "<map>.ngettext",
        "gettext.translation"
    ],
    "sqlparse.sql.NameAliasMixin": [],
    "sqlparse.sql.Case": [],
    "sqlparse.engine.grouping.group_tzcasts.valid_prev": [],
    "sqlparse.engine.grouping.<lambda1>": [],
    "gettext.NullTranslations._parse": [],
    "sqlparse.filters.output.OutputPythonFilter": [],
    "sqlparse.filters.aligned_indent.AlignedIndentFilter.__init__": [
        "<builtin>.len"
    ],
    "os._fscodec": [],
    "sqlparse.sql.Command": [],
    "argparse.ArgumentParser.convert_arg_line_to_args": [],
    "sre_constants.error.__init__": [
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "sqlparse.sql.Function": [],
    "sqlparse.engine.filter_stack.FilterStack.enable_grouping": [],
    "_collections.deque": [],
    "sqlparse.engine.grouping.group_typecasts.valid": [],
    "argparse._ActionsContainer._registry_get": [],
    "sqlparse.engine.grouping.group_tzcasts.post": [],
    "contextlib": [
        "contextlib.nullcontext",
        "contextlib.ContextDecorator",
        "contextlib.closing",
        "contextlib.redirect_stdout",
        "contextlib._BaseExitStack",
        "contextlib._RedirectStream",
        "contextlib.AbstractAsyncContextManager",
        "contextlib.ExitStack",
        "contextlib.suppress",
        "contextlib.AsyncExitStack",
        "contextlib._AsyncGeneratorContextManager",
        "contextlib._GeneratorContextManager",
        "contextlib.redirect_stderr",
        "contextlib._GeneratorContextManagerBase",
        "contextlib.AbstractContextManager"
    ],
    "sqlparse.sql.Begin": [],
    "sqlparse.engine.grouping.group_typecasts.post": []
}