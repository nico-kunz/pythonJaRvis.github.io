{
    "__init__.ChainMap.__bool__": [
        "tokenize.any"
    ],
    "__init__.ChainMap.__contains__": [
        "tokenize.any"
    ],
    "__init__.ChainMap.__getitem__": [
        "__init__.ChainMap.__missing__"
    ],
    "__init__.ChainMap.__len__": [
        "_weakrefset.WeakSet.union"
    ],
    "__init__.ChainMap.clear": [
        "__init__.ChainMap.clear"
    ],
    "__init__.ChainMap.copy": [
        "__init__.ChainMap.copy"
    ],
    "__init__.ChainMap.pop": [
        "__init__.ChainMap.pop"
    ],
    "__init__.ChainMap.popitem": [
        "__init__.ChainMap.popitem"
    ],
    "__init__.Counter.__add__": [
        "__init__.Counter.__init__"
    ],
    "__init__.Counter.__and__": [
        "__init__.Counter.__init__"
    ],
    "__init__.Counter.__iadd__": [
        "__init__.Counter._keep_positive"
    ],
    "__init__.Counter.__iand__": [
        "__init__.Counter._keep_positive"
    ],
    "__init__.Counter.__init__": [
        "__init__.Counter.update"
    ],
    "__init__.Counter.__ior__": [
        "__init__.Counter._keep_positive"
    ],
    "__init__.Counter.__isub__": [
        "__init__.Counter._keep_positive"
    ],
    "__init__.Counter.__neg__": [
        "__init__.Counter.__init__"
    ],
    "__init__.Counter.__or__": [
        "__init__.Counter.__init__"
    ],
    "__init__.Counter.__pos__": [
        "__init__.Counter.__init__"
    ],
    "__init__.Counter.__repr__": [
        "__init__.Counter.most_common"
    ],
    "__init__.Counter.__sub__": [
        "__init__.Counter.__init__"
    ],
    "__init__.Counter.most_common": [
        "operator.itemgetter.__init__"
    ],
    "__init__.Counter.subtract": [
        "__init__.Counter.subtract"
    ],
    "__init__.Counter.update": [
        "__init__._count_elements"
    ],
    "__init__.OrderedDict.__delitem__": [
        "__init__.OrderedDict.pop"
    ],
    "__init__.OrderedDict.__reduce__": [
        "__init__.OrderedDict.items"
    ],
    "__init__.OrderedDict.__repr__": [
        "__init__.OrderedDict.items"
    ],
    "__init__.OrderedDict.clear": [
        "__init__.OrderedDict.clear"
    ],
    "__init__.UserDict.__copy__": [
        "__init__.UserDict.copy"
    ],
    "__init__.UserDict.__init__": [
        "warnings.warn"
    ],
    "__init__.UserDict.copy": [
        "copy.copy"
    ],
    "__init__.UserList.__eq__": [
        "__init__.UserList.__cast"
    ],
    "__init__.UserList.__ge__": [
        "__init__.UserList.__cast"
    ],
    "__init__.UserList.__gt__": [
        "__init__.UserList.__cast"
    ],
    "__init__.UserList.__le__": [
        "__init__.UserList.__cast"
    ],
    "__init__.UserList.__lt__": [
        "__init__.UserList.__cast"
    ],
    "__init__.UserList.append": [
        "__init__.UserList.append"
    ],
    "__init__.UserList.clear": [
        "__init__.UserList.clear"
    ],
    "__init__.UserList.count": [
        "__init__.UserList.count"
    ],
    "__init__.UserList.extend": [
        "__init__.UserList.extend"
    ],
    "__init__.UserList.index": [
        "__init__.UserList.index"
    ],
    "__init__.UserList.insert": [
        "__init__.UserList.insert"
    ],
    "__init__.UserList.pop": [
        "__init__.UserList.pop"
    ],
    "__init__.UserList.remove": [
        "__init__.UserList.remove"
    ],
    "__init__.UserList.reverse": [
        "__init__.UserList.reverse"
    ],
    "__init__.UserList.sort": [
        "__init__.UserList.sort"
    ],
    "__init__.UserString.__add__": [
        "locale.str"
    ],
    "__init__.UserString.__init__": [
        "locale.str"
    ],
    "__init__.UserString.__radd__": [
        "locale.str"
    ],
    "__init__.UserString.__rmod__": [
        "locale.str"
    ],
    "__init__.UserString.__str__": [
        "locale.str"
    ],
    "__init__.UserString.capitalize": [
        "__init__.UserString.capitalize"
    ],
    "__init__.UserString.casefold": [
        "__init__.UserString.casefold"
    ],
    "__init__.UserString.center": [
        "__init__.UserString.center"
    ],
    "__init__.UserString.count": [
        "__init__.UserString.count"
    ],
    "__init__.UserString.encode": [
        "__init__.UserString.encode"
    ],
    "__init__.UserString.endswith": [
        "__init__.UserString.endswith"
    ],
    "__init__.UserString.expandtabs": [
        "__init__.UserString.expandtabs"
    ],
    "__init__.UserString.find": [
        "__init__.UserString.find"
    ],
    "__init__.UserString.format": [
        "__init__.UserString.format"
    ],
    "__init__.UserString.format_map": [
        "__init__.UserString.format_map"
    ],
    "__init__.UserString.index": [
        "__init__.UserString.index"
    ],
    "__init__.UserString.isalnum": [
        "__init__.UserString.isalnum"
    ],
    "__init__.UserString.isalpha": [
        "__init__.UserString.isalpha"
    ],
    "__init__.UserString.isascii": [
        "__init__.UserString.isascii"
    ],
    "__init__.UserString.isdecimal": [
        "__init__.UserString.isdecimal"
    ],
    "__init__.UserString.isdigit": [
        "__init__.UserString.isdigit"
    ],
    "__init__.UserString.isidentifier": [
        "__init__.UserString.isidentifier"
    ],
    "__init__.UserString.islower": [
        "__init__.UserString.islower"
    ],
    "__init__.UserString.isnumeric": [
        "__init__.UserString.isnumeric"
    ],
    "__init__.UserString.isprintable": [
        "__init__.UserString.isprintable"
    ],
    "__init__.UserString.isspace": [
        "__init__.UserString.isspace"
    ],
    "__init__.UserString.istitle": [
        "__init__.UserString.istitle"
    ],
    "__init__.UserString.isupper": [
        "__init__.UserString.isupper"
    ],
    "__init__.UserString.join": [
        "__init__.UserString.join"
    ],
    "__init__.UserString.ljust": [
        "__init__.UserString.ljust"
    ],
    "__init__.UserString.lower": [
        "__init__.UserString.lower"
    ],
    "__init__.UserString.lstrip": [
        "__init__.UserString.lstrip"
    ],
    "__init__.UserString.partition": [
        "__init__.UserString.partition"
    ],
    "__init__.UserString.replace": [
        "__init__.UserString.replace"
    ],
    "__init__.UserString.rfind": [
        "__init__.UserString.rfind"
    ],
    "__init__.UserString.rindex": [
        "__init__.UserString.rindex"
    ],
    "__init__.UserString.rjust": [
        "__init__.UserString.rjust"
    ],
    "__init__.UserString.rpartition": [
        "__init__.UserString.rpartition"
    ],
    "__init__.UserString.rsplit": [
        "__init__.UserString.rsplit"
    ],
    "__init__.UserString.rstrip": [
        "__init__.UserString.rstrip"
    ],
    "__init__.UserString.split": [
        "__init__.UserString.split"
    ],
    "__init__.UserString.splitlines": [
        "__init__.UserString.splitlines"
    ],
    "__init__.UserString.startswith": [
        "__init__.UserString.startswith"
    ],
    "__init__.UserString.strip": [
        "__init__.UserString.strip"
    ],
    "__init__.UserString.swapcase": [
        "__init__.UserString.swapcase"
    ],
    "__init__.UserString.title": [
        "__init__.UserString.title"
    ],
    "__init__.UserString.translate": [
        "__init__.UserString.translate"
    ],
    "__init__.UserString.upper": [
        "__init__.UserString.upper"
    ],
    "__init__.UserString.zfill": [
        "__init__.UserString.zfill"
    ],
    "__init__.__getattr__": [
        "warnings.warn"
    ],
    "__init__.namedtuple": [
        "threading.enumerate"
    ],
    "__init__.normalize_encoding": [
        "locale.str"
    ],
    "__init__.parse": [
        "__init__.parsestream"
    ],
    "__init__.parsestream": [
        "filter_stack.FilterStack.enable_grouping"
    ],
    "__init__.search_function": [
        "__init__.normalize_encoding"
    ],
    "__init__.split": [
        "locale.str"
    ],
    "_compression.DecompressReader._rewind": [
        "_compression.DecompressReader.seek"
    ],
    "_compression.DecompressReader.read": [
        "_compression.DecompressReader.read"
    ],
    "_compression.DecompressReader.readinto": [
        "_compression.DecompressReader.read"
    ],
    "_compression.DecompressReader.seek": [
        "_compression.DecompressReader.read"
    ],
    "_compression.DecompressReader.seekable": [
        "_compression.DecompressReader.seekable"
    ],
    "_py_abc.ABCMeta.__instancecheck__": [
        "tokenize.any"
    ],
    "_py_abc.ABCMeta.__new__": [
        "_weakrefset.WeakSet.__init__"
    ],
    "_py_abc.ABCMeta.__subclasscheck__": [
        "_weakrefset.WeakSet.__init__"
    ],
    "_py_abc.ABCMeta._dump_registry": [
        "_py_abc.get_cache_token"
    ],
    "_threading_local._localimpl.__init__": [
        "locale.str"
    ],
    "_threading_local._localimpl.create_dict": [
        "threading.current_thread"
    ],
    "_threading_local._localimpl.get_dict": [
        "threading.current_thread"
    ],
    "_threading_local._patch": [
        "_threading_local.local.__getattribute__"
    ],
    "_threading_local.local.__delattr__": [
        "_threading_local._patch"
    ],
    "_threading_local.local.__getattribute__": [
        "_threading_local.local.__getattribute__"
    ],
    "_threading_local.local.__new__": [
        "threading.RLock"
    ],
    "_threading_local.local.__setattr__": [
        "_threading_local._patch"
    ],
    "_weakrefset.WeakSet.__iand__": [
        "_weakrefset.WeakSet.intersection_update"
    ],
    "_weakrefset.WeakSet.__init__": [
        "_weakrefset.WeakSet.update"
    ],
    "_weakrefset.WeakSet.__ior__": [
        "_weakrefset.WeakSet.update"
    ],
    "_weakrefset.WeakSet.__isub__": [
        "_weakrefset.WeakSet.difference_update"
    ],
    "_weakrefset.WeakSet.__iter__": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "_weakrefset.WeakSet.__ixor__": [
        "_weakrefset.WeakSet.symmetric_difference_update"
    ],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet.add"
    ],
    "_weakrefset.WeakSet.clear": [
        "_weakrefset.WeakSet.clear"
    ],
    "_weakrefset.WeakSet.difference": [
        "_weakrefset.WeakSet.difference_update"
    ],
    "_weakrefset.WeakSet.difference_update": [
        "_weakrefset.WeakSet.__isub__"
    ],
    "_weakrefset.WeakSet.discard": [
        "_weakrefset.WeakSet.discard"
    ],
    "_weakrefset.WeakSet.intersection_update": [
        "_weakrefset.WeakSet.__iand__"
    ],
    "_weakrefset.WeakSet.isdisjoint": [
        "_weakrefset.WeakSet.intersection"
    ],
    "_weakrefset.WeakSet.issubset": [
        "_weakrefset.WeakSet.issubset"
    ],
    "_weakrefset.WeakSet.issuperset": [
        "_weakrefset.WeakSet.issuperset"
    ],
    "_weakrefset.WeakSet.pop": [
        "_weakrefset.WeakSet.pop"
    ],
    "_weakrefset.WeakSet.remove": [
        "_weakrefset.WeakSet.remove"
    ],
    "_weakrefset.WeakSet.symmetric_difference": [
        "_weakrefset.WeakSet.symmetric_difference_update"
    ],
    "_weakrefset.WeakSet.symmetric_difference_update": [
        "_weakrefset.WeakSet.__ixor__"
    ],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet.add"
    ],
    "aligned_indent.AlignedIndentFilter._next_token": [
        "sql.TokenList.token_next_by"
    ],
    "aligned_indent.AlignedIndentFilter._process": [
        "__init__.UserString.lower"
    ],
    "aligned_indent.AlignedIndentFilter._process_case": [
        "threading.enumerate"
    ],
    "aligned_indent.AlignedIndentFilter._process_default": [
        "utils.offset"
    ],
    "aligned_indent.AlignedIndentFilter._process_identifierlist": [
        "sql.TokenList.insert_before"
    ],
    "aligned_indent.AlignedIndentFilter._process_parenthesis": [
        "utils.indent"
    ],
    "aligned_indent.AlignedIndentFilter._process_statement": [
        "aligned_indent.AlignedIndentFilter._process"
    ],
    "aligned_indent.AlignedIndentFilter._split_kwds": [
        "sql.TokenList.insert_before"
    ],
    "aligned_indent.AlignedIndentFilter.process": [
        "aligned_indent.AlignedIndentFilter._process"
    ],
    "argparse.Action.__call__": [
        "gettext.gettext"
    ],
    "argparse.ArgumentError.__init__": [
        "argparse._get_action_name"
    ],
    "argparse.ArgumentParser.__init__": [
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._add_action": [
        "argparse.ArgumentParser._add_action"
    ],
    "argparse.ArgumentParser._check_value": [
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._get_nargs_pattern": [
        "__init__.UserString.replace"
    ],
    "argparse.ArgumentParser._get_option_tuples": [
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._get_value": [
        "locale.str"
    ],
    "argparse.ArgumentParser._get_values": [
        "argparse.ArgumentParser._get_value"
    ],
    "argparse.ArgumentParser._match_argument": [
        "re.match"
    ],
    "argparse.ArgumentParser._match_arguments_partial": [
        "sre_parse.State.groups"
    ],
    "argparse.ArgumentParser._parse_known_args": [
        "threading.enumerate"
    ],
    "argparse.ArgumentParser._parse_optional": [
        "gettext.gettext"
    ],
    "argparse.ArgumentParser._read_args_from_files": [
        "locale.str"
    ],
    "argparse.ArgumentParser.add_subparsers": [
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.error": [
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.exit": [
        "argparse.ArgumentParser._print_message"
    ],
    "argparse.ArgumentParser.format_help": [
        "argparse.HelpFormatter.start_section"
    ],
    "argparse.ArgumentParser.format_usage": [
        "argparse.HelpFormatter.add_usage"
    ],
    "argparse.ArgumentParser.parse_args": [
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.parse_intermixed_args": [
        "gettext.gettext"
    ],
    "argparse.ArgumentParser.parse_known_args": [
        "locale.str"
    ],
    "argparse.ArgumentParser.parse_known_intermixed_args": [
        "warnings.warn"
    ],
    "argparse.ArgumentParser.print_help": [
        "argparse.ArgumentParser.format_help"
    ],
    "argparse.ArgumentParser.print_usage": [
        "argparse.ArgumentParser.format_usage"
    ],
    "argparse.FileType.__call__": [
        "gettext.gettext"
    ],
    "argparse.HelpFormatter.__init__": [
        "shutil.get_terminal_size"
    ],
    "argparse.HelpFormatter._expand_help": [
        "locale.str"
    ],
    "argparse.HelpFormatter._fill_text": [
        "__init__.UserString.strip"
    ],
    "argparse.HelpFormatter._format_action": [
        "argparse.HelpFormatter._split_lines"
    ],
    "argparse.HelpFormatter._format_action_invocation": [
        "argparse.HelpFormatter._metavar_formatter"
    ],
    "argparse.HelpFormatter._format_actions_usage": [
        "threading.enumerate"
    ],
    "argparse.HelpFormatter._format_args": [
        "argparse.HelpFormatter._metavar_formatter"
    ],
    "argparse.HelpFormatter._format_text": [
        "argparse.HelpFormatter._fill_text"
    ],
    "argparse.HelpFormatter._format_usage": [
        "re.findall"
    ],
    "argparse.HelpFormatter._get_default_metavar_for_optional": [
        "__init__.UserString.upper"
    ],
    "argparse.HelpFormatter._iter_indented_subactions": [
        "argparse.HelpFormatter._indent"
    ],
    "argparse.HelpFormatter._metavar_formatter": [
        "locale.str"
    ],
    "argparse.HelpFormatter._split_lines": [
        "__init__.UserString.strip"
    ],
    "argparse.HelpFormatter.add_argument": [
        "argparse.HelpFormatter._iter_indented_subactions"
    ],
    "argparse.HelpFormatter.add_arguments": [
        "argparse.HelpFormatter.add_argument"
    ],
    "argparse.HelpFormatter.add_text": [
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter.add_usage": [
        "argparse.HelpFormatter._add_item"
    ],
    "argparse.HelpFormatter.end_section": [
        "argparse.HelpFormatter._dedent"
    ],
    "argparse.HelpFormatter.format_help": [
        "argparse.HelpFormatter.format_help"
    ],
    "argparse.HelpFormatter.start_section": [
        "argparse.HelpFormatter._indent"
    ],
    "argparse.RawDescriptionHelpFormatter._fill_text": [
        "__init__.UserString.splitlines"
    ],
    "argparse.RawTextHelpFormatter._split_lines": [
        "__init__.UserString.splitlines"
    ],
    "argparse._ActionsContainer.__init__": [
        "re.compile"
    ],
    "argparse._ActionsContainer._add_action": [
        "argparse._ActionsContainer._check_conflict"
    ],
    "argparse._ActionsContainer._add_container_actions": [
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._check_conflict": [
        "argparse._ActionsContainer._get_handler"
    ],
    "argparse._ActionsContainer._get_handler": [
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._get_optional_kwargs": [
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._get_positional_kwargs": [
        "gettext.gettext"
    ],
    "argparse._ActionsContainer._handle_conflict_error": [
        "gettext.ngettext"
    ],
    "argparse._ActionsContainer._pop_action_class": [
        "argparse._ActionsContainer._registry_get"
    ],
    "argparse._ActionsContainer.add_argument": [
        "argparse._ActionsContainer._registry_get"
    ],
    "argparse._ActionsContainer.add_argument_group": [
        "argparse._ArgumentGroup.__init__"
    ],
    "argparse._ActionsContainer.add_mutually_exclusive_group": [
        "argparse._MutuallyExclusiveGroup.__init__"
    ],
    "argparse._AppendAction.__call__": [
        "argparse._copy_items"
    ],
    "argparse._AppendConstAction.__call__": [
        "argparse._copy_items"
    ],
    "argparse._AttributeHolder.__repr__": [
        "argparse._AttributeHolder._get_kwargs"
    ],
    "argparse._ExtendAction.__call__": [
        "argparse._copy_items"
    ],
    "argparse._HelpAction.__call__": [
        "argparse.ArgumentParser.print_help"
    ],
    "argparse._MutuallyExclusiveGroup._add_action": [
        "gettext.gettext"
    ],
    "argparse._MutuallyExclusiveGroup._remove_action": [
        "argparse._MutuallyExclusiveGroup._remove_action"
    ],
    "argparse._SubParsersAction.__call__": [
        "gettext.gettext"
    ],
    "argparse._VersionAction.__call__": [
        "argparse.HelpFormatter.add_text"
    ],
    "argparse._copy_items": [
        "copy.copy"
    ],
    "bz2.BZ2File.__init__": [
        "warnings.warn"
    ],
    "bz2.BZ2File.close": [
        "bz2.BZ2File.write"
    ],
    "bz2.BZ2File.fileno": [
        "bz2.BZ2File.fileno"
    ],
    "bz2.BZ2File.peek": [
        "bz2.BZ2File.peek"
    ],
    "bz2.BZ2File.read": [
        "bz2.BZ2File.read"
    ],
    "bz2.BZ2File.read1": [
        "bz2.BZ2File.read1"
    ],
    "bz2.BZ2File.readable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "bz2.BZ2File.readinto": [
        "bz2.BZ2File.readinto"
    ],
    "bz2.BZ2File.readline": [
        "bz2.BZ2File.readline"
    ],
    "bz2.BZ2File.readlines": [
        "bz2.BZ2File.readlines"
    ],
    "bz2.BZ2File.seek": [
        "bz2.BZ2File.seek"
    ],
    "bz2.BZ2File.seekable": [
        "bz2.BZ2File.seekable"
    ],
    "bz2.BZ2File.tell": [
        "bz2.BZ2File.tell"
    ],
    "bz2.BZ2File.writable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "bz2.BZ2File.write": [
        "lzma.compress"
    ],
    "bz2.compress": [
        "lzma.compress"
    ],
    "bz2.decompress": [
        "lzma.decompress"
    ],
    "bz2.open": [
        "bz2.BZ2File.__init__"
    ],
    "cli.create_parser": [
        "argparse._ActionsContainer.add_argument_group"
    ],
    "cli.main": [
        "weakref.finalize.detach"
    ],
    "codecs": [
        "codecs.EncodedFile"
    ],
    "codecs.BufferedIncrementalDecoder.__init__": [
        "codecs.IncrementalDecoder.__init__"
    ],
    "codecs.BufferedIncrementalDecoder.decode": [
        "codecs.BufferedIncrementalDecoder._buffer_decode"
    ],
    "codecs.BufferedIncrementalDecoder.reset": [
        "codecs.IncrementalDecoder.reset"
    ],
    "codecs.BufferedIncrementalEncoder.__init__": [
        "codecs.IncrementalEncoder.__init__"
    ],
    "codecs.BufferedIncrementalEncoder.encode": [
        "codecs.BufferedIncrementalEncoder._buffer_encode"
    ],
    "codecs.BufferedIncrementalEncoder.reset": [
        "codecs.IncrementalEncoder.reset"
    ],
    "codecs.EncodedFile": [
        "codecs.StreamRecoder.__init__"
    ],
    "codecs.StreamReader.__next__": [
        "codecs.StreamReader.readline"
    ],
    "codecs.StreamReader.read": [
        "codecs.StreamReader.read"
    ],
    "codecs.StreamReader.readline": [
        "codecs.StreamReader.read"
    ],
    "codecs.StreamReader.readlines": [
        "codecs.StreamReader.read"
    ],
    "codecs.StreamReader.seek": [
        "codecs.StreamReader.seek"
    ],
    "codecs.StreamReaderWriter.read": [
        "codecs.StreamReaderWriter.read"
    ],
    "codecs.StreamReaderWriter.readline": [
        "codecs.StreamReaderWriter.readline"
    ],
    "codecs.StreamReaderWriter.readlines": [
        "codecs.StreamReaderWriter.readlines"
    ],
    "codecs.StreamReaderWriter.reset": [
        "codecs.StreamReaderWriter.reset"
    ],
    "codecs.StreamReaderWriter.seek": [
        "codecs.StreamReaderWriter.seek"
    ],
    "codecs.StreamReaderWriter.write": [
        "codecs.StreamReaderWriter.write"
    ],
    "codecs.StreamReaderWriter.writelines": [
        "codecs.StreamReaderWriter.writelines"
    ],
    "codecs.StreamRecoder.read": [
        "codecs.StreamRecoder.read"
    ],
    "codecs.StreamRecoder.readline": [
        "codecs.StreamRecoder.readline"
    ],
    "codecs.StreamRecoder.readlines": [
        "codecs.StreamRecoder.read"
    ],
    "codecs.StreamRecoder.reset": [
        "codecs.StreamRecoder.reset"
    ],
    "codecs.StreamRecoder.seek": [
        "codecs.StreamRecoder.seek"
    ],
    "codecs.StreamRecoder.write": [
        "codecs.StreamRecoder.write"
    ],
    "codecs.StreamRecoder.writelines": [
        "codecs.StreamRecoder.write"
    ],
    "codecs.StreamWriter.seek": [
        "codecs.StreamWriter.seek"
    ],
    "codecs.StreamWriter.write": [
        "codecs.StreamWriter.write"
    ],
    "codecs.StreamWriter.writelines": [
        "codecs.StreamWriter.write"
    ],
    "codecs.iterdecode": [
        "codecs.getincrementaldecoder"
    ],
    "codecs.iterencode": [
        "codecs.getincrementalencoder"
    ],
    "codecs.open": [
        "codecs.StreamReaderWriter.__init__"
    ],
    "contextlib.AsyncExitStack._create_async_cb_wrapper": [
        "contextlib._BaseExitStack.callback"
    ],
    "contextlib.AsyncExitStack._push_async_cm_exit": [
        "contextlib._BaseExitStack._push_exit_callback"
    ],
    "contextlib.AsyncExitStack.aclose": [
        "contextlib.AsyncExitStack.__aexit__"
    ],
    "contextlib.AsyncExitStack.enter_async_context": [
        "contextlib.AsyncExitStack._push_async_cm_exit"
    ],
    "contextlib.AsyncExitStack.push_async_callback": [
        "warnings.warn"
    ],
    "contextlib.AsyncExitStack.push_async_exit": [
        "contextlib._BaseExitStack._push_exit_callback"
    ],
    "contextlib.ContextDecorator.__call__": [
        "functools.wraps"
    ],
    "contextlib.ExitStack.close": [
        "contextlib.ExitStack.__exit__"
    ],
    "contextlib._BaseExitStack._push_cm_exit": [
        "contextlib._BaseExitStack._push_exit_callback"
    ],
    "contextlib._BaseExitStack.callback": [
        "warnings.warn"
    ],
    "contextlib._BaseExitStack.enter_context": [
        "contextlib._BaseExitStack._push_cm_exit"
    ],
    "contextlib._BaseExitStack.push": [
        "contextlib._BaseExitStack._push_exit_callback"
    ],
    "contextlib._GeneratorContextManager.__exit__": [
        "types._GeneratorWrapper.throw"
    ],
    "contextlib.asynccontextmanager": [
        "functools.wraps"
    ],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "copy._deepcopy_dict": [
        "copy.deepcopy"
    ],
    "copy._deepcopy_list": [
        "copy.deepcopy"
    ],
    "copy._deepcopy_method": [
        "copy.deepcopy"
    ],
    "copy._deepcopy_tuple": [
        "copy.deepcopy"
    ],
    "copy._reconstruct": [
        "functools.partial.__setstate__"
    ],
    "copy.copy": [
        "copy._reconstruct"
    ],
    "copy.deepcopy": [
        "copy._reconstruct"
    ],
    "copyreg._slotnames": [
        "__init__.UserString.startswith"
    ],
    "copyreg.pickle": [
        "copyreg.constructor"
    ],
    "enum.Enum.__format__": [
        "locale.str"
    ],
    "enum.EnumMeta.__call__": [
        "enum.EnumMeta._create_"
    ],
    "enum.EnumMeta.__getattr__": [
        "enum._is_dunder"
    ],
    "enum.EnumMeta.__new__": [
        "tokenize.any"
    ],
    "enum.EnumMeta.__prepare__": [
        "enum._EnumDict.__init__"
    ],
    "enum.EnumMeta._convert": [
        "warnings.warn"
    ],
    "enum.EnumMeta._convert_": [
        "fnmatch.filter"
    ],
    "enum.EnumMeta._create_": [
        "threading.enumerate"
    ],
    "enum.Flag.__invert__": [
        "enum._decompose"
    ],
    "enum.Flag.__repr__": [
        "locale.str"
    ],
    "enum.Flag.__str__": [
        "locale.str"
    ],
    "enum.Flag._create_pseudo_member_": [
        "enum._decompose"
    ],
    "enum.Flag._generate_next_value_": [
        "enum._high_bit"
    ],
    "enum.IntFlag._create_pseudo_member_": [
        "enum._high_bit"
    ],
    "enum._EnumDict.__setitem__": [
        "enum._is_sunder"
    ],
    "enum._decompose": [
        "enum._power_of_two"
    ],
    "enum._power_of_two": [
        "enum._high_bit"
    ],
    "filter_stack.FilterStack.run": [
        "statement_splitter.StatementSplitter.__init__"
    ],
    "fnmatch._compile_pattern": [
        "re.compile"
    ],
    "fnmatch.filter": [
        "re.match"
    ],
    "fnmatch.fnmatch": [
        "fnmatch.fnmatchcase"
    ],
    "fnmatch.fnmatchcase": [
        "re.match"
    ],
    "fnmatch.translate": [
        "re.sub"
    ],
    "formatter.build_filter_stack": [
        "filter_stack.FilterStack.enable_grouping"
    ],
    "functools": [
        "__init__.namedtuple"
    ],
    "functools._c3_mro": [
        "tokenize.any"
    ],
    "functools._compose_mro": [
        "functools._c3_mro"
    ],
    "functools._find_impl": [
        "functools._compose_mro"
    ],
    "functools._lru_cache_wrapper": [
        "threading.RLock"
    ],
    "functools._make_key": [
        "functools._HashedSeq.__init__"
    ],
    "functools.cached_property.__init__": [
        "threading.RLock"
    ],
    "functools.lru_cache": [
        "functools.update_wrapper"
    ],
    "functools.partial.__repr__": [
        "__init__.UserList.extend"
    ],
    "functools.partialmethod.__get__": [
        "functools.partialmethod._make_unbound_method"
    ],
    "functools.partialmethod.__init__": [
        "warnings.warn"
    ],
    "functools.singledispatch": [
        "functools.update_wrapper"
    ],
    "functools.singledispatchmethod.__get__": [
        "functools.update_wrapper"
    ],
    "functools.singledispatchmethod.__init__": [
        "functools.singledispatch"
    ],
    "functools.singledispatchmethod.register": [
        "functools.singledispatchmethod.register"
    ],
    "functools.wraps": [
        "functools.partial.__new__"
    ],
    "genericpath._splitext": [
        "__init__.UserString.rfind"
    ],
    "genericpath.commonprefix": [
        "threading.enumerate"
    ],
    "genericpath.isdir": [
        "stat.S_ISDIR"
    ],
    "genericpath.isfile": [
        "stat.S_ISREG"
    ],
    "genericpath.samefile": [
        "genericpath.samestat"
    ],
    "genericpath.sameopenfile": [
        "genericpath.samestat"
    ],
    "gettext": [
        "threading.enumerate"
    ],
    "gettext.GNUTranslations._parse": [
        "threading.enumerate"
    ],
    "gettext.GNUTranslations.gettext": [
        "gettext.GNUTranslations.gettext"
    ],
    "gettext.GNUTranslations.lgettext": [
        "warnings.warn"
    ],
    "gettext.GNUTranslations.lngettext": [
        "warnings.warn"
    ],
    "gettext.GNUTranslations.ngettext": [
        "gettext.GNUTranslations.ngettext"
    ],
    "gettext.GNUTranslations.npgettext": [
        "gettext.GNUTranslations.npgettext"
    ],
    "gettext.GNUTranslations.pgettext": [
        "gettext.GNUTranslations.pgettext"
    ],
    "gettext.NullTranslations.__init__": [
        "gettext.NullTranslations._parse"
    ],
    "gettext.NullTranslations.add_fallback": [
        "gettext.NullTranslations.add_fallback"
    ],
    "gettext.NullTranslations.gettext": [
        "gettext.NullTranslations.gettext"
    ],
    "gettext.NullTranslations.lgettext": [
        "warnings.warn"
    ],
    "gettext.NullTranslations.lngettext": [
        "warnings.warn"
    ],
    "gettext.NullTranslations.ngettext": [
        "gettext.NullTranslations.ngettext"
    ],
    "gettext.NullTranslations.npgettext": [
        "gettext.NullTranslations.npgettext"
    ],
    "gettext.NullTranslations.output_charset": [
        "warnings.warn"
    ],
    "gettext.NullTranslations.pgettext": [
        "gettext.NullTranslations.pgettext"
    ],
    "gettext.NullTranslations.set_output_charset": [
        "warnings.warn"
    ],
    "gettext._as_int": [
        "warnings.warn"
    ],
    "gettext._expand_lang": [
        "locale.normalize"
    ],
    "gettext._parse": [
        "gettext._parse"
    ],
    "gettext._tokenize": [
        "re.finditer"
    ],
    "gettext.bind_textdomain_codeset": [
        "warnings.warn"
    ],
    "gettext.c2py": [
        "gettext._tokenize"
    ],
    "gettext.dgettext": [
        "gettext.translation"
    ],
    "gettext.dngettext": [
        "gettext.translation"
    ],
    "gettext.dnpgettext": [
        "gettext.translation"
    ],
    "gettext.dpgettext": [
        "gettext.translation"
    ],
    "gettext.find": [
        "gettext._expand_lang"
    ],
    "gettext.gettext": [
        "gettext.dgettext"
    ],
    "gettext.install": [
        "gettext.translation"
    ],
    "gettext.ldgettext": [
        "warnings.warn"
    ],
    "gettext.ldngettext": [
        "warnings.warn"
    ],
    "gettext.lgettext": [
        "warnings.warn"
    ],
    "gettext.lngettext": [
        "warnings.warn"
    ],
    "gettext.ngettext": [
        "gettext.dngettext"
    ],
    "gettext.npgettext": [
        "gettext.dnpgettext"
    ],
    "gettext.pgettext": [
        "gettext.dpgettext"
    ],
    "gettext.translation": [
        "warnings.warn"
    ],
    "grouping._group": [
        "threading.enumerate"
    ],
    "grouping._group_matching": [
        "threading.enumerate"
    ],
    "grouping.align_comments": [
        "sql.TokenList.token_prev"
    ],
    "grouping.group_aliased": [
        "sql.TokenList.token_next_by"
    ],
    "grouping.group_arrays": [
        "utils.imt"
    ],
    "grouping.group_as": [
        "utils.imt"
    ],
    "grouping.group_assignment": [
        "sql.TokenList.token_next_by"
    ],
    "grouping.group_begin": [
        "grouping._group_matching"
    ],
    "grouping.group_brackets": [
        "grouping._group_matching"
    ],
    "grouping.group_case": [
        "grouping._group_matching"
    ],
    "grouping.group_comments": [
        "utils.imt"
    ],
    "grouping.group_comparison": [
        "utils.imt"
    ],
    "grouping.group_for": [
        "grouping._group_matching"
    ],
    "grouping.group_functions": [
        "sql.TokenList.token_next_by"
    ],
    "grouping.group_identifier": [
        "sql.TokenList.token_next_by"
    ],
    "grouping.group_identifier_list": [
        "utils.imt"
    ],
    "grouping.group_if": [
        "grouping._group_matching"
    ],
    "grouping.group_operator": [
        "utils.imt"
    ],
    "grouping.group_order": [
        "utils.imt"
    ],
    "grouping.group_parenthesis": [
        "grouping._group_matching"
    ],
    "grouping.group_period": [
        "utils.imt"
    ],
    "grouping.group_typecasts": [
        "grouping._group"
    ],
    "grouping.group_typed_literal": [
        "utils.imt"
    ],
    "grouping.group_tzcasts": [
        "grouping._group"
    ],
    "grouping.group_values": [
        "sql.TokenList.token_next_by"
    ],
    "grouping.group_where": [
        "sql.TokenList.token_next_by"
    ],
    "heapq._heapify_max": [
        "heapq._siftup_max"
    ],
    "heapq._heappop_max": [
        "heapq._siftup_max"
    ],
    "heapq._heapreplace_max": [
        "heapq._siftup_max"
    ],
    "heapq._siftup": [
        "heapq._siftdown"
    ],
    "heapq._siftup_max": [
        "heapq._siftdown_max"
    ],
    "heapq.heapify": [
        "heapq._siftup"
    ],
    "heapq.heappop": [
        "heapq._siftup"
    ],
    "heapq.heappush": [
        "heapq._siftdown"
    ],
    "heapq.heappushpop": [
        "heapq._siftup"
    ],
    "heapq.heapreplace": [
        "heapq._siftup"
    ],
    "heapq.merge": [
        "threading.enumerate"
    ],
    "heapq.nlargest": [
        "heapq.heapify"
    ],
    "heapq.nsmallest": [
        "heapq._heapify_max"
    ],
    "keywords": [
        "re.compile"
    ],
    "keywords.is_keyword": [
        "__init__.UserString.upper"
    ],
    "lexer.Lexer.get_tokens": [
        "utils.consume"
    ],
    "lexer.tokenize": [
        "lexer.Lexer.get_tokens"
    ],
    "linecache.getline": [
        "linecache.getlines"
    ],
    "linecache.getlines": [
        "linecache.updatecache"
    ],
    "linecache.lazycache": [
        "__init__.UserString.startswith"
    ],
    "linecache.updatecache": [
        "tokenize.open"
    ],
    "locale": [
        "re.compile"
    ],
    "locale._append_modifier": [
        "locale._replace_encoding"
    ],
    "locale._format": [
        "locale.localeconv"
    ],
    "locale._group": [
        "locale.localeconv"
    ],
    "locale._parse_localename": [
        "locale.normalize"
    ],
    "locale._print_locale": [
        "locale.setlocale"
    ],
    "locale._replace_encoding": [
        "__init__.UserString.replace"
    ],
    "locale._test": [
        "locale.str"
    ],
    "locale.atof": [
        "locale.delocalize"
    ],
    "locale.atoi": [
        "locale.delocalize"
    ],
    "locale.currency": [
        "operator.abs"
    ],
    "locale.delocalize": [
        "locale.localeconv"
    ],
    "locale.format": [
        "warnings.warn"
    ],
    "locale.format_string": [
        "re.finditer"
    ],
    "locale.getdefaultlocale": [
        "locale._parse_localename"
    ],
    "locale.getlocale": [
        "locale._parse_localename"
    ],
    "locale.normalize": [
        "locale._replace_encoding"
    ],
    "locale.resetlocale": [
        "locale.getdefaultlocale"
    ],
    "locale.setlocale": [
        "locale.normalize"
    ],
    "locale.str": [
        "locale._format"
    ],
    "lzma.LZMAFile.close": [
        "lzma.LZMAFile.write"
    ],
    "lzma.LZMAFile.fileno": [
        "lzma.LZMAFile.fileno"
    ],
    "lzma.LZMAFile.peek": [
        "lzma.LZMAFile.peek"
    ],
    "lzma.LZMAFile.read": [
        "lzma.LZMAFile.read"
    ],
    "lzma.LZMAFile.read1": [
        "lzma.LZMAFile.read1"
    ],
    "lzma.LZMAFile.readable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.LZMAFile.readline": [
        "lzma.LZMAFile.readline"
    ],
    "lzma.LZMAFile.seek": [
        "lzma.LZMAFile.seek"
    ],
    "lzma.LZMAFile.seekable": [
        "lzma.LZMAFile.seekable"
    ],
    "lzma.LZMAFile.tell": [
        "lzma.LZMAFile.tell"
    ],
    "lzma.LZMAFile.writable": [
        "_compression.BaseStream._check_not_closed"
    ],
    "lzma.LZMAFile.write": [
        "lzma.LZMAFile.write"
    ],
    "lzma.compress": [
        "bz2.compress"
    ],
    "lzma.decompress": [
        "bz2.decompress"
    ],
    "lzma.open": [
        "lzma.LZMAFile.__init__"
    ],
    "ntpath._abspath_fallback": [
        "ntpath.normpath"
    ],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "ntpath.commonpath": [
        "threading.enumerate"
    ],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "ntpath.expanduser": [
        "ntpath.join"
    ],
    "ntpath.isabs": [
        "ntpath.splitdrive"
    ],
    "ntpath.islink": [
        "stat.S_ISLNK"
    ],
    "ntpath.ismount": [
        "posixpath.abspath"
    ],
    "ntpath.join": [
        "ntpath.splitdrive"
    ],
    "ntpath.normcase": [
        "__init__.UserString.replace"
    ],
    "ntpath.normpath": [
        "ntpath.splitdrive"
    ],
    "ntpath.relpath": [
        "posixpath.abspath"
    ],
    "ntpath.split": [
        "ntpath.splitdrive"
    ],
    "ntpath.splitdrive": [
        "__init__.UserString.replace"
    ],
    "ntpath.splitext": [
        "genericpath._splitext"
    ],
    "operator.indexOf": [
        "threading.enumerate"
    ],
    "operator.methodcaller.__reduce__": [
        "functools.partial.__new__"
    ],
    "operator.methodcaller.__repr__": [
        "__init__.UserList.extend"
    ],
    "os": [
        "os._get_exports_list"
    ],
    "os._AddedDllDirectory.__exit__": [
        "os._AddedDllDirectory.close"
    ],
    "os._createenviron": [
        "os._Environ.__init__"
    ],
    "os._execvpe": [
        "posixpath.join"
    ],
    "os._fspath": [
        "os.PathLike.__fspath__"
    ],
    "os._fwalk": [
        "posixpath.join"
    ],
    "os._wrap_close.__exit__": [
        "os._wrap_close.close"
    ],
    "os._wrap_close.close": [
        "os._wrap_close.close"
    ],
    "os.add_dll_directory": [
        "os._AddedDllDirectory.__init__"
    ],
    "os.execlp": [
        "os.execvp"
    ],
    "os.execlpe": [
        "os.execvpe"
    ],
    "os.execvp": [
        "os._execvpe"
    ],
    "os.execvpe": [
        "os._execvpe"
    ],
    "os.fwalk": [
        "stat.S_ISDIR"
    ],
    "os.get_exec_path": [
        "warnings.simplefilter"
    ],
    "os.makedirs": [
        "posixpath.split"
    ],
    "os.popen": [
        "os._wrap_close.__init__"
    ],
    "os.removedirs": [
        "posixpath.split"
    ],
    "os.renames": [
        "posixpath.split"
    ],
    "os.spawnl": [
        "os.spawnv"
    ],
    "os.spawnle": [
        "os.spawnve"
    ],
    "os.spawnlp": [
        "os.spawnvp"
    ],
    "os.spawnlpe": [
        "os.spawnvpe"
    ],
    "os.spawnv": [
        "os._spawnvef"
    ],
    "os.spawnve": [
        "os._spawnvef"
    ],
    "os.spawnvp": [
        "os._spawnvef"
    ],
    "os.spawnvpe": [
        "os._spawnvef"
    ],
    "os.walk": [
        "os.walk"
    ],
    "others.SerializerUnicode.process": [
        "utils.split_unquoted_newlines"
    ],
    "others.SpacesAroundOperatorsFilter._process": [
        "sql.TokenList.token_prev"
    ],
    "others.SpacesAroundOperatorsFilter.process": [
        "sql.TokenList.get_sublists"
    ],
    "others.StripCommentsFilter._process": [
        "sre_parse.State.groups"
    ],
    "others.StripCommentsFilter.process": [
        "sql.TokenList.get_sublists"
    ],
    "others.StripWhitespaceFilter._stripws": [
        "__init__.UserString.lower"
    ],
    "others.StripWhitespaceFilter._stripws_identifierlist": [
        "others.StripWhitespaceFilter._stripws_default"
    ],
    "others.StripWhitespaceFilter._stripws_parenthesis": [
        "others.StripWhitespaceFilter._stripws_default"
    ],
    "others.StripWhitespaceFilter.process": [
        "sql.TokenList.get_sublists"
    ],
    "output.OutputFilter.process": [
        "output.OutputFilter._process"
    ],
    "output.OutputPHPFilter._process": [
        "__init__.UserString.replace"
    ],
    "output.OutputPythonFilter._process": [
        "__init__.UserString.replace"
    ],
    "pickle": [
        "re.match"
    ],
    "pickle._Framer.end_framing": [
        "pickle._Framer.commit_frame"
    ],
    "pickle._Framer.write": [
        "pickle._Framer.write"
    ],
    "pickle._Framer.write_large_bytes": [
        "pickle._Framer.commit_frame"
    ],
    "pickle._Pickler.__init__": [
        "pickle._Framer.__init__"
    ],
    "pickle._Pickler.dump": [
        "pickle._Pickler.save"
    ],
    "pickle._Pickler.memoize": [
        "pickle._Pickler.put"
    ],
    "pickle._Pickler.save": [
        "pickle._Pickler.save_reduce"
    ],
    "pickle._Pickler.save_bytearray": [
        "pickle._Pickler.save_reduce"
    ],
    "pickle._Pickler.save_bytes": [
        "pickle._Pickler.save_reduce"
    ],
    "pickle._Pickler.save_dict": [
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_frozenset": [
        "pickle._Pickler.save_reduce"
    ],
    "pickle._Pickler.save_global": [
        "pickle.whichmodule"
    ],
    "pickle._Pickler.save_list": [
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_long": [
        "pickle.encode_long"
    ],
    "pickle._Pickler.save_pers": [
        "pickle._Pickler.save"
    ],
    "pickle._Pickler.save_picklebuffer": [
        "pickle._Pickler.save_bytes"
    ],
    "pickle._Pickler.save_reduce": [
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_set": [
        "pickle._Pickler.save_reduce"
    ],
    "pickle._Pickler.save_str": [
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_tuple": [
        "pickle._Pickler.memoize"
    ],
    "pickle._Pickler.save_type": [
        "pickle._Pickler.save_reduce"
    ],
    "pickle._Unframer.load_frame": [
        "pickle._Unframer.read"
    ],
    "pickle._Unframer.read": [
        "pickle._Unframer.read"
    ],
    "pickle._Unframer.readinto": [
        "pickle._Unframer.readinto"
    ],
    "pickle._Unframer.readline": [
        "pickle._Unframer.readline"
    ],
    "pickle._Unpickler._instantiate": [
        "locale.str"
    ],
    "pickle._Unpickler.find_class": [
        "pickle._getattribute"
    ],
    "pickle._Unpickler.get_extension": [
        "pickle._Unpickler.find_class"
    ],
    "pickle._Unpickler.load": [
        "pickle._Unframer.__init__"
    ],
    "pickle._Unpickler.load_additems": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_appends": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_binpersid": [
        "pickle._Unpickler.persistent_load"
    ],
    "pickle._Unpickler.load_binstring": [
        "pickle._Unpickler._decode_string"
    ],
    "pickle._Unpickler.load_binunicode": [
        "locale.str"
    ],
    "pickle._Unpickler.load_binunicode8": [
        "locale.str"
    ],
    "pickle._Unpickler.load_dict": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_ext1": [
        "pickle._Unpickler.get_extension"
    ],
    "pickle._Unpickler.load_ext2": [
        "pickle._Unpickler.get_extension"
    ],
    "pickle._Unpickler.load_ext4": [
        "pickle._Unpickler.get_extension"
    ],
    "pickle._Unpickler.load_frame": [
        "pickle._Unpickler.load_frame"
    ],
    "pickle._Unpickler.load_frozenset": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_global": [
        "pickle._Unpickler.find_class"
    ],
    "pickle._Unpickler.load_inst": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_list": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_long1": [
        "pickle.decode_long"
    ],
    "pickle._Unpickler.load_long4": [
        "pickle.decode_long"
    ],
    "pickle._Unpickler.load_obj": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_persid": [
        "pickle._Unpickler.persistent_load"
    ],
    "pickle._Unpickler.load_pop": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_pop_mark": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_setitems": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_short_binstring": [
        "pickle._Unpickler._decode_string"
    ],
    "pickle._Unpickler.load_short_binunicode": [
        "locale.str"
    ],
    "pickle._Unpickler.load_stack_global": [
        "pickle._Unpickler.find_class"
    ],
    "pickle._Unpickler.load_stop": [
        "pickle._Stop.__init__"
    ],
    "pickle._Unpickler.load_string": [
        "pickle._Unpickler._decode_string"
    ],
    "pickle._Unpickler.load_tuple": [
        "pickle._Unpickler.pop_mark"
    ],
    "pickle._Unpickler.load_unicode": [
        "locale.str"
    ],
    "pickle._dump": [
        "pickle._Pickler.__init__"
    ],
    "pickle._dumps": [
        "pickle._Pickler.__init__"
    ],
    "pickle._load": [
        "pickle._Unpickler.__init__"
    ],
    "pickle._loads": [
        "pickle._Unpickler.__init__"
    ],
    "pickle.whichmodule": [
        "pickle._getattribute"
    ],
    "posixpath._joinrealpath": [
        "posixpath.split"
    ],
    "posixpath.abspath": [
        "posixpath.normpath"
    ],
    "posixpath.basename": [
        "posixpath._get_sep"
    ],
    "posixpath.commonpath": [
        "threading.enumerate"
    ],
    "posixpath.dirname": [
        "posixpath._get_sep"
    ],
    "posixpath.expanduser": [
        "posixpath._get_sep"
    ],
    "posixpath.expandvars": [
        "re.search"
    ],
    "posixpath.isabs": [
        "posixpath._get_sep"
    ],
    "posixpath.islink": [
        "stat.S_ISLNK"
    ],
    "posixpath.ismount": [
        "stat.S_ISLNK"
    ],
    "posixpath.join": [
        "posixpath._get_sep"
    ],
    "posixpath.normpath": [
        "__init__.UserString.startswith"
    ],
    "posixpath.realpath": [
        "posixpath.abspath"
    ],
    "posixpath.relpath": [
        "posixpath.join"
    ],
    "posixpath.split": [
        "posixpath._get_sep"
    ],
    "posixpath.splitext": [
        "genericpath._splitext"
    ],
    "re": [
        "sre_compile.compile"
    ],
    "re.Scanner.__init__": [
        "sre_parse.parse"
    ],
    "re.Scanner.scan": [
        "re.match"
    ],
    "re._compile": [
        "sre_compile.isstring"
    ],
    "re._compile_repl": [
        "sre_parse.parse_template"
    ],
    "re._expand": [
        "sre_parse.parse_template"
    ],
    "re._subx": [
        "sre_parse.expand_template"
    ],
    "re.compile": [
        "re._compile"
    ],
    "re.escape": [
        "locale.str"
    ],
    "re.findall": [
        "re._compile"
    ],
    "re.finditer": [
        "re._compile"
    ],
    "re.fullmatch": [
        "re._compile"
    ],
    "re.match": [
        "re._compile"
    ],
    "re.search": [
        "re._compile"
    ],
    "re.split": [
        "re._compile"
    ],
    "re.sub": [
        "re._compile"
    ],
    "re.subn": [
        "re._compile"
    ],
    "re.template": [
        "re._compile"
    ],
    "reindent.ReindentFilter._get_offset": [
        "reindent.ReindentFilter._flatten_up_to_token"
    ],
    "reindent.ReindentFilter._next_token": [
        "sql.TokenList.token_next_by"
    ],
    "reindent.ReindentFilter._process": [
        "__init__.UserString.lower"
    ],
    "reindent.ReindentFilter._process_case": [
        "utils.offset"
    ],
    "reindent.ReindentFilter._process_default": [
        "sql.TokenList.get_sublists"
    ],
    "reindent.ReindentFilter._process_function": [
        "reindent.ReindentFilter._process_default"
    ],
    "reindent.ReindentFilter._process_identifierlist": [
        "utils.offset"
    ],
    "reindent.ReindentFilter._process_parenthesis": [
        "utils.offset"
    ],
    "reindent.ReindentFilter._process_values": [
        "sql.TokenList.token_next_by"
    ],
    "reindent.ReindentFilter._process_where": [
        "utils.indent"
    ],
    "reindent.ReindentFilter._split_kwds": [
        "sql.TokenList.token_prev"
    ],
    "reindent.ReindentFilter._split_statements": [
        "sql.TokenList.token_prev"
    ],
    "reindent.ReindentFilter.process": [
        "reindent.ReindentFilter._process"
    ],
    "reprlib": [
        "reprlib.Repr.__init__"
    ],
    "reprlib.Repr.repr": [
        "reprlib.Repr.repr1"
    ],
    "reprlib.Repr.repr1": [
        "reprlib.Repr.repr_instance"
    ],
    "reprlib.Repr.repr_array": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_deque": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_dict": [
        "reprlib._possibly_sorted"
    ],
    "reprlib.Repr.repr_frozenset": [
        "reprlib._possibly_sorted"
    ],
    "reprlib.Repr.repr_list": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.Repr.repr_set": [
        "reprlib._possibly_sorted"
    ],
    "reprlib.Repr.repr_tuple": [
        "reprlib.Repr._repr_iterable"
    ],
    "reprlib.recursive_repr": [
        "_weakrefset.WeakSet.discard"
    ],
    "right_margin.RightMarginFilter._process": [
        "right_margin.RightMarginFilter._process"
    ],
    "shutil._access_check": [
        "genericpath.isdir"
    ],
    "shutil._basename": [
        "__init__.UserString.rstrip"
    ],
    "shutil._copytree": [
        "shutil.copytree"
    ],
    "shutil._destinsrc": [
        "posixpath.abspath"
    ],
    "shutil._ensure_directory": [
        "os.makedirs"
    ],
    "shutil._find_unpack_format": [
        "__init__.UserString.endswith"
    ],
    "shutil._make_tarball": [
        "shutil._get_uid"
    ],
    "shutil._make_zipfile": [
        "os.walk"
    ],
    "shutil._rmtree_isdir": [
        "stat.S_ISDIR"
    ],
    "shutil._rmtree_islink": [
        "stat.S_ISLNK"
    ],
    "shutil._rmtree_safe_fd": [
        "stat.S_ISDIR"
    ],
    "shutil._rmtree_unsafe": [
        "shutil._rmtree_unsafe"
    ],
    "shutil._samefile": [
        "posixpath.abspath"
    ],
    "shutil._unpack_zipfile": [
        "shutil._ensure_directory"
    ],
    "shutil.chown": [
        "shutil._get_uid"
    ],
    "shutil.copy": [
        "shutil.copymode"
    ],
    "shutil.copy2": [
        "shutil.copystat"
    ],
    "shutil.copyfile": [
        "threading.enumerate"
    ],
    "shutil.copymode": [
        "stat.S_IMODE"
    ],
    "shutil.copystat": [
        "stat.S_IMODE"
    ],
    "shutil.copytree": [
        "shutil._copytree"
    ],
    "shutil.get_archive_formats": [
        "__init__.UserList.sort"
    ],
    "shutil.get_unpack_formats": [
        "__init__.UserList.sort"
    ],
    "shutil.ignore_patterns": [
        "fnmatch.filter"
    ],
    "shutil.make_archive": [
        "posixpath.abspath"
    ],
    "shutil.move": [
        "shutil.rmtree"
    ],
    "shutil.register_unpack_format": [
        "shutil._check_unpack_options"
    ],
    "shutil.rmtree": [
        "shutil._rmtree_unsafe"
    ],
    "shutil.unpack_archive": [
        "shutil._find_unpack_format"
    ],
    "shutil.which": [
        "tokenize.any"
    ],
    "sql.Function.get_parameters": [
        "utils.imt"
    ],
    "sql.Identifier.get_ordering": [
        "sql.TokenList.token_next_by"
    ],
    "sql.Identifier.get_typecast": [
        "sql.TokenList.token_next_by"
    ],
    "sql.Identifier.is_wildcard": [
        "sql.TokenList.token_next_by"
    ],
    "sql.NameAliasMixin.get_alias": [
        "sql.TokenList.token_next_by"
    ],
    "sql.NameAliasMixin.get_real_name": [
        "sql.TokenList.token_next_by"
    ],
    "sql.Statement.get_type": [
        "sql.TokenList.token_next"
    ],
    "sql.Token.__init__": [
        "locale.str"
    ],
    "sql.Token.__repr__": [
        "sql.Token._get_repr_value"
    ],
    "sql.Token._get_repr_name": [
        "locale.str"
    ],
    "sql.Token._get_repr_value": [
        "re.sub"
    ],
    "sql.Token.match": [
        "re.search"
    ],
    "sql.TokenList.__init__": [
        "locale.str"
    ],
    "sql.TokenList.__str__": [
        "sql.TokenList.flatten"
    ],
    "sql.TokenList._get_first_name": [
        "utils.remove_quotes"
    ],
    "sql.TokenList._pprint_tree": [
        "threading.enumerate"
    ],
    "sql.TokenList.get_name": [
        "sql.TokenList.get_real_name"
    ],
    "sql.TokenList.get_parent_name": [
        "utils.remove_quotes"
    ],
    "sql.TokenList.get_token_at_offset": [
        "sql.TokenList.flatten"
    ],
    "sql.TokenList.group_tokens": [
        "locale.str"
    ],
    "sql.TokenList.has_alias": [
        "sql.TokenList.get_alias"
    ],
    "sql.TokenList.insert_after": [
        "sql.TokenList.token_next"
    ],
    "sql.TokenList.insert_before": [
        "sql.TokenList.token_index"
    ],
    "sql.TokenList.token_first": [
        "utils.imt"
    ],
    "sql.TokenList.token_index": [
        "sql.TokenList.token_index"
    ],
    "sql.TokenList.token_matching": [
        "sql.TokenList._token_matching"
    ],
    "sql.TokenList.token_next": [
        "utils.imt"
    ],
    "sql.TokenList.token_next_by": [
        "utils.imt"
    ],
    "sql.TokenList.token_not_matching": [
        "sql.TokenList._token_matching"
    ],
    "sql.TokenList.token_prev": [
        "sql.TokenList.token_next"
    ],
    "sre_compile._code": [
        "sre_compile._compile_info"
    ],
    "sre_compile._compile": [
        "sre_parse.SubPattern.getwidth"
    ],
    "sre_compile._compile_charset": [
        "sre_constants.error.__init__"
    ],
    "sre_compile._compile_info": [
        "sre_parse.SubPattern.getwidth"
    ],
    "sre_compile._get_charset_prefix": [
        "tokenize.any"
    ],
    "sre_compile._get_literal_prefix": [
        "sre_compile._get_literal_prefix"
    ],
    "sre_compile._optimize_charset": [
        "tokenize.any"
    ],
    "sre_compile._simple": [
        "sre_compile._simple"
    ],
    "sre_compile.compile": [
        "sre_parse.parse"
    ],
    "sre_compile.dis": [
        "sre_compile._hex_code"
    ],
    "sre_constants": [
        "sre_constants.dump"
    ],
    "sre_constants._makecodes": [
        "threading.enumerate"
    ],
    "sre_constants.error.__init__": [
        "__init__.UserString.rfind"
    ],
    "sre_parse.State.checklookbehindgroup": [
        "sre_parse.State.checkgroup"
    ],
    "sre_parse.State.closegroup": [
        "sre_parse.SubPattern.getwidth"
    ],
    "sre_parse.State.opengroup": [
        "sre_constants.error.__init__"
    ],
    "sre_parse.SubPattern.__getitem__": [
        "sre_parse.SubPattern.__init__"
    ],
    "sre_parse.SubPattern.append": [
        "sre_parse.SubPattern.append"
    ],
    "sre_parse.SubPattern.dump": [
        "threading.enumerate"
    ],
    "sre_parse.SubPattern.getwidth": [
        "sre_parse.SubPattern.getwidth"
    ],
    "sre_parse.SubPattern.insert": [
        "sre_parse.SubPattern.insert"
    ],
    "sre_parse.Tokenizer.__init__": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.__next": [
        "sre_constants.error.__init__"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.Tokenizer.get": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.getuntil": [
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.getwhile": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse._class_escape": [
        "sre_parse.Tokenizer.getwhile"
    ],
    "sre_parse._escape": [
        "sre_parse.Tokenizer.getwhile"
    ],
    "sre_parse._parse": [
        "warnings.warn"
    ],
    "sre_parse._parse_flags": [
        "__init__.UserString.isalpha"
    ],
    "sre_parse._parse_sub": [
        "sre_parse._uniq"
    ],
    "sre_parse.expand_template": [
        "sre_constants.error.__init__"
    ],
    "sre_parse.parse": [
        "sre_parse.fix_flags"
    ],
    "sre_parse.parse_template": [
        "sre_parse.Tokenizer.match"
    ],
    "stat.S_ISBLK": [
        "stat.S_IFMT"
    ],
    "stat.S_ISCHR": [
        "stat.S_IFMT"
    ],
    "stat.S_ISDIR": [
        "stat.S_IFMT"
    ],
    "stat.S_ISFIFO": [
        "stat.S_IFMT"
    ],
    "stat.S_ISLNK": [
        "stat.S_IFMT"
    ],
    "stat.S_ISREG": [
        "stat.S_IFMT"
    ],
    "stat.S_ISSOCK": [
        "stat.S_IFMT"
    ],
    "statement_splitter.StatementSplitter.__init__": [
        "statement_splitter.StatementSplitter._reset"
    ],
    "statement_splitter.StatementSplitter._change_splitlevel": [
        "__init__.UserString.upper"
    ],
    "statement_splitter.StatementSplitter.process": [
        "statement_splitter.StatementSplitter._reset"
    ],
    "threading": [
        "threading._MainThread.__init__"
    ],
    "threading.Barrier.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Barrier._break": [
        "threading.Condition.notify_all"
    ],
    "threading.Barrier._enter": [
        "threading.Barrier.wait"
    ],
    "threading.Barrier._exit": [
        "threading.Condition.notify_all"
    ],
    "threading.Barrier._release": [
        "threading.Condition.notify_all"
    ],
    "threading.Barrier._wait": [
        "threading.Condition.wait_for"
    ],
    "threading.Barrier.abort": [
        "threading.Barrier._break"
    ],
    "threading.Barrier.reset": [
        "threading.Condition.notify_all"
    ],
    "threading.Barrier.wait": [
        "threading.Barrier._wait"
    ],
    "threading.BoundedSemaphore.__init__": [
        "threading.Semaphore.__init__"
    ],
    "threading.BoundedSemaphore.release": [
        "threading.Condition.notify"
    ],
    "threading.Condition.__enter__": [
        "threading.Condition.__enter__"
    ],
    "threading.Condition.__exit__": [
        "threading.Condition.__exit__"
    ],
    "threading.Condition.__init__": [
        "threading.RLock"
    ],
    "threading.Condition.notify": [
        "threading.Condition._is_owned"
    ],
    "threading.Condition.notify_all": [
        "threading.Condition.notify"
    ],
    "threading.Condition.wait": [
        "threading.Condition._release_save"
    ],
    "threading.Condition.wait_for": [
        "threading.Condition.wait"
    ],
    "threading.Event.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Event._reset_internal_locks": [
        "threading.Event.__init__"
    ],
    "threading.Event.set": [
        "threading.Condition.notify_all"
    ],
    "threading.Event.wait": [
        "threading.Event.wait"
    ],
    "threading.Semaphore.__exit__": [
        "threading.Semaphore.release"
    ],
    "threading.Semaphore.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Semaphore.release": [
        "threading.Condition.notify"
    ],
    "threading.Thread.__init__": [
        "threading.current_thread"
    ],
    "threading.Thread.__repr__": [
        "threading.Thread.is_alive"
    ],
    "threading.Thread._bootstrap": [
        "threading.Thread._bootstrap_inner"
    ],
    "threading.Thread._bootstrap_inner": [
        "threading.Thread.run"
    ],
    "threading.Thread._reset_internal_locks": [
        "threading.Thread._set_tstate_lock"
    ],
    "threading.Thread._stop": [
        "_weakrefset.WeakSet.discard"
    ],
    "threading.Thread._wait_for_tstate_lock": [
        "threading.Thread._stop"
    ],
    "threading.Thread.daemon": [
        "threading.Event.is_set"
    ],
    "threading.Thread.isAlive": [
        "warnings.warn"
    ],
    "threading.Thread.is_alive": [
        "threading.Thread._wait_for_tstate_lock"
    ],
    "threading.Thread.join": [
        "threading.current_thread"
    ],
    "threading.Thread.name": [
        "locale.str"
    ],
    "threading.Thread.start": [
        "threading.Event.is_set"
    ],
    "threading.Timer.__init__": [
        "threading.Thread.__init__"
    ],
    "threading.Timer.cancel": [
        "threading.Event.set"
    ],
    "threading.Timer.run": [
        "threading.Event.set"
    ],
    "threading._DummyThread.__init__": [
        "threading._newname"
    ],
    "threading._DummyThread.is_alive": [
        "threading.Event.is_set"
    ],
    "threading._MainThread.__init__": [
        "threading.Thread._set_tstate_lock"
    ],
    "threading._RLock.__exit__": [
        "threading._RLock.release"
    ],
    "threading._RLock._acquire_restore": [
        "threading._RLock.acquire"
    ],
    "threading._RLock._release_save": [
        "threading._RLock.release"
    ],
    "threading._RLock.acquire": [
        "threading._RLock.acquire"
    ],
    "threading._RLock.release": [
        "threading._RLock.release"
    ],
    "threading._after_fork": [
        "threading._enumerate"
    ],
    "threading._shutdown": [
        "threading.Thread._stop"
    ],
    "threading.current_thread": [
        "threading._DummyThread.__init__"
    ],
    "token": [
        "__init__.UserString.startswith"
    ],
    "tokenize": [
        "tokenize.maybe"
    ],
    "tokenize.Untokenizer.untokenize": [
        "tokenize.Untokenizer.compat"
    ],
    "tokenize._all_string_prefixes": [
        "__init__.UserString.upper"
    ],
    "tokenize._compile": [
        "re.compile"
    ],
    "tokenize._get_normal_name": [
        "__init__.UserString.startswith"
    ],
    "tokenize._tokenize": [
        "tokenize._compile"
    ],
    "tokenize.any": [
        "tokenize.group"
    ],
    "tokenize.detect_encoding": [
        "tokenize._get_normal_name"
    ],
    "tokenize.generate_tokens": [
        "tokenize._tokenize"
    ],
    "tokenize.main": [
        "tokenize.tokenize"
    ],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.open": [
        "tokenize.detect_encoding"
    ],
    "tokenize.tokenize": [
        "tokenize.detect_encoding"
    ],
    "tokenize.untokenize": [
        "tokenize.Untokenizer.untokenize"
    ],
    "tokens.IdentifierCaseFilter.process": [
        "__init__.UserString.strip"
    ],
    "traceback.FrameSummary.line": [
        "linecache.getline"
    ],
    "traceback.StackSummary.extract": [
        "traceback.FrameSummary.__init__"
    ],
    "traceback.StackSummary.format": [
        "__init__.UserString.strip"
    ],
    "traceback.StackSummary.from_list": [
        "traceback.FrameSummary.__init__"
    ],
    "traceback.TracebackException.__init__": [
        "traceback.walk_tb"
    ],
    "traceback.TracebackException._load_lines": [
        "traceback.TracebackException._load_lines"
    ],
    "traceback.TracebackException.format": [
        "traceback.TracebackException.format_exception_only"
    ],
    "traceback.TracebackException.format_exception_only": [
        "traceback._format_final_exc_line"
    ],
    "traceback._format_final_exc_line": [
        "traceback._some_str"
    ],
    "traceback._some_str": [
        "locale.str"
    ],
    "traceback.extract_stack": [
        "traceback.walk_stack"
    ],
    "traceback.extract_tb": [
        "traceback.walk_tb"
    ],
    "traceback.format_exc": [
        "traceback.format_exception"
    ],
    "traceback.format_exception": [
        "traceback.TracebackException.__init__"
    ],
    "traceback.format_exception_only": [
        "traceback.TracebackException.format_exception_only"
    ],
    "traceback.format_list": [
        "traceback.StackSummary.from_list"
    ],
    "traceback.format_stack": [
        "traceback.format_list"
    ],
    "traceback.format_tb": [
        "traceback.extract_tb"
    ],
    "traceback.print_exc": [
        "traceback.print_exception"
    ],
    "traceback.print_exception": [
        "traceback.TracebackException.__init__"
    ],
    "traceback.print_last": [
        "traceback.print_exception"
    ],
    "traceback.print_list": [
        "traceback.StackSummary.from_list"
    ],
    "traceback.print_stack": [
        "traceback.print_list"
    ],
    "traceback.print_tb": [
        "traceback.print_list"
    ],
    "tracemalloc.Filter.__init__": [
        "tracemalloc._normalize_filename"
    ],
    "tracemalloc.Filter._match": [
        "tracemalloc.Filter._match_traceback"
    ],
    "tracemalloc.Filter._match_frame": [
        "tracemalloc.Filter._match_frame_impl"
    ],
    "tracemalloc.Filter._match_frame_impl": [
        "tracemalloc._normalize_filename"
    ],
    "tracemalloc.Filter._match_traceback": [
        "tracemalloc.Filter._match_frame_impl"
    ],
    "tracemalloc.Snapshot.__init__": [
        "tracemalloc._Traces.__init__"
    ],
    "tracemalloc.Snapshot._filter_trace": [
        "tokenize.any"
    ],
    "tracemalloc.Snapshot._group_by": [
        "tracemalloc.Traceback.__init__"
    ],
    "tracemalloc.Snapshot.compare_to": [
        "tracemalloc._compare_grouped_stats"
    ],
    "tracemalloc.Snapshot.filter_traces": [
        "tracemalloc.Snapshot._filter_trace"
    ],
    "tracemalloc.Snapshot.statistics": [
        "tracemalloc.Snapshot._group_by"
    ],
    "tracemalloc.Statistic.__str__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.StatisticDiff.__str__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.StatisticDiff._sort_key": [
        "operator.abs"
    ],
    "tracemalloc.Trace.__repr__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.Trace.__str__": [
        "tracemalloc._format_size"
    ],
    "tracemalloc.Trace.traceback": [
        "tracemalloc.Traceback.__init__"
    ],
    "tracemalloc.Traceback.__getitem__": [
        "tracemalloc.Frame.__init__"
    ],
    "tracemalloc.Traceback.__str__": [
        "locale.str"
    ],
    "tracemalloc.Traceback.format": [
        "linecache.getline"
    ],
    "tracemalloc._Traces.__getitem__": [
        "tracemalloc.Trace.__init__"
    ],
    "tracemalloc._compare_grouped_stats": [
        "tracemalloc.StatisticDiff.__init__"
    ],
    "tracemalloc._format_size": [
        "operator.abs"
    ],
    "tracemalloc._normalize_filename": [
        "__init__.UserString.endswith"
    ],
    "tracemalloc.get_object_traceback": [
        "tracemalloc.Traceback.__init__"
    ],
    "tracemalloc.take_snapshot": [
        "tracemalloc.Snapshot.__init__"
    ],
    "types": [
        "types._g"
    ],
    "types._GeneratorWrapper.close": [
        "types._GeneratorWrapper.close"
    ],
    "types._GeneratorWrapper.send": [
        "types._GeneratorWrapper.send"
    ],
    "types._GeneratorWrapper.throw": [
        "types._GeneratorWrapper.throw"
    ],
    "types.coroutine": [
        "types._GeneratorWrapper.__init__"
    ],
    "types.new_class": [
        "types.resolve_bases"
    ],
    "types.prepare_class": [
        "types._calculate_meta"
    ],
    "types.resolve_bases": [
        "threading.enumerate"
    ],
    "utils": [
        "re.compile"
    ],
    "utils.imt": [
        "tokenize.any"
    ],
    "utils.recurse": [
        "sql.TokenList.get_sublists"
    ],
    "utils.split_unquoted_newlines": [
        "locale.str"
    ],
    "warnings": [
        "warnings.simplefilter"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "tracemalloc.get_object_traceback"
    ],
    "warnings._getaction": [
        "__init__.UserString.startswith"
    ],
    "warnings._getcategory": [
        "__init__.UserString.rpartition"
    ],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings._processoptions": [
        "warnings._setoption"
    ],
    "warnings._setoption": [
        "warnings.filterwarnings"
    ],
    "warnings._showwarnmsg": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg"
    ],
    "warnings._warn_unawaited_coroutine": [
        "warnings.warn"
    ],
    "warnings.filterwarnings": [
        "warnings._add_filter"
    ],
    "warnings.formatwarning": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings.showwarning": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings.simplefilter": [
        "warnings._add_filter"
    ],
    "warnings.warn": [
        "warnings.warn_explicit"
    ],
    "warnings.warn_explicit": [
        "warnings._showwarnmsg"
    ],
    "weakref.WeakKeyDictionary.__deepcopy__": [
        "weakref.WeakKeyDictionary.items"
    ],
    "weakref.WeakKeyDictionary.__init__": [
        "weakref.WeakKeyDictionary.update"
    ],
    "weakref.WeakKeyDictionary.__len__": [
        "weakref.WeakKeyDictionary._scrub_removals"
    ],
    "weakref.WeakKeyDictionary.copy": [
        "weakref.WeakKeyDictionary.items"
    ],
    "weakref.WeakKeyDictionary.get": [
        "weakref.WeakKeyDictionary.get"
    ],
    "weakref.WeakKeyDictionary.items": [
        "weakref.WeakKeyDictionary.items"
    ],
    "weakref.WeakKeyDictionary.keys": [
        "_weakrefset._IterationGuard.__init__"
    ],
    "weakref.WeakKeyDictionary.pop": [
        "weakref.WeakKeyDictionary.pop"
    ],
    "weakref.WeakKeyDictionary.popitem": [
        "weakref.WeakKeyDictionary.popitem"
    ],
    "weakref.WeakKeyDictionary.setdefault": [
        "weakref.WeakKeyDictionary.setdefault"
    ],
    "weakref.WeakKeyDictionary.update": [
        "weakref.WeakKeyDictionary.update"
    ],
    "weakref.WeakKeyDictionary.values": [
        "weakref.WeakKeyDictionary.items"
    ],
    "weakref.WeakValueDictionary.__contains__": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.__deepcopy__": [
        "weakref.WeakValueDictionary.items"
    ],
    "weakref.WeakValueDictionary.__delitem__": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.__getitem__": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.__init__": [
        "weakref.WeakValueDictionary.update"
    ],
    "weakref.WeakValueDictionary.__len__": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.__setitem__": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.copy": [
        "weakref.WeakValueDictionary.items"
    ],
    "weakref.WeakValueDictionary.get": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.items": [
        "weakref.WeakValueDictionary.items"
    ],
    "weakref.WeakValueDictionary.itervaluerefs": [
        "weakref.WeakValueDictionary.values"
    ],
    "weakref.WeakValueDictionary.keys": [
        "weakref.WeakValueDictionary.items"
    ],
    "weakref.WeakValueDictionary.pop": [
        "weakref.WeakValueDictionary.pop"
    ],
    "weakref.WeakValueDictionary.popitem": [
        "weakref.WeakValueDictionary.popitem"
    ],
    "weakref.WeakValueDictionary.setdefault": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.update": [
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary.valuerefs": [
        "weakref.WeakValueDictionary.values"
    ],
    "weakref.WeakValueDictionary.values": [
        "weakref.WeakValueDictionary.values"
    ],
    "weakref.finalize.__init__": [
        "warnings.warn"
    ],
    "weakref.finalize._exitfunc": [
        "weakref.finalize._select_for_exit"
    ],
    "weakref.finalize._select_for_exit": [
        "__init__.UserList.sort"
    ]
}